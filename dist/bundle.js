/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/pica/dist/pica.js":
/*!****************************************!*\
  !*** ./node_modules/pica/dist/pica.js ***!
  \****************************************/
/***/ ((module) => {

eval("/*!\n\npica\nhttps://github.com/nodeca/pica\n\n*/\n\n(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=undefined;if(!f&&c)return require(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=undefined,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){\n// Collection of math functions\n//\n// 1. Combine components together\n// 2. Has async init to load wasm modules\n//\n'use strict';\n\nvar Multimath = _dereq_('multimath');\n\nvar mm_unsharp_mask = _dereq_('./mm_unsharp_mask');\n\nvar mm_resize = _dereq_('./mm_resize');\n\nfunction MathLib(requested_features) {\n  var __requested_features = requested_features || [];\n\n  var features = {\n    js: __requested_features.indexOf('js') >= 0,\n    wasm: __requested_features.indexOf('wasm') >= 0\n  };\n  Multimath.call(this, features);\n  this.features = {\n    js: features.js,\n    wasm: features.wasm && this.has_wasm()\n  };\n  this.use(mm_unsharp_mask);\n  this.use(mm_resize);\n}\n\nMathLib.prototype = Object.create(Multimath.prototype);\nMathLib.prototype.constructor = MathLib;\n\nMathLib.prototype.resizeAndUnsharp = function resizeAndUnsharp(options, cache) {\n  var result = this.resize(options, cache);\n\n  if (options.unsharpAmount) {\n    this.unsharp_mask(result, options.toWidth, options.toHeight, options.unsharpAmount, options.unsharpRadius, options.unsharpThreshold);\n  }\n\n  return result;\n};\n\nmodule.exports = MathLib;\n\n},{\"./mm_resize\":4,\"./mm_unsharp_mask\":9,\"multimath\":19}],2:[function(_dereq_,module,exports){\n// Resize convolvers, pure JS implementation\n//\n'use strict'; // Precision of fixed FP values\n//var FIXED_FRAC_BITS = 14;\n\nfunction clampTo8(i) {\n  return i < 0 ? 0 : i > 255 ? 255 : i;\n}\n\nfunction clampNegative(i) {\n  return i >= 0 ? i : 0;\n} // Convolve image data in horizontal direction. Can be used for:\n//\n// 1. bitmap with premultiplied alpha\n// 2. bitmap without alpha (all values 255)\n//\n// Notes:\n//\n// - output is transposed\n// - output resolution is ~15 bits per channel(for better precision).\n//\n\n\nfunction convolveHor(src, dest, srcW, srcH, destW, filters) {\n  var r, g, b, a;\n  var filterPtr, filterShift, filterSize;\n  var srcPtr, srcY, destX, filterVal;\n  var srcOffset = 0,\n      destOffset = 0; // For each row\n\n  for (srcY = 0; srcY < srcH; srcY++) {\n    filterPtr = 0; // Apply precomputed filters to each destination row point\n\n    for (destX = 0; destX < destW; destX++) {\n      // Get the filter that determines the current output pixel.\n      filterShift = filters[filterPtr++];\n      filterSize = filters[filterPtr++];\n      srcPtr = srcOffset + filterShift * 4 | 0;\n      r = g = b = a = 0; // Apply the filter to the row to get the destination pixel r, g, b, a\n\n      for (; filterSize > 0; filterSize--) {\n        filterVal = filters[filterPtr++]; // Use reverse order to workaround deopts in old v8 (node v.10)\n        // Big thanks to @mraleph (Vyacheslav Egorov) for the tip.\n\n        a = a + filterVal * src[srcPtr + 3] | 0;\n        b = b + filterVal * src[srcPtr + 2] | 0;\n        g = g + filterVal * src[srcPtr + 1] | 0;\n        r = r + filterVal * src[srcPtr] | 0;\n        srcPtr = srcPtr + 4 | 0;\n      } // Store 15 bits between passes for better precision\n      // Instead of shift to 14 (FIXED_FRAC_BITS), shift to 7 only\n      //\n\n\n      dest[destOffset + 3] = clampNegative(a >> 7);\n      dest[destOffset + 2] = clampNegative(b >> 7);\n      dest[destOffset + 1] = clampNegative(g >> 7);\n      dest[destOffset] = clampNegative(r >> 7);\n      destOffset = destOffset + srcH * 4 | 0;\n    }\n\n    destOffset = (srcY + 1) * 4 | 0;\n    srcOffset = (srcY + 1) * srcW * 4 | 0;\n  }\n} // Supplementary method for `convolveHor()`\n//\n\n\nfunction convolveVert(src, dest, srcW, srcH, destW, filters) {\n  var r, g, b, a;\n  var filterPtr, filterShift, filterSize;\n  var srcPtr, srcY, destX, filterVal;\n  var srcOffset = 0,\n      destOffset = 0; // For each row\n\n  for (srcY = 0; srcY < srcH; srcY++) {\n    filterPtr = 0; // Apply precomputed filters to each destination row point\n\n    for (destX = 0; destX < destW; destX++) {\n      // Get the filter that determines the current output pixel.\n      filterShift = filters[filterPtr++];\n      filterSize = filters[filterPtr++];\n      srcPtr = srcOffset + filterShift * 4 | 0;\n      r = g = b = a = 0; // Apply the filter to the row to get the destination pixel r, g, b, a\n\n      for (; filterSize > 0; filterSize--) {\n        filterVal = filters[filterPtr++]; // Use reverse order to workaround deopts in old v8 (node v.10)\n        // Big thanks to @mraleph (Vyacheslav Egorov) for the tip.\n\n        a = a + filterVal * src[srcPtr + 3] | 0;\n        b = b + filterVal * src[srcPtr + 2] | 0;\n        g = g + filterVal * src[srcPtr + 1] | 0;\n        r = r + filterVal * src[srcPtr] | 0;\n        srcPtr = srcPtr + 4 | 0;\n      } // Sync with premultiplied version for exact result match\n\n\n      r >>= 7;\n      g >>= 7;\n      b >>= 7;\n      a >>= 7; // Bring this value back in range + round result.\n      //\n\n      dest[destOffset + 3] = clampTo8(a + (1 << 13) >> 14);\n      dest[destOffset + 2] = clampTo8(b + (1 << 13) >> 14);\n      dest[destOffset + 1] = clampTo8(g + (1 << 13) >> 14);\n      dest[destOffset] = clampTo8(r + (1 << 13) >> 14);\n      destOffset = destOffset + srcH * 4 | 0;\n    }\n\n    destOffset = (srcY + 1) * 4 | 0;\n    srcOffset = (srcY + 1) * srcW * 4 | 0;\n  }\n} // Premultiply & convolve image data in horizontal direction. Can be used for:\n//\n// - Any bitmap data, extracted with `.getImageData()` method (with\n//   non-premultiplied alpha)\n//\n// For images without alpha channel this method is slower than `convolveHor()`\n//\n\n\nfunction convolveHorWithPre(src, dest, srcW, srcH, destW, filters) {\n  var r, g, b, a, alpha;\n  var filterPtr, filterShift, filterSize;\n  var srcPtr, srcY, destX, filterVal;\n  var srcOffset = 0,\n      destOffset = 0; // For each row\n\n  for (srcY = 0; srcY < srcH; srcY++) {\n    filterPtr = 0; // Apply precomputed filters to each destination row point\n\n    for (destX = 0; destX < destW; destX++) {\n      // Get the filter that determines the current output pixel.\n      filterShift = filters[filterPtr++];\n      filterSize = filters[filterPtr++];\n      srcPtr = srcOffset + filterShift * 4 | 0;\n      r = g = b = a = 0; // Apply the filter to the row to get the destination pixel r, g, b, a\n\n      for (; filterSize > 0; filterSize--) {\n        filterVal = filters[filterPtr++]; // Use reverse order to workaround deopts in old v8 (node v.10)\n        // Big thanks to @mraleph (Vyacheslav Egorov) for the tip.\n\n        alpha = src[srcPtr + 3];\n        a = a + filterVal * alpha | 0;\n        b = b + filterVal * src[srcPtr + 2] * alpha | 0;\n        g = g + filterVal * src[srcPtr + 1] * alpha | 0;\n        r = r + filterVal * src[srcPtr] * alpha | 0;\n        srcPtr = srcPtr + 4 | 0;\n      } // Premultiply is (* alpha / 255).\n      // Postpone division for better performance\n\n\n      b = b / 255 | 0;\n      g = g / 255 | 0;\n      r = r / 255 | 0; // Store 15 bits between passes for better precision\n      // Instead of shift to 14 (FIXED_FRAC_BITS), shift to 7 only\n      //\n\n      dest[destOffset + 3] = clampNegative(a >> 7);\n      dest[destOffset + 2] = clampNegative(b >> 7);\n      dest[destOffset + 1] = clampNegative(g >> 7);\n      dest[destOffset] = clampNegative(r >> 7);\n      destOffset = destOffset + srcH * 4 | 0;\n    }\n\n    destOffset = (srcY + 1) * 4 | 0;\n    srcOffset = (srcY + 1) * srcW * 4 | 0;\n  }\n} // Supplementary method for `convolveHorWithPre()`\n//\n\n\nfunction convolveVertWithPre(src, dest, srcW, srcH, destW, filters) {\n  var r, g, b, a;\n  var filterPtr, filterShift, filterSize;\n  var srcPtr, srcY, destX, filterVal;\n  var srcOffset = 0,\n      destOffset = 0; // For each row\n\n  for (srcY = 0; srcY < srcH; srcY++) {\n    filterPtr = 0; // Apply precomputed filters to each destination row point\n\n    for (destX = 0; destX < destW; destX++) {\n      // Get the filter that determines the current output pixel.\n      filterShift = filters[filterPtr++];\n      filterSize = filters[filterPtr++];\n      srcPtr = srcOffset + filterShift * 4 | 0;\n      r = g = b = a = 0; // Apply the filter to the row to get the destination pixel r, g, b, a\n\n      for (; filterSize > 0; filterSize--) {\n        filterVal = filters[filterPtr++]; // Use reverse order to workaround deopts in old v8 (node v.10)\n        // Big thanks to @mraleph (Vyacheslav Egorov) for the tip.\n\n        a = a + filterVal * src[srcPtr + 3] | 0;\n        b = b + filterVal * src[srcPtr + 2] | 0;\n        g = g + filterVal * src[srcPtr + 1] | 0;\n        r = r + filterVal * src[srcPtr] | 0;\n        srcPtr = srcPtr + 4 | 0;\n      } // Downscale to leave room for un-premultiply\n\n\n      r >>= 7;\n      g >>= 7;\n      b >>= 7;\n      a >>= 7; // Un-premultiply\n\n      a = clampTo8(a + (1 << 13) >> 14);\n\n      if (a > 0) {\n        r = r * 255 / a | 0;\n        g = g * 255 / a | 0;\n        b = b * 255 / a | 0;\n      } // Bring this value back in range + round result.\n      // Shift value = FIXED_FRAC_BITS + 7\n      //\n\n\n      dest[destOffset + 3] = a;\n      dest[destOffset + 2] = clampTo8(b + (1 << 13) >> 14);\n      dest[destOffset + 1] = clampTo8(g + (1 << 13) >> 14);\n      dest[destOffset] = clampTo8(r + (1 << 13) >> 14);\n      destOffset = destOffset + srcH * 4 | 0;\n    }\n\n    destOffset = (srcY + 1) * 4 | 0;\n    srcOffset = (srcY + 1) * srcW * 4 | 0;\n  }\n}\n\nmodule.exports = {\n  convolveHor: convolveHor,\n  convolveVert: convolveVert,\n  convolveHorWithPre: convolveHorWithPre,\n  convolveVertWithPre: convolveVertWithPre\n};\n\n},{}],3:[function(_dereq_,module,exports){\n// This is autogenerated file from math.wasm, don't edit.\n//\n'use strict';\n/* eslint-disable max-len */\n\nmodule.exports = 'AGFzbQEAAAAADAZkeWxpbmsAAAAAAAEYA2AGf39/f39/AGAAAGAIf39/f39/f38AAg8BA2VudgZtZW1vcnkCAAADBwYBAAAAAAIGBgF/AEEACweUAQgRX193YXNtX2NhbGxfY3RvcnMAAAtjb252b2x2ZUhvcgABDGNvbnZvbHZlVmVydAACEmNvbnZvbHZlSG9yV2l0aFByZQADE2NvbnZvbHZlVmVydFdpdGhQcmUABApjb252b2x2ZUhWAAUMX19kc29faGFuZGxlAwAYX193YXNtX2FwcGx5X2RhdGFfcmVsb2NzAAAKyA4GAwABC4wDARB/AkAgA0UNACAERQ0AIANBAnQhFQNAQQAhE0EAIQsDQCALQQJqIQcCfyALQQF0IAVqIgYuAQIiC0UEQEEAIQhBACEGQQAhCUEAIQogBwwBCyASIAYuAQBqIQhBACEJQQAhCiALIRRBACEOIAchBkEAIQ8DQCAFIAZBAXRqLgEAIhAgACAIQQJ0aigCACIRQRh2bCAPaiEPIBFB/wFxIBBsIAlqIQkgEUEQdkH/AXEgEGwgDmohDiARQQh2Qf8BcSAQbCAKaiEKIAhBAWohCCAGQQFqIQYgFEEBayIUDQALIAlBB3UhCCAKQQd1IQYgDkEHdSEJIA9BB3UhCiAHIAtqCyELIAEgDEEBdCIHaiAIQQAgCEEAShs7AQAgASAHQQJyaiAGQQAgBkEAShs7AQAgASAHQQRyaiAJQQAgCUEAShs7AQAgASAHQQZyaiAKQQAgCkEAShs7AQAgDCAVaiEMIBNBAWoiEyAERw0ACyANQQFqIg0gAmwhEiANQQJ0IQwgAyANRw0ACwsL2gMBD38CQCADRQ0AIARFDQAgAkECdCEUA0AgCyEMQQAhE0EAIQIDQCACQQJqIQYCfyACQQF0IAVqIgcuAQIiAkUEQEEAIQhBACEHQQAhCkEAIQkgBgwBCyAHLgEAQQJ0IBJqIQhBACEJIAIhCkEAIQ0gBiEHQQAhDkEAIQ8DQCAFIAdBAXRqLgEAIhAgACAIQQF0IhFqLwEAbCAJaiEJIAAgEUEGcmovAQAgEGwgDmohDiAAIBFBBHJqLwEAIBBsIA9qIQ8gACARQQJyai8BACAQbCANaiENIAhBBGohCCAHQQFqIQcgCkEBayIKDQALIAlBB3UhCCANQQd1IQcgDkEHdSEKIA9BB3UhCSACIAZqCyECIAEgDEECdGogB0GAQGtBDnUiBkH/ASAGQf8BSBsiBkEAIAZBAEobQQh0QYD+A3EgCUGAQGtBDnUiBkH/ASAGQf8BSBsiBkEAIAZBAEobQRB0QYCA/AdxIApBgEBrQQ51IgZB/wEgBkH/AUgbIgZBACAGQQBKG0EYdHJyIAhBgEBrQQ51IgZB/wEgBkH/AUgbIgZBACAGQQBKG3I2AgAgAyAMaiEMIBNBAWoiEyAERw0ACyAUIAtBAWoiC2whEiADIAtHDQALCwuSAwEQfwJAIANFDQAgBEUNACADQQJ0IRUDQEEAIRNBACEGA0AgBkECaiEIAn8gBkEBdCAFaiIGLgECIgdFBEBBACEJQQAhDEEAIQ1BACEOIAgMAQsgEiAGLgEAaiEJQQAhDkEAIQ1BACEMIAchFEEAIQ8gCCEGA0AgBSAGQQF0ai4BACAAIAlBAnRqKAIAIhBBGHZsIhEgD2ohDyARIBBBEHZB/wFxbCAMaiEMIBEgEEEIdkH/AXFsIA1qIQ0gESAQQf8BcWwgDmohDiAJQQFqIQkgBkEBaiEGIBRBAWsiFA0ACyAPQQd1IQkgByAIagshBiABIApBAXQiCGogDkH/AW1BB3UiB0EAIAdBAEobOwEAIAEgCEECcmogDUH/AW1BB3UiB0EAIAdBAEobOwEAIAEgCEEEcmogDEH/AW1BB3UiB0EAIAdBAEobOwEAIAEgCEEGcmogCUEAIAlBAEobOwEAIAogFWohCiATQQFqIhMgBEcNAAsgC0EBaiILIAJsIRIgC0ECdCEKIAMgC0cNAAsLC4IEAQ9/AkAgA0UNACAERQ0AIAJBAnQhFANAIAshDEEAIRJBACEHA0AgB0ECaiEKAn8gB0EBdCAFaiICLgECIhNFBEBBACEIQQAhCUEAIQYgCiEHQQAMAQsgAi4BAEECdCARaiEJQQAhByATIQJBACENIAohBkEAIQ5BACEPA0AgBSAGQQF0ai4BACIIIAAgCUEBdCIQai8BAGwgB2ohByAAIBBBBnJqLwEAIAhsIA5qIQ4gACAQQQRyai8BACAIbCAPaiEPIAAgEEECcmovAQAgCGwgDWohDSAJQQRqIQkgBkEBaiEGIAJBAWsiAg0ACyAHQQd1IQggDUEHdSEJIA9BB3UhBiAKIBNqIQcgDkEHdQtBgEBrQQ51IgJB/wEgAkH/AUgbIgJBACACQQBKGyIKQf8BcQRAIAlB/wFsIAJtIQkgCEH/AWwgAm0hCCAGQf8BbCACbSEGCyABIAxBAnRqIAlBgEBrQQ51IgJB/wEgAkH/AUgbIgJBACACQQBKG0EIdEGA/gNxIAZBgEBrQQ51IgJB/wEgAkH/AUgbIgJBACACQQBKG0EQdEGAgPwHcSAKQRh0ciAIQYBAa0EOdSICQf8BIAJB/wFIGyICQQAgAkEAShtycjYCACADIAxqIQwgEkEBaiISIARHDQALIBQgC0EBaiILbCERIAMgC0cNAAsLC0AAIAcEQEEAIAIgAyAEIAUgABADIAJBACAEIAUgBiABEAQPC0EAIAIgAyAEIAUgABABIAJBACAEIAUgBiABEAIL';\n\n},{}],4:[function(_dereq_,module,exports){\n'use strict';\n\nmodule.exports = {\n  name: 'resize',\n  fn: _dereq_('./resize'),\n  wasm_fn: _dereq_('./resize_wasm'),\n  wasm_src: _dereq_('./convolve_wasm_base64')\n};\n\n},{\"./convolve_wasm_base64\":3,\"./resize\":5,\"./resize_wasm\":8}],5:[function(_dereq_,module,exports){\n'use strict';\n\nvar createFilters = _dereq_('./resize_filter_gen');\n\nvar _require = _dereq_('./convolve'),\n    convolveHor = _require.convolveHor,\n    convolveVert = _require.convolveVert,\n    convolveHorWithPre = _require.convolveHorWithPre,\n    convolveVertWithPre = _require.convolveVertWithPre;\n\nfunction hasAlpha(src, width, height) {\n  var ptr = 3,\n      len = width * height * 4 | 0;\n\n  while (ptr < len) {\n    if (src[ptr] !== 255) return true;\n    ptr = ptr + 4 | 0;\n  }\n\n  return false;\n}\n\nfunction resetAlpha(dst, width, height) {\n  var ptr = 3,\n      len = width * height * 4 | 0;\n\n  while (ptr < len) {\n    dst[ptr] = 0xFF;\n    ptr = ptr + 4 | 0;\n  }\n}\n\nmodule.exports = function resize(options) {\n  var src = options.src;\n  var srcW = options.width;\n  var srcH = options.height;\n  var destW = options.toWidth;\n  var destH = options.toHeight;\n  var scaleX = options.scaleX || options.toWidth / options.width;\n  var scaleY = options.scaleY || options.toHeight / options.height;\n  var offsetX = options.offsetX || 0;\n  var offsetY = options.offsetY || 0;\n  var dest = options.dest || new Uint8Array(destW * destH * 4);\n  var filter = typeof options.filter === 'undefined' ? 'mks2013' : options.filter;\n  var filtersX = createFilters(filter, srcW, destW, scaleX, offsetX),\n      filtersY = createFilters(filter, srcH, destH, scaleY, offsetY);\n  var tmp = new Uint16Array(destW * srcH * 4); // Autodetect if alpha channel exists, and use appropriate method\n\n  if (hasAlpha(src, srcW, srcH)) {\n    convolveHorWithPre(src, tmp, srcW, srcH, destW, filtersX);\n    convolveVertWithPre(tmp, dest, srcH, destW, destH, filtersY);\n  } else {\n    convolveHor(src, tmp, srcW, srcH, destW, filtersX);\n    convolveVert(tmp, dest, srcH, destW, destH, filtersY);\n    resetAlpha(dest, destW, destH);\n  }\n\n  return dest;\n};\n\n},{\"./convolve\":2,\"./resize_filter_gen\":6}],6:[function(_dereq_,module,exports){\n// Calculate convolution filters for each destination point,\n// and pack data to Int16Array:\n//\n// [ shift, length, data..., shift2, length2, data..., ... ]\n//\n// - shift - offset in src image\n// - length - filter length (in src points)\n// - data - filter values sequence\n//\n'use strict';\n\nvar FILTER_INFO = _dereq_('./resize_filter_info'); // Precision of fixed FP values\n\n\nvar FIXED_FRAC_BITS = 14;\n\nfunction toFixedPoint(num) {\n  return Math.round(num * ((1 << FIXED_FRAC_BITS) - 1));\n}\n\nmodule.exports = function resizeFilterGen(filter, srcSize, destSize, scale, offset) {\n  var filterFunction = FILTER_INFO.filter[filter].fn;\n  var scaleInverted = 1.0 / scale;\n  var scaleClamped = Math.min(1.0, scale); // For upscale\n  // Filter window (averaging interval), scaled to src image\n\n  var srcWindow = FILTER_INFO.filter[filter].win / scaleClamped;\n  var destPixel, srcPixel, srcFirst, srcLast, filterElementSize, floatFilter, fxpFilter, total, pxl, idx, floatVal, filterTotal, filterVal;\n  var leftNotEmpty, rightNotEmpty, filterShift, filterSize;\n  var maxFilterElementSize = Math.floor((srcWindow + 1) * 2);\n  var packedFilter = new Int16Array((maxFilterElementSize + 2) * destSize);\n  var packedFilterPtr = 0;\n  var slowCopy = !packedFilter.subarray || !packedFilter.set; // For each destination pixel calculate source range and built filter values\n\n  for (destPixel = 0; destPixel < destSize; destPixel++) {\n    // Scaling should be done relative to central pixel point\n    srcPixel = (destPixel + 0.5) * scaleInverted + offset;\n    srcFirst = Math.max(0, Math.floor(srcPixel - srcWindow));\n    srcLast = Math.min(srcSize - 1, Math.ceil(srcPixel + srcWindow));\n    filterElementSize = srcLast - srcFirst + 1;\n    floatFilter = new Float32Array(filterElementSize);\n    fxpFilter = new Int16Array(filterElementSize);\n    total = 0.0; // Fill filter values for calculated range\n\n    for (pxl = srcFirst, idx = 0; pxl <= srcLast; pxl++, idx++) {\n      floatVal = filterFunction((pxl + 0.5 - srcPixel) * scaleClamped);\n      total += floatVal;\n      floatFilter[idx] = floatVal;\n    } // Normalize filter, convert to fixed point and accumulate conversion error\n\n\n    filterTotal = 0;\n\n    for (idx = 0; idx < floatFilter.length; idx++) {\n      filterVal = floatFilter[idx] / total;\n      filterTotal += filterVal;\n      fxpFilter[idx] = toFixedPoint(filterVal);\n    } // Compensate normalization error, to minimize brightness drift\n\n\n    fxpFilter[destSize >> 1] += toFixedPoint(1.0 - filterTotal); //\n    // Now pack filter to useable form\n    //\n    // 1. Trim heading and tailing zero values, and compensate shitf/length\n    // 2. Put all to single array in this format:\n    //\n    //    [ pos shift, data length, value1, value2, value3, ... ]\n    //\n\n    leftNotEmpty = 0;\n\n    while (leftNotEmpty < fxpFilter.length && fxpFilter[leftNotEmpty] === 0) {\n      leftNotEmpty++;\n    }\n\n    if (leftNotEmpty < fxpFilter.length) {\n      rightNotEmpty = fxpFilter.length - 1;\n\n      while (rightNotEmpty > 0 && fxpFilter[rightNotEmpty] === 0) {\n        rightNotEmpty--;\n      }\n\n      filterShift = srcFirst + leftNotEmpty;\n      filterSize = rightNotEmpty - leftNotEmpty + 1;\n      packedFilter[packedFilterPtr++] = filterShift; // shift\n\n      packedFilter[packedFilterPtr++] = filterSize; // size\n\n      if (!slowCopy) {\n        packedFilter.set(fxpFilter.subarray(leftNotEmpty, rightNotEmpty + 1), packedFilterPtr);\n        packedFilterPtr += filterSize;\n      } else {\n        // fallback for old IE < 11, without subarray/set methods\n        for (idx = leftNotEmpty; idx <= rightNotEmpty; idx++) {\n          packedFilter[packedFilterPtr++] = fxpFilter[idx];\n        }\n      }\n    } else {\n      // zero data, write header only\n      packedFilter[packedFilterPtr++] = 0; // shift\n\n      packedFilter[packedFilterPtr++] = 0; // size\n    }\n  }\n\n  return packedFilter;\n};\n\n},{\"./resize_filter_info\":7}],7:[function(_dereq_,module,exports){\n// Filter definitions to build tables for\n// resizing convolvers.\n//\n// Presets for quality 0..3. Filter functions + window size\n//\n'use strict';\n\nvar filter = {\n  // Nearest neibor\n  box: {\n    win: 0.5,\n    fn: function fn(x) {\n      if (x < 0) x = -x;\n      return x < 0.5 ? 1.0 : 0.0;\n    }\n  },\n  // // Hamming\n  hamming: {\n    win: 1.0,\n    fn: function fn(x) {\n      if (x < 0) x = -x;\n\n      if (x >= 1.0) {\n        return 0.0;\n      }\n\n      if (x < 1.19209290E-07) {\n        return 1.0;\n      }\n\n      var xpi = x * Math.PI;\n      return Math.sin(xpi) / xpi * (0.54 + 0.46 * Math.cos(xpi / 1.0));\n    }\n  },\n  // Lanczos, win = 2\n  lanczos2: {\n    win: 2.0,\n    fn: function fn(x) {\n      if (x < 0) x = -x;\n\n      if (x >= 2.0) {\n        return 0.0;\n      }\n\n      if (x < 1.19209290E-07) {\n        return 1.0;\n      }\n\n      var xpi = x * Math.PI;\n      return Math.sin(xpi) / xpi * Math.sin(xpi / 2.0) / (xpi / 2.0);\n    }\n  },\n  // Lanczos, win = 3\n  lanczos3: {\n    win: 3.0,\n    fn: function fn(x) {\n      if (x < 0) x = -x;\n\n      if (x >= 3.0) {\n        return 0.0;\n      }\n\n      if (x < 1.19209290E-07) {\n        return 1.0;\n      }\n\n      var xpi = x * Math.PI;\n      return Math.sin(xpi) / xpi * Math.sin(xpi / 3.0) / (xpi / 3.0);\n    }\n  },\n  // Magic Kernel Sharp 2013, win = 2.5\n  // http://johncostella.com/magic/\n  mks2013: {\n    win: 2.5,\n    fn: function fn(x) {\n      if (x < 0) x = -x;\n\n      if (x >= 2.5) {\n        return 0.0;\n      }\n\n      if (x >= 1.5) {\n        return -0.125 * (x - 2.5) * (x - 2.5);\n      }\n\n      if (x >= 0.5) {\n        return 0.25 * (4 * x * x - 11 * x + 7);\n      }\n\n      return 1.0625 - 1.75 * x * x;\n    }\n  }\n};\nmodule.exports = {\n  filter: filter,\n  // Legacy mapping\n  f2q: {\n    box: 0,\n    hamming: 1,\n    lanczos2: 2,\n    lanczos3: 3\n  },\n  q2f: ['box', 'hamming', 'lanczos2', 'lanczos3']\n};\n\n},{}],8:[function(_dereq_,module,exports){\n'use strict';\n\nvar createFilters = _dereq_('./resize_filter_gen');\n\nfunction hasAlpha(src, width, height) {\n  var ptr = 3,\n      len = width * height * 4 | 0;\n\n  while (ptr < len) {\n    if (src[ptr] !== 255) return true;\n    ptr = ptr + 4 | 0;\n  }\n\n  return false;\n}\n\nfunction resetAlpha(dst, width, height) {\n  var ptr = 3,\n      len = width * height * 4 | 0;\n\n  while (ptr < len) {\n    dst[ptr] = 0xFF;\n    ptr = ptr + 4 | 0;\n  }\n}\n\nfunction asUint8Array(src) {\n  return new Uint8Array(src.buffer, 0, src.byteLength);\n}\n\nvar IS_LE = true; // should not crash everything on module load in old browsers\n\ntry {\n  IS_LE = new Uint32Array(new Uint8Array([1, 0, 0, 0]).buffer)[0] === 1;\n} catch (__) {}\n\nfunction copyInt16asLE(src, target, target_offset) {\n  if (IS_LE) {\n    target.set(asUint8Array(src), target_offset);\n    return;\n  }\n\n  for (var ptr = target_offset, i = 0; i < src.length; i++) {\n    var data = src[i];\n    target[ptr++] = data & 0xFF;\n    target[ptr++] = data >> 8 & 0xFF;\n  }\n}\n\nmodule.exports = function resize_wasm(options) {\n  var src = options.src;\n  var srcW = options.width;\n  var srcH = options.height;\n  var destW = options.toWidth;\n  var destH = options.toHeight;\n  var scaleX = options.scaleX || options.toWidth / options.width;\n  var scaleY = options.scaleY || options.toHeight / options.height;\n  var offsetX = options.offsetX || 0.0;\n  var offsetY = options.offsetY || 0.0;\n  var dest = options.dest || new Uint8Array(destW * destH * 4);\n  var filter = typeof options.filter === 'undefined' ? 'mks2013' : options.filter;\n  var filtersX = createFilters(filter, srcW, destW, scaleX, offsetX),\n      filtersY = createFilters(filter, srcH, destH, scaleY, offsetY); // destination is 0 too.\n\n  var src_offset = 0;\n  var src_size = Math.max(src.byteLength, dest.byteLength); // buffer between convolve passes\n\n  var tmp_offset = this.__align(src_offset + src_size);\n\n  var tmp_size = srcH * destW * 4 * 2; // 2 bytes per channel\n\n  var filtersX_offset = this.__align(tmp_offset + tmp_size);\n\n  var filtersY_offset = this.__align(filtersX_offset + filtersX.byteLength);\n\n  var alloc_bytes = filtersY_offset + filtersY.byteLength;\n\n  var instance = this.__instance('resize', alloc_bytes); //\n  // Fill memory block with data to process\n  //\n\n\n  var mem = new Uint8Array(this.__memory.buffer);\n  var mem32 = new Uint32Array(this.__memory.buffer); // 32-bit copy is much faster in chrome\n\n  var src32 = new Uint32Array(src.buffer);\n  mem32.set(src32); // We should guarantee LE bytes order. Filters are not big, so\n  // speed difference is not significant vs direct .set()\n\n  copyInt16asLE(filtersX, mem, filtersX_offset);\n  copyInt16asLE(filtersY, mem, filtersY_offset); // Now call webassembly method\n  // emsdk does method names with '_'\n\n  var fn = instance.exports.convolveHV || instance.exports._convolveHV;\n\n  if (hasAlpha(src, srcW, srcH)) {\n    fn(filtersX_offset, filtersY_offset, tmp_offset, srcW, srcH, destW, destH, 1);\n  } else {\n    fn(filtersX_offset, filtersY_offset, tmp_offset, srcW, srcH, destW, destH, 0);\n    resetAlpha(dest, destW, destH);\n  } //\n  // Copy data back to typed array\n  //\n  // 32-bit copy is much faster in chrome\n\n\n  var dest32 = new Uint32Array(dest.buffer);\n  dest32.set(new Uint32Array(this.__memory.buffer, 0, destH * destW));\n  return dest;\n};\n\n},{\"./resize_filter_gen\":6}],9:[function(_dereq_,module,exports){\n'use strict';\n\nmodule.exports = {\n  name: 'unsharp_mask',\n  fn: _dereq_('./unsharp_mask'),\n  wasm_fn: _dereq_('./unsharp_mask_wasm'),\n  wasm_src: _dereq_('./unsharp_mask_wasm_base64')\n};\n\n},{\"./unsharp_mask\":10,\"./unsharp_mask_wasm\":11,\"./unsharp_mask_wasm_base64\":12}],10:[function(_dereq_,module,exports){\n// Unsharp mask filter\n//\n// http://stackoverflow.com/a/23322820/1031804\n// USM(O) = O + (2 * (Amount / 100) * (O - GB))\n// GB - gaussian blur.\n//\n// Image is converted from RGB to HSV, unsharp mask is applied to the\n// brightness channel and then image is converted back to RGB.\n//\n'use strict';\n\nvar glur_mono16 = _dereq_('glur/mono16');\n\nfunction hsv_v16(img, width, height) {\n  var size = width * height;\n  var out = new Uint16Array(size);\n  var r, g, b, max;\n\n  for (var i = 0; i < size; i++) {\n    r = img[4 * i];\n    g = img[4 * i + 1];\n    b = img[4 * i + 2];\n    max = r >= g && r >= b ? r : g >= b && g >= r ? g : b;\n    out[i] = max << 8;\n  }\n\n  return out;\n}\n\nmodule.exports = function unsharp(img, width, height, amount, radius, threshold) {\n  var v1, v2, vmul;\n  var diff, iTimes4;\n\n  if (amount === 0 || radius < 0.5) {\n    return;\n  }\n\n  if (radius > 2.0) {\n    radius = 2.0;\n  }\n\n  var brightness = hsv_v16(img, width, height);\n  var blured = new Uint16Array(brightness); // copy, because blur modify src\n\n  glur_mono16(blured, width, height, radius);\n  var amountFp = amount / 100 * 0x1000 + 0.5 | 0;\n  var thresholdFp = threshold << 8;\n  var size = width * height;\n  /* eslint-disable indent */\n\n  for (var i = 0; i < size; i++) {\n    v1 = brightness[i];\n    diff = v1 - blured[i];\n\n    if (Math.abs(diff) >= thresholdFp) {\n      // add unsharp mask to the brightness channel\n      v2 = v1 + (amountFp * diff + 0x800 >> 12); // Both v1 and v2 are within [0.0 .. 255.0] (0000-FF00) range, never going into\n      // [255.003 .. 255.996] (FF01-FFFF). This allows to round this value as (x+.5)|0\n      // later without overflowing.\n\n      v2 = v2 > 0xff00 ? 0xff00 : v2;\n      v2 = v2 < 0x0000 ? 0x0000 : v2; // Avoid division by 0. V=0 means rgb(0,0,0), unsharp with unsharpAmount>0 cannot\n      // change this value (because diff between colors gets inflated), so no need to verify correctness.\n\n      v1 = v1 !== 0 ? v1 : 1; // Multiplying V in HSV model by a constant is equivalent to multiplying each component\n      // in RGB by the same constant (same for HSL), see also:\n      // https://beesbuzz.biz/code/16-hsv-color-transforms\n\n      vmul = (v2 << 12) / v1 | 0; // Result will be in [0..255] range because:\n      //  - all numbers are positive\n      //  - r,g,b <= (v1/256)\n      //  - r,g,b,(v1/256),(v2/256) <= 255\n      // So highest this number can get is X*255/X+0.5=255.5 which is < 256 and rounds down.\n\n      iTimes4 = i * 4;\n      img[iTimes4] = img[iTimes4] * vmul + 0x800 >> 12; // R\n\n      img[iTimes4 + 1] = img[iTimes4 + 1] * vmul + 0x800 >> 12; // G\n\n      img[iTimes4 + 2] = img[iTimes4 + 2] * vmul + 0x800 >> 12; // B\n    }\n  }\n};\n\n},{\"glur/mono16\":18}],11:[function(_dereq_,module,exports){\n'use strict';\n\nmodule.exports = function unsharp(img, width, height, amount, radius, threshold) {\n  if (amount === 0 || radius < 0.5) {\n    return;\n  }\n\n  if (radius > 2.0) {\n    radius = 2.0;\n  }\n\n  var pixels = width * height;\n  var img_bytes_cnt = pixels * 4;\n  var hsv_bytes_cnt = pixels * 2;\n  var blur_bytes_cnt = pixels * 2;\n  var blur_line_byte_cnt = Math.max(width, height) * 4; // float32 array\n\n  var blur_coeffs_byte_cnt = 8 * 4; // float32 array\n\n  var img_offset = 0;\n  var hsv_offset = img_bytes_cnt;\n  var blur_offset = hsv_offset + hsv_bytes_cnt;\n  var blur_tmp_offset = blur_offset + blur_bytes_cnt;\n  var blur_line_offset = blur_tmp_offset + blur_bytes_cnt;\n  var blur_coeffs_offset = blur_line_offset + blur_line_byte_cnt;\n\n  var instance = this.__instance('unsharp_mask', img_bytes_cnt + hsv_bytes_cnt + blur_bytes_cnt * 2 + blur_line_byte_cnt + blur_coeffs_byte_cnt, {\n    exp: Math.exp\n  }); // 32-bit copy is much faster in chrome\n\n\n  var img32 = new Uint32Array(img.buffer);\n  var mem32 = new Uint32Array(this.__memory.buffer);\n  mem32.set(img32); // HSL\n\n  var fn = instance.exports.hsv_v16 || instance.exports._hsv_v16;\n  fn(img_offset, hsv_offset, width, height); // BLUR\n\n  fn = instance.exports.blurMono16 || instance.exports._blurMono16;\n  fn(hsv_offset, blur_offset, blur_tmp_offset, blur_line_offset, blur_coeffs_offset, width, height, radius); // UNSHARP\n\n  fn = instance.exports.unsharp || instance.exports._unsharp;\n  fn(img_offset, img_offset, hsv_offset, blur_offset, width, height, amount, threshold); // 32-bit copy is much faster in chrome\n\n  img32.set(new Uint32Array(this.__memory.buffer, 0, pixels));\n};\n\n},{}],12:[function(_dereq_,module,exports){\n// This is autogenerated file from math.wasm, don't edit.\n//\n'use strict';\n/* eslint-disable max-len */\n\nmodule.exports = 'AGFzbQEAAAAADAZkeWxpbmsAAAAAAAE0B2AAAGAEf39/fwBgBn9/f39/fwBgCH9/f39/f39/AGAIf39/f39/f30AYAJ9fwBgAXwBfAIZAgNlbnYDZXhwAAYDZW52Bm1lbW9yeQIAAAMHBgAFAgQBAwYGAX8AQQALB4oBCBFfX3dhc21fY2FsbF9jdG9ycwABFl9fYnVpbGRfZ2F1c3NpYW5fY29lZnMAAg5fX2dhdXNzMTZfbGluZQADCmJsdXJNb25vMTYABAdoc3ZfdjE2AAUHdW5zaGFycAAGDF9fZHNvX2hhbmRsZQMAGF9fd2FzbV9hcHBseV9kYXRhX3JlbG9jcwABCsUMBgMAAQvWAQEHfCABRNuGukOCGvs/IAC7oyICRAAAAAAAAADAohAAIgW2jDgCFCABIAKaEAAiAyADoCIGtjgCECABRAAAAAAAAPA/IAOhIgQgBKIgAyACIAKgokQAAAAAAADwP6AgBaGjIgS2OAIAIAEgBSAEmqIiB7Y4AgwgASADIAJEAAAAAAAA8D+gIASioiIItjgCCCABIAMgAkQAAAAAAADwv6AgBKKiIgK2OAIEIAEgByAIoCAFRAAAAAAAAPA/IAahoCIDo7Y4AhwgASAEIAKgIAOjtjgCGAuGBQMGfwl8An0gAyoCDCEVIAMqAgghFiADKgIUuyERIAMqAhC7IRACQCAEQQFrIghBAEgiCQRAIAIhByAAIQYMAQsgAiAALwEAuCIPIAMqAhi7oiIMIBGiIg0gDCAQoiAPIAMqAgS7IhOiIhQgAyoCALsiEiAPoqCgoCIOtjgCACACQQRqIQcgAEECaiEGIAhFDQAgCEEBIAhBAUgbIgpBf3MhCwJ/IAQgCmtBAXFFBEAgDiENIAgMAQsgAiANIA4gEKIgFCASIAAvAQK4Ig+ioKCgIg22OAIEIAJBCGohByAAQQRqIQYgDiEMIARBAmsLIQIgC0EAIARrRg0AA0AgByAMIBGiIA0gEKIgDyAToiASIAYvAQC4Ig6ioKCgIgy2OAIAIAcgDSARoiAMIBCiIA4gE6IgEiAGLwECuCIPoqCgoCINtjgCBCAHQQhqIQcgBkEEaiEGIAJBAkohACACQQJrIQIgAA0ACwsCQCAJDQAgASAFIAhsQQF0aiIAAn8gBkECay8BACICuCINIBW7IhKiIA0gFrsiE6KgIA0gAyoCHLuiIgwgEKKgIAwgEaKgIg8gB0EEayIHKgIAu6AiDkQAAAAAAADwQWMgDkQAAAAAAAAAAGZxBEAgDqsMAQtBAAs7AQAgCEUNACAGQQRrIQZBACAFa0EBdCEBA0ACfyANIBKiIAJB//8DcbgiDSAToqAgDyIOIBCioCAMIBGioCIPIAdBBGsiByoCALugIgxEAAAAAAAA8EFjIAxEAAAAAAAAAABmcQRAIAyrDAELQQALIQMgBi8BACECIAAgAWoiACADOwEAIAZBAmshBiAIQQFKIQMgDiEMIAhBAWshCCADDQALCwvRAgIBfwd8AkAgB0MAAAAAWw0AIARE24a6Q4Ia+z8gB0MAAAA/l7ujIglEAAAAAAAAAMCiEAAiDLaMOAIUIAQgCZoQACIKIAqgIg22OAIQIAREAAAAAAAA8D8gCqEiCyALoiAKIAkgCaCiRAAAAAAAAPA/oCAMoaMiC7Y4AgAgBCAMIAuaoiIOtjgCDCAEIAogCUQAAAAAAADwP6AgC6KiIg+2OAIIIAQgCiAJRAAAAAAAAPC/oCALoqIiCbY4AgQgBCAOIA+gIAxEAAAAAAAA8D8gDaGgIgqjtjgCHCAEIAsgCaAgCqO2OAIYIAYEQANAIAAgBSAIbEEBdGogAiAIQQF0aiADIAQgBSAGEAMgCEEBaiIIIAZHDQALCyAFRQ0AQQAhCANAIAIgBiAIbEEBdGogASAIQQF0aiADIAQgBiAFEAMgCEEBaiIIIAVHDQALCwtxAQN/IAIgA2wiBQRAA0AgASAAKAIAIgRBEHZB/wFxIgIgAiAEQQh2Qf8BcSIDIAMgBEH/AXEiBEkbIAIgA0sbIgYgBiAEIAIgBEsbIAMgBEsbQQh0OwEAIAFBAmohASAAQQRqIQAgBUEBayIFDQALCwuZAgIDfwF8IAQgBWwhBAJ/IAazQwAAgEWUQwAAyEKVu0QAAAAAAADgP6AiC5lEAAAAAAAA4EFjBEAgC6oMAQtBgICAgHgLIQUgBARAIAdBCHQhCUEAIQYDQCAJIAIgBkEBdCIHai8BACIBIAMgB2ovAQBrIgcgB0EfdSIIaiAIc00EQCAAIAZBAnQiCGoiCiAFIAdsQYAQakEMdSABaiIHQYD+AyAHQYD+A0gbIgdBACAHQQBKG0EMdCABQQEgARtuIgEgCi0AAGxBgBBqQQx2OgAAIAAgCEEBcmoiByABIActAABsQYAQakEMdjoAACAAIAhBAnJqIgcgASAHLQAAbEGAEGpBDHY6AAALIAZBAWoiBiAERw0ACwsL';\n\n},{}],13:[function(_dereq_,module,exports){\n'use strict';\n\nvar GC_INTERVAL = 100;\n\nfunction Pool(create, idle) {\n  this.create = create;\n  this.available = [];\n  this.acquired = {};\n  this.lastId = 1;\n  this.timeoutId = 0;\n  this.idle = idle || 2000;\n}\n\nPool.prototype.acquire = function () {\n  var _this = this;\n\n  var resource;\n\n  if (this.available.length !== 0) {\n    resource = this.available.pop();\n  } else {\n    resource = this.create();\n    resource.id = this.lastId++;\n\n    resource.release = function () {\n      return _this.release(resource);\n    };\n  }\n\n  this.acquired[resource.id] = resource;\n  return resource;\n};\n\nPool.prototype.release = function (resource) {\n  var _this2 = this;\n\n  delete this.acquired[resource.id];\n  resource.lastUsed = Date.now();\n  this.available.push(resource);\n\n  if (this.timeoutId === 0) {\n    this.timeoutId = setTimeout(function () {\n      return _this2.gc();\n    }, GC_INTERVAL);\n  }\n};\n\nPool.prototype.gc = function () {\n  var _this3 = this;\n\n  var now = Date.now();\n  this.available = this.available.filter(function (resource) {\n    if (now - resource.lastUsed > _this3.idle) {\n      resource.destroy();\n      return false;\n    }\n\n    return true;\n  });\n\n  if (this.available.length !== 0) {\n    this.timeoutId = setTimeout(function () {\n      return _this3.gc();\n    }, GC_INTERVAL);\n  } else {\n    this.timeoutId = 0;\n  }\n};\n\nmodule.exports = Pool;\n\n},{}],14:[function(_dereq_,module,exports){\n// Add intermediate resizing steps when scaling down by a very large factor.\n//\n// For example, when resizing 10000x10000 down to 10x10, it'll resize it to\n// 300x300 first.\n//\n// It's needed because tiler has issues when the entire tile is scaled down\n// to a few pixels (1024px source tile with border size 3 should result in\n// at least 3+3+2 = 8px target tile, so max scale factor is 128 here).\n//\n// Also, adding intermediate steps can speed up processing if we use lower\n// quality algorithms for first stages.\n//\n'use strict'; // min size = 0 results in infinite loop,\n// min size = 1 can consume large amount of memory\n\nvar MIN_INNER_TILE_SIZE = 2;\n\nmodule.exports = function createStages(fromWidth, fromHeight, toWidth, toHeight, srcTileSize, destTileBorder) {\n  var scaleX = toWidth / fromWidth;\n  var scaleY = toHeight / fromHeight; // derived from createRegions equation:\n  // innerTileWidth = pixelFloor(srcTileSize * scaleX) - 2 * destTileBorder;\n\n  var minScale = (2 * destTileBorder + MIN_INNER_TILE_SIZE + 1) / srcTileSize; // refuse to scale image multiple times by less than twice each time,\n  // it could only happen because of invalid options\n\n  if (minScale > 0.5) return [[toWidth, toHeight]];\n  var stageCount = Math.ceil(Math.log(Math.min(scaleX, scaleY)) / Math.log(minScale)); // no additional resizes are necessary,\n  // stageCount can be zero or be negative when enlarging the image\n\n  if (stageCount <= 1) return [[toWidth, toHeight]];\n  var result = [];\n\n  for (var i = 0; i < stageCount; i++) {\n    var width = Math.round(Math.pow(Math.pow(fromWidth, stageCount - i - 1) * Math.pow(toWidth, i + 1), 1 / stageCount));\n    var height = Math.round(Math.pow(Math.pow(fromHeight, stageCount - i - 1) * Math.pow(toHeight, i + 1), 1 / stageCount));\n    result.push([width, height]);\n  }\n\n  return result;\n};\n\n},{}],15:[function(_dereq_,module,exports){\n// Split original image into multiple 1024x1024 chunks to reduce memory usage\n// (images have to be unpacked into typed arrays for resizing) and allow\n// parallel processing of multiple tiles at a time.\n//\n'use strict';\n/*\n * pixelFloor and pixelCeil are modified versions of Math.floor and Math.ceil\n * functions which take into account floating point arithmetic errors.\n * Those errors can cause undesired increments/decrements of sizes and offsets:\n * Math.ceil(36 / (36 / 500)) = 501\n * pixelCeil(36 / (36 / 500)) = 500\n */\n\nvar PIXEL_EPSILON = 1e-5;\n\nfunction pixelFloor(x) {\n  var nearest = Math.round(x);\n\n  if (Math.abs(x - nearest) < PIXEL_EPSILON) {\n    return nearest;\n  }\n\n  return Math.floor(x);\n}\n\nfunction pixelCeil(x) {\n  var nearest = Math.round(x);\n\n  if (Math.abs(x - nearest) < PIXEL_EPSILON) {\n    return nearest;\n  }\n\n  return Math.ceil(x);\n}\n\nmodule.exports = function createRegions(options) {\n  var scaleX = options.toWidth / options.width;\n  var scaleY = options.toHeight / options.height;\n  var innerTileWidth = pixelFloor(options.srcTileSize * scaleX) - 2 * options.destTileBorder;\n  var innerTileHeight = pixelFloor(options.srcTileSize * scaleY) - 2 * options.destTileBorder; // prevent infinite loop, this should never happen\n\n  if (innerTileWidth < 1 || innerTileHeight < 1) {\n    throw new Error('Internal error in pica: target tile width/height is too small.');\n  }\n\n  var x, y;\n  var innerX, innerY, toTileWidth, toTileHeight;\n  var tiles = [];\n  var tile; // we go top-to-down instead of left-to-right to make image displayed from top to\n  // doesn in the browser\n\n  for (innerY = 0; innerY < options.toHeight; innerY += innerTileHeight) {\n    for (innerX = 0; innerX < options.toWidth; innerX += innerTileWidth) {\n      x = innerX - options.destTileBorder;\n\n      if (x < 0) {\n        x = 0;\n      }\n\n      toTileWidth = innerX + innerTileWidth + options.destTileBorder - x;\n\n      if (x + toTileWidth >= options.toWidth) {\n        toTileWidth = options.toWidth - x;\n      }\n\n      y = innerY - options.destTileBorder;\n\n      if (y < 0) {\n        y = 0;\n      }\n\n      toTileHeight = innerY + innerTileHeight + options.destTileBorder - y;\n\n      if (y + toTileHeight >= options.toHeight) {\n        toTileHeight = options.toHeight - y;\n      }\n\n      tile = {\n        toX: x,\n        toY: y,\n        toWidth: toTileWidth,\n        toHeight: toTileHeight,\n        toInnerX: innerX,\n        toInnerY: innerY,\n        toInnerWidth: innerTileWidth,\n        toInnerHeight: innerTileHeight,\n        offsetX: x / scaleX - pixelFloor(x / scaleX),\n        offsetY: y / scaleY - pixelFloor(y / scaleY),\n        scaleX: scaleX,\n        scaleY: scaleY,\n        x: pixelFloor(x / scaleX),\n        y: pixelFloor(y / scaleY),\n        width: pixelCeil(toTileWidth / scaleX),\n        height: pixelCeil(toTileHeight / scaleY)\n      };\n      tiles.push(tile);\n    }\n  }\n\n  return tiles;\n};\n\n},{}],16:[function(_dereq_,module,exports){\n'use strict';\n\nfunction objClass(obj) {\n  return Object.prototype.toString.call(obj);\n}\n\nmodule.exports.isCanvas = function isCanvas(element) {\n  var cname = objClass(element);\n  return cname === '[object HTMLCanvasElement]'\n  /* browser */\n  || cname === '[object OffscreenCanvas]' || cname === '[object Canvas]'\n  /* node-canvas */\n  ;\n};\n\nmodule.exports.isImage = function isImage(element) {\n  return objClass(element) === '[object HTMLImageElement]';\n};\n\nmodule.exports.isImageBitmap = function isImageBitmap(element) {\n  return objClass(element) === '[object ImageBitmap]';\n};\n\nmodule.exports.limiter = function limiter(concurrency) {\n  var active = 0,\n      queue = [];\n\n  function roll() {\n    if (active < concurrency && queue.length) {\n      active++;\n      queue.shift()();\n    }\n  }\n\n  return function limit(fn) {\n    return new Promise(function (resolve, reject) {\n      queue.push(function () {\n        fn().then(function (result) {\n          resolve(result);\n          active--;\n          roll();\n        }, function (err) {\n          reject(err);\n          active--;\n          roll();\n        });\n      });\n      roll();\n    });\n  };\n};\n\nmodule.exports.cib_quality_name = function cib_quality_name(num) {\n  switch (num) {\n    case 0:\n      return 'pixelated';\n\n    case 1:\n      return 'low';\n\n    case 2:\n      return 'medium';\n  }\n\n  return 'high';\n};\n\nmodule.exports.cib_support = function cib_support(createCanvas) {\n  return Promise.resolve().then(function () {\n    if (typeof createImageBitmap === 'undefined') {\n      return false;\n    }\n\n    var c = createCanvas(100, 100);\n    return createImageBitmap(c, 0, 0, 100, 100, {\n      resizeWidth: 10,\n      resizeHeight: 10,\n      resizeQuality: 'high'\n    }).then(function (bitmap) {\n      var status = bitmap.width === 10; // Branch below is filtered on upper level. We do not call resize\n      // detection for basic ImageBitmap.\n      //\n      // https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap\n      // old Crome 51 has ImageBitmap without .close(). Then this code\n      // will throw and return 'false' as expected.\n      //\n\n      bitmap.close();\n      c = null;\n      return status;\n    });\n  })[\"catch\"](function () {\n    return false;\n  });\n};\n\nmodule.exports.worker_offscreen_canvas_support = function worker_offscreen_canvas_support() {\n  return new Promise(function (resolve, reject) {\n    if (typeof OffscreenCanvas === 'undefined') {\n      // if OffscreenCanvas is present, we assume browser supports Worker and built-in Promise as well\n      resolve(false);\n      return;\n    }\n\n    function workerPayload(self) {\n      if (typeof createImageBitmap === 'undefined') {\n        self.postMessage(false);\n        return;\n      }\n\n      Promise.resolve().then(function () {\n        var canvas = new OffscreenCanvas(10, 10); // test that 2d context can be used in worker\n\n        var ctx = canvas.getContext('2d');\n        ctx.rect(0, 0, 1, 1); // test that cib can be used to return image bitmap from worker\n\n        return createImageBitmap(canvas, 0, 0, 1, 1);\n      }).then(function () {\n        return self.postMessage(true);\n      }, function () {\n        return self.postMessage(false);\n      });\n    }\n\n    var code = btoa(\"(\".concat(workerPayload.toString(), \")(self);\"));\n    var w = new Worker(\"data:text/javascript;base64,\".concat(code));\n\n    w.onmessage = function (ev) {\n      return resolve(ev.data);\n    };\n\n    w.onerror = reject;\n  }).then(function (result) {\n    return result;\n  }, function () {\n    return false;\n  });\n}; // Check if canvas.getContext('2d').getImageData can be used,\n// FireFox randomizes the output of that function in `privacy.resistFingerprinting` mode\n\n\nmodule.exports.can_use_canvas = function can_use_canvas(createCanvas) {\n  var usable = false;\n\n  try {\n    var canvas = createCanvas(2, 1);\n    var ctx = canvas.getContext('2d');\n    var d = ctx.createImageData(2, 1);\n    d.data[0] = 12;\n    d.data[1] = 23;\n    d.data[2] = 34;\n    d.data[3] = 255;\n    d.data[4] = 45;\n    d.data[5] = 56;\n    d.data[6] = 67;\n    d.data[7] = 255;\n    ctx.putImageData(d, 0, 0);\n    d = null;\n    d = ctx.getImageData(0, 0, 2, 1);\n\n    if (d.data[0] === 12 && d.data[1] === 23 && d.data[2] === 34 && d.data[3] === 255 && d.data[4] === 45 && d.data[5] === 56 && d.data[6] === 67 && d.data[7] === 255) {\n      usable = true;\n    }\n  } catch (err) {}\n\n  return usable;\n}; // Check if createImageBitmap(img, sx, sy, sw, sh) signature works correctly\n// with JPEG images oriented with Exif;\n// https://bugs.chromium.org/p/chromium/issues/detail?id=1220671\n// TODO: remove after it's fixed in chrome for at least 2 releases\n\n\nmodule.exports.cib_can_use_region = function cib_can_use_region() {\n  return new Promise(function (resolve) {\n    // `Image` check required for use in `ServiceWorker`\n    if (typeof Image === 'undefined' || typeof createImageBitmap === 'undefined') {\n      resolve(false);\n      return;\n    }\n\n    var image = new Image();\n    image.src = 'data:image/jpeg;base64,' + '/9j/4QBiRXhpZgAATU0AKgAAAAgABQESAAMAAAABAAYAAAEaAAUAAAABAAAASgEbAAUAA' + 'AABAAAAUgEoAAMAAAABAAIAAAITAAMAAAABAAEAAAAAAAAAAABIAAAAAQAAAEgAAAAB/9' + 'sAQwAEAwMEAwMEBAMEBQQEBQYKBwYGBgYNCQoICg8NEBAPDQ8OERMYFBESFxIODxUcFRc' + 'ZGRsbGxAUHR8dGh8YGhsa/9sAQwEEBQUGBQYMBwcMGhEPERoaGhoaGhoaGhoaGhoaGhoa' + 'GhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoa/8IAEQgAAQACAwERAAIRAQMRA' + 'f/EABQAAQAAAAAAAAAAAAAAAAAAAAf/xAAUAQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAA' + 'IQAxAAAAF/P//EABQQAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQEAAQUCf//EABQRAQAAAAA' + 'AAAAAAAAAAAAAAAD/2gAIAQMBAT8Bf//EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQIB' + 'AT8Bf//EABQQAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQEABj8Cf//EABQQAQAAAAAAAAAAA' + 'AAAAAAAAAD/2gAIAQEAAT8hf//aAAwDAQACAAMAAAAQH//EABQRAQAAAAAAAAAAAAAAAA' + 'AAAAD/2gAIAQMBAT8Qf//EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQIBAT8Qf//EABQ' + 'QAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQEAAT8Qf//Z';\n\n    image.onload = function () {\n      createImageBitmap(image, 0, 0, image.width, image.height).then(function (bitmap) {\n        if (bitmap.width === image.width && bitmap.height === image.height) {\n          resolve(true);\n        } else {\n          resolve(false);\n        }\n      }, function () {\n        return resolve(false);\n      });\n    };\n\n    image.onerror = function () {\n      return resolve(false);\n    };\n  });\n};\n\n},{}],17:[function(_dereq_,module,exports){\n// Web Worker wrapper for image resize function\n'use strict';\n\nmodule.exports = function () {\n  var MathLib = _dereq_('./mathlib');\n\n  var mathLib;\n  /* eslint-disable no-undef */\n\n  onmessage = function onmessage(ev) {\n    var tileOpts = ev.data.opts;\n    var returnBitmap = false;\n\n    if (!tileOpts.src && tileOpts.srcBitmap) {\n      var canvas = new OffscreenCanvas(tileOpts.width, tileOpts.height);\n      var ctx = canvas.getContext('2d');\n      ctx.drawImage(tileOpts.srcBitmap, 0, 0);\n      tileOpts.src = ctx.getImageData(0, 0, tileOpts.width, tileOpts.height).data;\n      canvas.width = canvas.height = 0;\n      canvas = null;\n      tileOpts.srcBitmap.close();\n      tileOpts.srcBitmap = null; // Temporary force out data to typed array, because Chrome have artefacts\n      // https://github.com/nodeca/pica/issues/223\n      // returnBitmap = true;\n    }\n\n    if (!mathLib) mathLib = new MathLib(ev.data.features); // Use multimath's sync auto-init. Avoid Promise use in old browsers,\n    // because polyfills are not propagated to webworker.\n\n    var data = mathLib.resizeAndUnsharp(tileOpts);\n\n    if (returnBitmap) {\n      var toImageData = new ImageData(new Uint8ClampedArray(data), tileOpts.toWidth, tileOpts.toHeight);\n\n      var _canvas = new OffscreenCanvas(tileOpts.toWidth, tileOpts.toHeight);\n\n      var _ctx = _canvas.getContext('2d');\n\n      _ctx.putImageData(toImageData, 0, 0);\n\n      createImageBitmap(_canvas).then(function (bitmap) {\n        postMessage({\n          bitmap: bitmap\n        }, [bitmap]);\n      });\n    } else {\n      postMessage({\n        data: data\n      }, [data.buffer]);\n    }\n  };\n};\n\n},{\"./mathlib\":1}],18:[function(_dereq_,module,exports){\n// Calculate Gaussian blur of an image using IIR filter\n// The method is taken from Intel's white paper and code example attached to it:\n// https://software.intel.com/en-us/articles/iir-gaussian-blur-filter\n// -implementation-using-intel-advanced-vector-extensions\n\nvar a0, a1, a2, a3, b1, b2, left_corner, right_corner;\n\nfunction gaussCoef(sigma) {\n  if (sigma < 0.5) {\n    sigma = 0.5;\n  }\n\n  var a = Math.exp(0.726 * 0.726) / sigma,\n      g1 = Math.exp(-a),\n      g2 = Math.exp(-2 * a),\n      k = (1 - g1) * (1 - g1) / (1 + 2 * a * g1 - g2);\n\n  a0 = k;\n  a1 = k * (a - 1) * g1;\n  a2 = k * (a + 1) * g1;\n  a3 = -k * g2;\n  b1 = 2 * g1;\n  b2 = -g2;\n  left_corner = (a0 + a1) / (1 - b1 - b2);\n  right_corner = (a2 + a3) / (1 - b1 - b2);\n\n  // Attempt to force type to FP32.\n  return new Float32Array([ a0, a1, a2, a3, b1, b2, left_corner, right_corner ]);\n}\n\nfunction convolveMono16(src, out, line, coeff, width, height) {\n  // takes src image and writes the blurred and transposed result into out\n\n  var prev_src, curr_src, curr_out, prev_out, prev_prev_out;\n  var src_index, out_index, line_index;\n  var i, j;\n  var coeff_a0, coeff_a1, coeff_b1, coeff_b2;\n\n  for (i = 0; i < height; i++) {\n    src_index = i * width;\n    out_index = i;\n    line_index = 0;\n\n    // left to right\n    prev_src = src[src_index];\n    prev_prev_out = prev_src * coeff[6];\n    prev_out = prev_prev_out;\n\n    coeff_a0 = coeff[0];\n    coeff_a1 = coeff[1];\n    coeff_b1 = coeff[4];\n    coeff_b2 = coeff[5];\n\n    for (j = 0; j < width; j++) {\n      curr_src = src[src_index];\n\n      curr_out = curr_src * coeff_a0 +\n                 prev_src * coeff_a1 +\n                 prev_out * coeff_b1 +\n                 prev_prev_out * coeff_b2;\n\n      prev_prev_out = prev_out;\n      prev_out = curr_out;\n      prev_src = curr_src;\n\n      line[line_index] = prev_out;\n      line_index++;\n      src_index++;\n    }\n\n    src_index--;\n    line_index--;\n    out_index += height * (width - 1);\n\n    // right to left\n    prev_src = src[src_index];\n    prev_prev_out = prev_src * coeff[7];\n    prev_out = prev_prev_out;\n    curr_src = prev_src;\n\n    coeff_a0 = coeff[2];\n    coeff_a1 = coeff[3];\n\n    for (j = width - 1; j >= 0; j--) {\n      curr_out = curr_src * coeff_a0 +\n                 prev_src * coeff_a1 +\n                 prev_out * coeff_b1 +\n                 prev_prev_out * coeff_b2;\n\n      prev_prev_out = prev_out;\n      prev_out = curr_out;\n\n      prev_src = curr_src;\n      curr_src = src[src_index];\n\n      out[out_index] = line[line_index] + prev_out;\n\n      src_index--;\n      line_index--;\n      out_index -= height;\n    }\n  }\n}\n\n\nfunction blurMono16(src, width, height, radius) {\n  // Quick exit on zero radius\n  if (!radius) { return; }\n\n  var out      = new Uint16Array(src.length),\n      tmp_line = new Float32Array(Math.max(width, height));\n\n  var coeff = gaussCoef(radius);\n\n  convolveMono16(src, out, tmp_line, coeff, width, height, radius);\n  convolveMono16(out, src, tmp_line, coeff, height, width, radius);\n}\n\nmodule.exports = blurMono16;\n\n},{}],19:[function(_dereq_,module,exports){\n'use strict';\n\n\nvar assign         = _dereq_('object-assign');\nvar base64decode   = _dereq_('./lib/base64decode');\nvar hasWebAssembly = _dereq_('./lib/wa_detect');\n\n\nvar DEFAULT_OPTIONS = {\n  js: true,\n  wasm: true\n};\n\n\nfunction MultiMath(options) {\n  if (!(this instanceof MultiMath)) return new MultiMath(options);\n\n  var opts = assign({}, DEFAULT_OPTIONS, options || {});\n\n  this.options         = opts;\n\n  this.__cache         = {};\n\n  this.__init_promise  = null;\n  this.__modules       = opts.modules || {};\n  this.__memory        = null;\n  this.__wasm          = {};\n\n  this.__isLE = ((new Uint32Array((new Uint8Array([ 1, 0, 0, 0 ])).buffer))[0] === 1);\n\n  if (!this.options.js && !this.options.wasm) {\n    throw new Error('mathlib: at least \"js\" or \"wasm\" should be enabled');\n  }\n}\n\n\nMultiMath.prototype.has_wasm = hasWebAssembly;\n\n\nMultiMath.prototype.use = function (module) {\n  this.__modules[module.name] = module;\n\n  // Pin the best possible implementation\n  if (this.options.wasm && this.has_wasm() && module.wasm_fn) {\n    this[module.name] = module.wasm_fn;\n  } else {\n    this[module.name] = module.fn;\n  }\n\n  return this;\n};\n\n\nMultiMath.prototype.init = function () {\n  if (this.__init_promise) return this.__init_promise;\n\n  if (!this.options.js && this.options.wasm && !this.has_wasm()) {\n    return Promise.reject(new Error('mathlib: only \"wasm\" was enabled, but it\\'s not supported'));\n  }\n\n  var self = this;\n\n  this.__init_promise = Promise.all(Object.keys(self.__modules).map(function (name) {\n    var module = self.__modules[name];\n\n    if (!self.options.wasm || !self.has_wasm() || !module.wasm_fn) return null;\n\n    // If already compiled - exit\n    if (self.__wasm[name]) return null;\n\n    // Compile wasm source\n    return WebAssembly.compile(self.__base64decode(module.wasm_src))\n      .then(function (m) { self.__wasm[name] = m; });\n  }))\n    .then(function () { return self; });\n\n  return this.__init_promise;\n};\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Methods below are for internal use from plugins\n\n\n// Simple decode base64 to typed array. Useful to load embedded webassembly\n// code. You probably don't need to call this method directly.\n//\nMultiMath.prototype.__base64decode = base64decode;\n\n\n// Increase current memory to include specified number of bytes. Do nothing if\n// size is already ok. You probably don't need to call this method directly,\n// because it will be invoked from `.__instance()`.\n//\nMultiMath.prototype.__reallocate = function mem_grow_to(bytes) {\n  if (!this.__memory) {\n    this.__memory = new WebAssembly.Memory({\n      initial: Math.ceil(bytes / (64 * 1024))\n    });\n    return this.__memory;\n  }\n\n  var mem_size = this.__memory.buffer.byteLength;\n\n  if (mem_size < bytes) {\n    this.__memory.grow(Math.ceil((bytes - mem_size) / (64 * 1024)));\n  }\n\n  return this.__memory;\n};\n\n\n// Returns instantinated webassembly item by name, with specified memory size\n// and environment.\n// - use cache if available\n// - do sync module init, if async init was not called earlier\n// - allocate memory if not enougth\n// - can export functions to webassembly via \"env_extra\",\n//   for example, { exp: Math.exp }\n//\nMultiMath.prototype.__instance = function instance(name, memsize, env_extra) {\n  if (memsize) this.__reallocate(memsize);\n\n  // If .init() was not called, do sync compile\n  if (!this.__wasm[name]) {\n    var module = this.__modules[name];\n    this.__wasm[name] = new WebAssembly.Module(this.__base64decode(module.wasm_src));\n  }\n\n  if (!this.__cache[name]) {\n    var env_base = {\n      memoryBase: 0,\n      memory: this.__memory,\n      tableBase: 0,\n      table: new WebAssembly.Table({ initial: 0, element: 'anyfunc' })\n    };\n\n    this.__cache[name] = new WebAssembly.Instance(this.__wasm[name], {\n      env: assign(env_base, env_extra || {})\n    });\n  }\n\n  return this.__cache[name];\n};\n\n\n// Helper to calculate memory aligh for pointers. Webassembly does not require\n// this, but you may wish to experiment. Default base = 8;\n//\nMultiMath.prototype.__align = function align(number, base) {\n  base = base || 8;\n  var reminder = number % base;\n  return number + (reminder ? base - reminder : 0);\n};\n\n\nmodule.exports = MultiMath;\n\n},{\"./lib/base64decode\":20,\"./lib/wa_detect\":21,\"object-assign\":22}],20:[function(_dereq_,module,exports){\n// base64 decode str -> Uint8Array, to load WA modules\n//\n'use strict';\n\n\nvar BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n\nmodule.exports = function base64decode(str) {\n  var input = str.replace(/[\\r\\n=]/g, ''), // remove CR/LF & padding to simplify scan\n      max   = input.length;\n\n  var out = new Uint8Array((max * 3) >> 2);\n\n  // Collect by 6*4 bits (3 bytes)\n\n  var bits = 0;\n  var ptr  = 0;\n\n  for (var idx = 0; idx < max; idx++) {\n    if ((idx % 4 === 0) && idx) {\n      out[ptr++] = (bits >> 16) & 0xFF;\n      out[ptr++] = (bits >> 8) & 0xFF;\n      out[ptr++] = bits & 0xFF;\n    }\n\n    bits = (bits << 6) | BASE64_MAP.indexOf(input.charAt(idx));\n  }\n\n  // Dump tail\n\n  var tailbits = (max % 4) * 6;\n\n  if (tailbits === 0) {\n    out[ptr++] = (bits >> 16) & 0xFF;\n    out[ptr++] = (bits >> 8) & 0xFF;\n    out[ptr++] = bits & 0xFF;\n  } else if (tailbits === 18) {\n    out[ptr++] = (bits >> 10) & 0xFF;\n    out[ptr++] = (bits >> 2) & 0xFF;\n  } else if (tailbits === 12) {\n    out[ptr++] = (bits >> 4) & 0xFF;\n  }\n\n  return out;\n};\n\n},{}],21:[function(_dereq_,module,exports){\n// Detect WebAssembly support.\n// - Check global WebAssembly object\n// - Try to load simple module (can be disabled via CSP)\n//\n'use strict';\n\n\nvar wa;\n\n\nmodule.exports = function hasWebAssembly() {\n  // use cache if called before;\n  if (typeof wa !== 'undefined') return wa;\n\n  wa = false;\n\n  if (typeof WebAssembly === 'undefined') return wa;\n\n  // If WebAssenbly is disabled, code can throw on compile\n  try {\n    // https://github.com/brion/min-wasm-fail/blob/master/min-wasm-fail.in.js\n    // Additional check that WA internals are correct\n\n    /* eslint-disable comma-spacing, max-len */\n    var bin      = new Uint8Array([ 0,97,115,109,1,0,0,0,1,6,1,96,1,127,1,127,3,2,1,0,5,3,1,0,1,7,8,1,4,116,101,115,116,0,0,10,16,1,14,0,32,0,65,1,54,2,0,32,0,40,2,0,11 ]);\n    var module   = new WebAssembly.Module(bin);\n    var instance = new WebAssembly.Instance(module, {});\n\n    // test storing to and loading from a non-zero location via a parameter.\n    // Safari on iOS 11.2.5 returns 0 unexpectedly at non-zero locations\n    if (instance.exports.test(4) !== 0) wa = true;\n\n    return wa;\n  } catch (__) {}\n\n  return wa;\n};\n\n},{}],22:[function(_dereq_,module,exports){\n/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n\n},{}],23:[function(_dereq_,module,exports){\nvar bundleFn = arguments[3];\nvar sources = arguments[4];\nvar cache = arguments[5];\n\nvar stringify = JSON.stringify;\n\nmodule.exports = function (fn, options) {\n    var wkey;\n    var cacheKeys = Object.keys(cache);\n\n    for (var i = 0, l = cacheKeys.length; i < l; i++) {\n        var key = cacheKeys[i];\n        var exp = cache[key].exports;\n        // Using babel as a transpiler to use esmodule, the export will always\n        // be an object with the default export as a property of it. To ensure\n        // the existing api and babel esmodule exports are both supported we\n        // check for both\n        if (exp === fn || exp && exp.default === fn) {\n            wkey = key;\n            break;\n        }\n    }\n\n    if (!wkey) {\n        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n        var wcache = {};\n        for (var i = 0, l = cacheKeys.length; i < l; i++) {\n            var key = cacheKeys[i];\n            wcache[key] = key;\n        }\n        sources[wkey] = [\n            'function(require,module,exports){' + fn + '(self); }',\n            wcache\n        ];\n    }\n    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n\n    var scache = {}; scache[wkey] = wkey;\n    sources[skey] = [\n        'function(require,module,exports){' +\n            // try to call default if defined to also support babel esmodule exports\n            'var f = require(' + stringify(wkey) + ');' +\n            '(f.default ? f.default : f)(self);' +\n        '}',\n        scache\n    ];\n\n    var workerSources = {};\n    resolveSources(skey);\n\n    function resolveSources(key) {\n        workerSources[key] = true;\n\n        for (var depPath in sources[key][1]) {\n            var depKey = sources[key][1][depPath];\n            if (!workerSources[depKey]) {\n                resolveSources(depKey);\n            }\n        }\n    }\n\n    var src = '(' + bundleFn + ')({'\n        + Object.keys(workerSources).map(function (key) {\n            return stringify(key) + ':['\n                + sources[key][0]\n                + ',' + stringify(sources[key][1]) + ']'\n            ;\n        }).join(',')\n        + '},{},[' + stringify(skey) + '])'\n    ;\n\n    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\n\n    var blob = new Blob([src], { type: 'text/javascript' });\n    if (options && options.bare) { return blob; }\n    var workerUrl = URL.createObjectURL(blob);\n    var worker = new Worker(workerUrl);\n    worker.objectURL = workerUrl;\n    return worker;\n};\n\n},{}],\"/index.js\":[function(_dereq_,module,exports){\n'use strict';\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar assign = _dereq_('object-assign');\n\nvar webworkify = _dereq_('webworkify');\n\nvar MathLib = _dereq_('./lib/mathlib');\n\nvar Pool = _dereq_('./lib/pool');\n\nvar utils = _dereq_('./lib/utils');\n\nvar worker = _dereq_('./lib/worker');\n\nvar createStages = _dereq_('./lib/stepper');\n\nvar createRegions = _dereq_('./lib/tiler');\n\nvar filter_info = _dereq_('./lib/mm_resize/resize_filter_info'); // Deduplicate pools & limiters with the same configs\n// when user creates multiple pica instances.\n\n\nvar singletones = {};\nvar NEED_SAFARI_FIX = false;\n\ntry {\n  if (typeof navigator !== 'undefined' && navigator.userAgent) {\n    NEED_SAFARI_FIX = navigator.userAgent.indexOf('Safari') >= 0;\n  }\n} catch (e) {}\n\nvar concurrency = 1;\n\nif (typeof navigator !== 'undefined') {\n  concurrency = Math.min(navigator.hardwareConcurrency || 1, 4);\n}\n\nvar DEFAULT_PICA_OPTS = {\n  tile: 1024,\n  concurrency: concurrency,\n  features: ['js', 'wasm', 'ww'],\n  idle: 2000,\n  createCanvas: function createCanvas(width, height) {\n    var tmpCanvas = document.createElement('canvas');\n    tmpCanvas.width = width;\n    tmpCanvas.height = height;\n    return tmpCanvas;\n  }\n};\nvar DEFAULT_RESIZE_OPTS = {\n  filter: 'mks2013',\n  unsharpAmount: 0,\n  unsharpRadius: 0.0,\n  unsharpThreshold: 0\n};\nvar CAN_NEW_IMAGE_DATA = false;\nvar CAN_CREATE_IMAGE_BITMAP = false;\nvar CAN_USE_CANVAS_GET_IMAGE_DATA = false;\nvar CAN_USE_OFFSCREEN_CANVAS = false;\nvar CAN_USE_CIB_REGION_FOR_IMAGE = false;\n\nfunction workerFabric() {\n  return {\n    value: webworkify(worker),\n    destroy: function destroy() {\n      this.value.terminate();\n\n      if (typeof window !== 'undefined') {\n        var url = window.URL || window.webkitURL || window.mozURL || window.msURL;\n\n        if (url && url.revokeObjectURL && this.value.objectURL) {\n          url.revokeObjectURL(this.value.objectURL);\n        }\n      }\n    }\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n// API methods\n\n\nfunction Pica(options) {\n  if (!(this instanceof Pica)) return new Pica(options);\n  this.options = assign({}, DEFAULT_PICA_OPTS, options || {});\n  var limiter_key = \"lk_\".concat(this.options.concurrency); // Share limiters to avoid multiple parallel workers when user creates\n  // multiple pica instances.\n\n  this.__limit = singletones[limiter_key] || utils.limiter(this.options.concurrency);\n  if (!singletones[limiter_key]) singletones[limiter_key] = this.__limit; // List of supported features, according to options & browser/node.js\n\n  this.features = {\n    js: false,\n    // pure JS implementation, can be disabled for testing\n    wasm: false,\n    // webassembly implementation for heavy functions\n    cib: false,\n    // resize via createImageBitmap (only FF at this moment)\n    ww: false // webworkers\n\n  };\n  this.__workersPool = null; // Store requested features for webworkers\n\n  this.__requested_features = [];\n  this.__mathlib = null;\n}\n\nPica.prototype.init = function () {\n  var _this = this;\n\n  if (this.__initPromise) return this.__initPromise; // Test if we can create ImageData without canvas and memory copy\n\n  if (typeof ImageData !== 'undefined' && typeof Uint8ClampedArray !== 'undefined') {\n    try {\n      /* eslint-disable no-new */\n      new ImageData(new Uint8ClampedArray(400), 10, 10);\n      CAN_NEW_IMAGE_DATA = true;\n    } catch (__) {}\n  } // ImageBitmap can be effective in 2 places:\n  //\n  // 1. Threaded jpeg unpack (basic)\n  // 2. Built-in resize (blocked due problem in chrome, see issue #89)\n  //\n  // For basic use we also need ImageBitmap wo support .close() method,\n  // see https://developer.mozilla.org/ru/docs/Web/API/ImageBitmap\n\n\n  if (typeof ImageBitmap !== 'undefined') {\n    if (ImageBitmap.prototype && ImageBitmap.prototype.close) {\n      CAN_CREATE_IMAGE_BITMAP = true;\n    } else {\n      this.debug('ImageBitmap does not support .close(), disabled');\n    }\n  }\n\n  var features = this.options.features.slice();\n\n  if (features.indexOf('all') >= 0) {\n    features = ['cib', 'wasm', 'js', 'ww'];\n  }\n\n  this.__requested_features = features;\n  this.__mathlib = new MathLib(features); // Check WebWorker support if requested\n\n  if (features.indexOf('ww') >= 0) {\n    if (typeof window !== 'undefined' && 'Worker' in window) {\n      // IE <= 11 don't allow to create webworkers from string. We should check it.\n      // https://connect.microsoft.com/IE/feedback/details/801810/web-workers-from-blob-urls-in-ie-10-and-11\n      try {\n        var wkr = _dereq_('webworkify')(function () {});\n\n        wkr.terminate();\n        this.features.ww = true; // pool uniqueness depends on pool config + webworker config\n\n        var wpool_key = \"wp_\".concat(JSON.stringify(this.options));\n\n        if (singletones[wpool_key]) {\n          this.__workersPool = singletones[wpool_key];\n        } else {\n          this.__workersPool = new Pool(workerFabric, this.options.idle);\n          singletones[wpool_key] = this.__workersPool;\n        }\n      } catch (__) {}\n    }\n  }\n\n  var initMath = this.__mathlib.init().then(function (mathlib) {\n    // Copy detected features\n    assign(_this.features, mathlib.features);\n  });\n\n  var checkCibResize;\n\n  if (!CAN_CREATE_IMAGE_BITMAP) {\n    checkCibResize = Promise.resolve(false);\n  } else {\n    checkCibResize = utils.cib_support(this.options.createCanvas).then(function (status) {\n      if (_this.features.cib && features.indexOf('cib') < 0) {\n        _this.debug('createImageBitmap() resize supported, but disabled by config');\n\n        return;\n      }\n\n      if (features.indexOf('cib') >= 0) _this.features.cib = status;\n    });\n  }\n\n  CAN_USE_CANVAS_GET_IMAGE_DATA = utils.can_use_canvas(this.options.createCanvas);\n  var checkOffscreenCanvas;\n\n  if (CAN_CREATE_IMAGE_BITMAP && CAN_NEW_IMAGE_DATA && features.indexOf('ww') !== -1) {\n    checkOffscreenCanvas = utils.worker_offscreen_canvas_support();\n  } else {\n    checkOffscreenCanvas = Promise.resolve(false);\n  }\n\n  checkOffscreenCanvas = checkOffscreenCanvas.then(function (result) {\n    CAN_USE_OFFSCREEN_CANVAS = result;\n  }); // we use createImageBitmap to crop image data and pass it to workers,\n  // so need to check whether function works correctly;\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=1220671\n\n  var checkCibRegion = utils.cib_can_use_region().then(function (result) {\n    CAN_USE_CIB_REGION_FOR_IMAGE = result;\n  }); // Init math lib. That's async because can load some\n\n  this.__initPromise = Promise.all([initMath, checkCibResize, checkOffscreenCanvas, checkCibRegion]).then(function () {\n    return _this;\n  });\n  return this.__initPromise;\n}; // Call resizer in webworker or locally, depending on config\n\n\nPica.prototype.__invokeResize = function (tileOpts, opts) {\n  var _this2 = this;\n\n  // Share cache between calls:\n  //\n  // - wasm instance\n  // - wasm memory object\n  //\n  opts.__mathCache = opts.__mathCache || {};\n  return Promise.resolve().then(function () {\n    if (!_this2.features.ww) {\n      // not possible to have ImageBitmap here if user disabled WW\n      return {\n        data: _this2.__mathlib.resizeAndUnsharp(tileOpts, opts.__mathCache)\n      };\n    }\n\n    return new Promise(function (resolve, reject) {\n      var w = _this2.__workersPool.acquire();\n\n      if (opts.cancelToken) opts.cancelToken[\"catch\"](function (err) {\n        return reject(err);\n      });\n\n      w.value.onmessage = function (ev) {\n        w.release();\n        if (ev.data.err) reject(ev.data.err);else resolve(ev.data);\n      };\n\n      var transfer = [];\n      if (tileOpts.src) transfer.push(tileOpts.src.buffer);\n      if (tileOpts.srcBitmap) transfer.push(tileOpts.srcBitmap);\n      w.value.postMessage({\n        opts: tileOpts,\n        features: _this2.__requested_features,\n        preload: {\n          wasm_nodule: _this2.__mathlib.__\n        }\n      }, transfer);\n    });\n  });\n}; // this function can return promise if createImageBitmap is used\n\n\nPica.prototype.__extractTileData = function (tile, from, opts, stageEnv, extractTo) {\n  if (this.features.ww && CAN_USE_OFFSCREEN_CANVAS && ( // createImageBitmap doesn't work for images (Image, ImageBitmap) with Exif orientation in Chrome,\n  // can use canvas because canvas doesn't have orientation;\n  // see https://bugs.chromium.org/p/chromium/issues/detail?id=1220671\n  utils.isCanvas(from) || CAN_USE_CIB_REGION_FOR_IMAGE)) {\n    this.debug('Create tile for OffscreenCanvas');\n    return createImageBitmap(stageEnv.srcImageBitmap || from, tile.x, tile.y, tile.width, tile.height).then(function (bitmap) {\n      extractTo.srcBitmap = bitmap;\n      return extractTo;\n    });\n  } // Extract tile RGBA buffer, depending on input type\n\n\n  if (utils.isCanvas(from)) {\n    if (!stageEnv.srcCtx) stageEnv.srcCtx = from.getContext('2d'); // If input is Canvas - extract region data directly\n\n    this.debug('Get tile pixel data');\n    extractTo.src = stageEnv.srcCtx.getImageData(tile.x, tile.y, tile.width, tile.height).data;\n    return extractTo;\n  } // If input is Image or decoded to ImageBitmap,\n  // draw region to temporary canvas and extract data from it\n  //\n  // Note! Attempt to reuse this canvas causes significant slowdown in chrome\n  //\n\n\n  this.debug('Draw tile imageBitmap/image to temporary canvas');\n  var tmpCanvas = this.options.createCanvas(tile.width, tile.height);\n  var tmpCtx = tmpCanvas.getContext('2d');\n  tmpCtx.globalCompositeOperation = 'copy';\n  tmpCtx.drawImage(stageEnv.srcImageBitmap || from, tile.x, tile.y, tile.width, tile.height, 0, 0, tile.width, tile.height);\n  this.debug('Get tile pixel data');\n  extractTo.src = tmpCtx.getImageData(0, 0, tile.width, tile.height).data; // Safari 12 workaround\n  // https://github.com/nodeca/pica/issues/199\n\n  tmpCanvas.width = tmpCanvas.height = 0;\n  return extractTo;\n};\n\nPica.prototype.__landTileData = function (tile, result, stageEnv) {\n  var toImageData;\n  this.debug('Convert raw rgba tile result to ImageData');\n\n  if (result.bitmap) {\n    stageEnv.toCtx.drawImage(result.bitmap, tile.toX, tile.toY);\n    return null;\n  }\n\n  if (CAN_NEW_IMAGE_DATA) {\n    // this branch is for modern browsers\n    // If `new ImageData()` & Uint8ClampedArray suported\n    toImageData = new ImageData(new Uint8ClampedArray(result.data), tile.toWidth, tile.toHeight);\n  } else {\n    // fallback for `node-canvas` and old browsers\n    // (IE11 has ImageData but does not support `new ImageData()`)\n    toImageData = stageEnv.toCtx.createImageData(tile.toWidth, tile.toHeight);\n\n    if (toImageData.data.set) {\n      toImageData.data.set(result.data);\n    } else {\n      // IE9 don't have `.set()`\n      for (var i = toImageData.data.length - 1; i >= 0; i--) {\n        toImageData.data[i] = result.data[i];\n      }\n    }\n  }\n\n  this.debug('Draw tile');\n\n  if (NEED_SAFARI_FIX) {\n    // Safari draws thin white stripes between tiles without this fix\n    stageEnv.toCtx.putImageData(toImageData, tile.toX, tile.toY, tile.toInnerX - tile.toX, tile.toInnerY - tile.toY, tile.toInnerWidth + 1e-5, tile.toInnerHeight + 1e-5);\n  } else {\n    stageEnv.toCtx.putImageData(toImageData, tile.toX, tile.toY, tile.toInnerX - tile.toX, tile.toInnerY - tile.toY, tile.toInnerWidth, tile.toInnerHeight);\n  }\n\n  return null;\n};\n\nPica.prototype.__tileAndResize = function (from, to, opts) {\n  var _this3 = this;\n\n  var stageEnv = {\n    srcCtx: null,\n    srcImageBitmap: null,\n    isImageBitmapReused: false,\n    toCtx: null\n  };\n\n  var processTile = function processTile(tile) {\n    return _this3.__limit(function () {\n      if (opts.canceled) return opts.cancelToken;\n      var tileOpts = {\n        width: tile.width,\n        height: tile.height,\n        toWidth: tile.toWidth,\n        toHeight: tile.toHeight,\n        scaleX: tile.scaleX,\n        scaleY: tile.scaleY,\n        offsetX: tile.offsetX,\n        offsetY: tile.offsetY,\n        filter: opts.filter,\n        unsharpAmount: opts.unsharpAmount,\n        unsharpRadius: opts.unsharpRadius,\n        unsharpThreshold: opts.unsharpThreshold\n      };\n\n      _this3.debug('Invoke resize math');\n\n      return Promise.resolve(tileOpts).then(function (tileOpts) {\n        return _this3.__extractTileData(tile, from, opts, stageEnv, tileOpts);\n      }).then(function (tileOpts) {\n        _this3.debug('Invoke resize math');\n\n        return _this3.__invokeResize(tileOpts, opts);\n      }).then(function (result) {\n        if (opts.canceled) return opts.cancelToken;\n        stageEnv.srcImageData = null;\n        return _this3.__landTileData(tile, result, stageEnv);\n      });\n    });\n  }; // Need to normalize data source first. It can be canvas or image.\n  // If image - try to decode in background if possible\n\n\n  return Promise.resolve().then(function () {\n    stageEnv.toCtx = to.getContext('2d');\n    if (utils.isCanvas(from)) return null;\n\n    if (utils.isImageBitmap(from)) {\n      stageEnv.srcImageBitmap = from;\n      stageEnv.isImageBitmapReused = true;\n      return null;\n    }\n\n    if (utils.isImage(from)) {\n      // try do decode image in background for faster next operations;\n      // if we're using offscreen canvas, cib is called per tile, so not needed here\n      if (!CAN_CREATE_IMAGE_BITMAP) return null;\n\n      _this3.debug('Decode image via createImageBitmap');\n\n      return createImageBitmap(from).then(function (imageBitmap) {\n        stageEnv.srcImageBitmap = imageBitmap;\n      }) // Suppress error to use fallback, if method fails\n      // https://github.com/nodeca/pica/issues/190\n\n      /* eslint-disable no-unused-vars */\n      [\"catch\"](function (e) {\n        return null;\n      });\n    }\n\n    throw new Error('Pica: \".from\" should be Image, Canvas or ImageBitmap');\n  }).then(function () {\n    if (opts.canceled) return opts.cancelToken;\n\n    _this3.debug('Calculate tiles'); //\n    // Here we are with \"normalized\" source,\n    // follow to tiling\n    //\n\n\n    var regions = createRegions({\n      width: opts.width,\n      height: opts.height,\n      srcTileSize: _this3.options.tile,\n      toWidth: opts.toWidth,\n      toHeight: opts.toHeight,\n      destTileBorder: opts.__destTileBorder\n    });\n    var jobs = regions.map(function (tile) {\n      return processTile(tile);\n    });\n\n    function cleanup(stageEnv) {\n      if (stageEnv.srcImageBitmap) {\n        if (!stageEnv.isImageBitmapReused) stageEnv.srcImageBitmap.close();\n        stageEnv.srcImageBitmap = null;\n      }\n    }\n\n    _this3.debug('Process tiles');\n\n    return Promise.all(jobs).then(function () {\n      _this3.debug('Finished!');\n\n      cleanup(stageEnv);\n      return to;\n    }, function (err) {\n      cleanup(stageEnv);\n      throw err;\n    });\n  });\n};\n\nPica.prototype.__processStages = function (stages, from, to, opts) {\n  var _this4 = this;\n\n  if (opts.canceled) return opts.cancelToken;\n\n  var _stages$shift = stages.shift(),\n      _stages$shift2 = _slicedToArray(_stages$shift, 2),\n      toWidth = _stages$shift2[0],\n      toHeight = _stages$shift2[1];\n\n  var isLastStage = stages.length === 0; // Optimization for legacy filters -\n  // only use user-defined quality for the last stage,\n  // use simpler (Hamming) filter for the first stages where\n  // scale factor is large enough (more than 2-3)\n  //\n  // For advanced filters (mks2013 and custom) - skip optimization,\n  // because need to apply sharpening every time\n\n  var filter;\n  if (isLastStage || filter_info.q2f.indexOf(opts.filter) < 0) filter = opts.filter;else if (opts.filter === 'box') filter = 'box';else filter = 'hamming';\n  opts = assign({}, opts, {\n    toWidth: toWidth,\n    toHeight: toHeight,\n    filter: filter\n  });\n  var tmpCanvas;\n\n  if (!isLastStage) {\n    // create temporary canvas\n    tmpCanvas = this.options.createCanvas(toWidth, toHeight);\n  }\n\n  return this.__tileAndResize(from, isLastStage ? to : tmpCanvas, opts).then(function () {\n    if (isLastStage) return to;\n    opts.width = toWidth;\n    opts.height = toHeight;\n    return _this4.__processStages(stages, tmpCanvas, to, opts);\n  }).then(function (res) {\n    if (tmpCanvas) {\n      // Safari 12 workaround\n      // https://github.com/nodeca/pica/issues/199\n      tmpCanvas.width = tmpCanvas.height = 0;\n    }\n\n    return res;\n  });\n};\n\nPica.prototype.__resizeViaCreateImageBitmap = function (from, to, opts) {\n  var _this5 = this;\n\n  var toCtx = to.getContext('2d');\n  this.debug('Resize via createImageBitmap()');\n  return createImageBitmap(from, {\n    resizeWidth: opts.toWidth,\n    resizeHeight: opts.toHeight,\n    resizeQuality: utils.cib_quality_name(filter_info.f2q[opts.filter])\n  }).then(function (imageBitmap) {\n    if (opts.canceled) return opts.cancelToken; // if no unsharp - draw directly to output canvas\n\n    if (!opts.unsharpAmount) {\n      toCtx.drawImage(imageBitmap, 0, 0);\n      imageBitmap.close();\n      toCtx = null;\n\n      _this5.debug('Finished!');\n\n      return to;\n    }\n\n    _this5.debug('Unsharp result');\n\n    var tmpCanvas = _this5.options.createCanvas(opts.toWidth, opts.toHeight);\n\n    var tmpCtx = tmpCanvas.getContext('2d');\n    tmpCtx.drawImage(imageBitmap, 0, 0);\n    imageBitmap.close();\n    var iData = tmpCtx.getImageData(0, 0, opts.toWidth, opts.toHeight);\n\n    _this5.__mathlib.unsharp_mask(iData.data, opts.toWidth, opts.toHeight, opts.unsharpAmount, opts.unsharpRadius, opts.unsharpThreshold);\n\n    toCtx.putImageData(iData, 0, 0); // Safari 12 workaround\n    // https://github.com/nodeca/pica/issues/199\n\n    tmpCanvas.width = tmpCanvas.height = 0;\n    iData = tmpCtx = tmpCanvas = toCtx = null;\n\n    _this5.debug('Finished!');\n\n    return to;\n  });\n};\n\nPica.prototype.resize = function (from, to, options) {\n  var _this6 = this;\n\n  this.debug('Start resize...');\n  var opts = assign({}, DEFAULT_RESIZE_OPTS);\n\n  if (!isNaN(options)) {\n    opts = assign(opts, {\n      quality: options\n    });\n  } else if (options) {\n    opts = assign(opts, options);\n  }\n\n  opts.toWidth = to.width;\n  opts.toHeight = to.height;\n  opts.width = from.naturalWidth || from.width;\n  opts.height = from.naturalHeight || from.height; // Legacy `.quality` option\n\n  if (Object.prototype.hasOwnProperty.call(opts, 'quality')) {\n    if (opts.quality < 0 || opts.quality > 3) {\n      throw new Error(\"Pica: .quality should be [0..3], got \".concat(opts.quality));\n    }\n\n    opts.filter = filter_info.q2f[opts.quality];\n  } // Prevent stepper from infinite loop\n\n\n  if (to.width === 0 || to.height === 0) {\n    return Promise.reject(new Error(\"Invalid output size: \".concat(to.width, \"x\").concat(to.height)));\n  }\n\n  if (opts.unsharpRadius > 2) opts.unsharpRadius = 2;\n  opts.canceled = false;\n\n  if (opts.cancelToken) {\n    // Wrap cancelToken to avoid successive resolve & set flag\n    opts.cancelToken = opts.cancelToken.then(function (data) {\n      opts.canceled = true;\n      throw data;\n    }, function (err) {\n      opts.canceled = true;\n      throw err;\n    });\n  }\n\n  var DEST_TILE_BORDER = 3; // Max possible filter window size\n\n  opts.__destTileBorder = Math.ceil(Math.max(DEST_TILE_BORDER, 2.5 * opts.unsharpRadius | 0));\n  return this.init().then(function () {\n    if (opts.canceled) return opts.cancelToken; // if createImageBitmap supports resize, just do it and return\n\n    if (_this6.features.cib) {\n      if (filter_info.q2f.indexOf(opts.filter) >= 0) {\n        return _this6.__resizeViaCreateImageBitmap(from, to, opts);\n      }\n\n      _this6.debug('cib is enabled, but not supports provided filter, fallback to manual math');\n    }\n\n    if (!CAN_USE_CANVAS_GET_IMAGE_DATA) {\n      var err = new Error('Pica: cannot use getImageData on canvas, ' + \"make sure fingerprinting protection isn't enabled\");\n      err.code = 'ERR_GET_IMAGE_DATA';\n      throw err;\n    } //\n    // No easy way, let's resize manually via arrays\n    //\n\n\n    var stages = createStages(opts.width, opts.height, opts.toWidth, opts.toHeight, _this6.options.tile, opts.__destTileBorder);\n    return _this6.__processStages(stages, from, to, opts);\n  });\n}; // RGBA buffer resize\n//\n\n\nPica.prototype.resizeBuffer = function (options) {\n  var _this7 = this;\n\n  var opts = assign({}, DEFAULT_RESIZE_OPTS, options); // Legacy `.quality` option\n\n  if (Object.prototype.hasOwnProperty.call(opts, 'quality')) {\n    if (opts.quality < 0 || opts.quality > 3) {\n      throw new Error(\"Pica: .quality should be [0..3], got \".concat(opts.quality));\n    }\n\n    opts.filter = filter_info.q2f[opts.quality];\n  }\n\n  return this.init().then(function () {\n    return _this7.__mathlib.resizeAndUnsharp(opts);\n  });\n};\n\nPica.prototype.toBlob = function (canvas, mimeType, quality) {\n  mimeType = mimeType || 'image/png';\n  return new Promise(function (resolve) {\n    if (canvas.toBlob) {\n      canvas.toBlob(function (blob) {\n        return resolve(blob);\n      }, mimeType, quality);\n      return;\n    }\n\n    if (canvas.convertToBlob) {\n      resolve(canvas.convertToBlob({\n        type: mimeType,\n        quality: quality\n      }));\n      return;\n    } // Fallback for old browsers\n\n\n    var asString = atob(canvas.toDataURL(mimeType, quality).split(',')[1]);\n    var len = asString.length;\n    var asBuffer = new Uint8Array(len);\n\n    for (var i = 0; i < len; i++) {\n      asBuffer[i] = asString.charCodeAt(i);\n    }\n\n    resolve(new Blob([asBuffer], {\n      type: mimeType\n    }));\n  });\n};\n\nPica.prototype.debug = function () {};\n\nmodule.exports = Pica;\n\n},{\"./lib/mathlib\":1,\"./lib/mm_resize/resize_filter_info\":7,\"./lib/pool\":13,\"./lib/stepper\":14,\"./lib/tiler\":15,\"./lib/utils\":16,\"./lib/worker\":17,\"object-assign\":22,\"webworkify\":23}]},{},[])(\"/index.js\")\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pica/dist/pica.js\n");

/***/ }),

/***/ "./src/glsl/copy.frag":
/*!****************************!*\
  !*** ./src/glsl/copy.frag ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"precision mediump float;\\r\\nuniform sampler2D texture;\\r\\nuniform vec2 screenSize;\\r\\nuniform vec2 u_offset;\\r\\n\\r\\nvoid main() {\\r\\n    gl_FragColor = texture2D(texture, (gl_FragCoord.xy + u_offset) / screenSize);\\r\\n}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZ2xzbC9jb3B5LmZyYWcuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLHlCQUF5Qiw4QkFBOEIsNEJBQTRCLDBCQUEwQixxQkFBcUIscUZBQXFGLEtBQUssQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9nbHNsL2NvcHkuZnJhZz84NmUxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwicHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxyXFxudW5pZm9ybSBzYW1wbGVyMkQgdGV4dHVyZTtcXHJcXG51bmlmb3JtIHZlYzIgc2NyZWVuU2l6ZTtcXHJcXG51bmlmb3JtIHZlYzIgdV9vZmZzZXQ7XFxyXFxuXFxyXFxudm9pZCBtYWluKCkge1xcclxcbiAgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodGV4dHVyZSwgKGdsX0ZyYWdDb29yZC54eSArIHVfb2Zmc2V0KSAvIHNjcmVlblNpemUpO1xcclxcbn1cIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/glsl/copy.frag\n");

/***/ }),

/***/ "./src/glsl/copy.vert":
/*!****************************!*\
  !*** ./src/glsl/copy.vert ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"attribute vec2 a_position;\\r\\n\\r\\nvarying vec2 v_texCoord;\\r\\n\\r\\nvoid main() {\\r\\n  \\r\\n  v_texCoord = a_position;\\r\\n  gl_Position = vec4(a_position, 0.0, 1.0);\\r\\n}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZ2xzbC9jb3B5LnZlcnQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLDJCQUEyQixnQ0FBZ0MscUJBQXFCLG9DQUFvQywrQ0FBK0MsS0FBSyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2dsc2wvY29weS52ZXJ0P2Y2NjIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJhdHRyaWJ1dGUgdmVjMiBhX3Bvc2l0aW9uO1xcclxcblxcclxcbnZhcnlpbmcgdmVjMiB2X3RleENvb3JkO1xcclxcblxcclxcbnZvaWQgbWFpbigpIHtcXHJcXG4gIFxcclxcbiAgdl90ZXhDb29yZCA9IGFfcG9zaXRpb247XFxyXFxuICBnbF9Qb3NpdGlvbiA9IHZlYzQoYV9wb3NpdGlvbiwgMC4wLCAxLjApO1xcclxcbn1cIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/glsl/copy.vert\n");

/***/ }),

/***/ "./src/glsl/draw.frag":
/*!****************************!*\
  !*** ./src/glsl/draw.frag ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"precision mediump float;\\r\\nuniform sampler2D texture;\\r\\nuniform vec2 screenSize;\\r\\n\\r\\nuniform vec2 u_org;\\r\\nuniform vec2 u_end;\\r\\nuniform float u_rad;\\r\\nuniform vec4 u_col;\\r\\n\\r\\nuniform int u_mode;\\r\\n\\r\\n\\r\\nfloat d_1(vec2 o, vec2 e) {\\r\\n    vec2 delta = abs(e - o);\\r\\n    // if(delta.x > 0.5 * screenSize.x)\\r\\n    //     delta.x = screenSize.x - delta.x;\\r\\n\\r\\n    // if(delta.y > 0.5 * screenSize.y)\\r\\n    //     delta.y = screenSize.y - delta.y;\\r\\n\\r\\n    return delta.x + delta.y;\\r\\n}\\r\\n\\r\\n\\r\\nfloat d_2(vec2 o, vec2 e) {\\r\\n    vec2 delta = abs(e - o);\\r\\n    // if(delta.x > 0.5 * screenSize.x)\\r\\n    //     delta.x = screenSize.x - delta.x;\\r\\n\\r\\n    // if(delta.y > 0.5 * screenSize.y)\\r\\n    //     delta.y = screenSize.y - delta.y;\\r\\n\\r\\n    delta = delta * delta;\\r\\n    return sqrt(delta.x + delta.y);\\r\\n}\\r\\n\\r\\nfloat d_inf(vec2 o, vec2 e) {\\r\\n    vec2 delta = abs(e - o);\\r\\n    // if(delta.x > 0.5 * screenSize.x)\\r\\n    //     delta.x = screenSize.x - delta.x;\\r\\n\\r\\n    // if(delta.y > 0.5 * screenSize.y)\\r\\n    //     delta.y = screenSize.y - delta.y;\\r\\n\\r\\n    return max(delta.x, delta.y);\\r\\n}\\r\\n\\r\\nfloat dist(vec2 a, vec2 b) {\\r\\n    if(u_mode == 0)\\r\\n        return d_inf(a,b);\\r\\n\\r\\n    if(u_mode == 1)\\r\\n        return d_1(a,b);\\r\\n\\r\\n    return d_2(a,b);\\r\\n}\\r\\n\\r\\nfloat ldist_1(vec2 v, vec2 w, vec2 p) {\\r\\n    // we wanna solve for t \\r\\n    // v + t*(w-v) = (x,_)\\r\\n    // or\\r\\n    // v + t*(w-v) = (_,y)\\r\\n    // Coz shortest path in manhattan is a straight vertical or horizontal line\\r\\n\\r\\n    vec2 txy = (p - v) / (w - v);\\r\\n\\r\\n    txy = clamp(txy, vec2(0.0, 0.0), vec2(1.0, 1.0));\\r\\n    vec2 projection_x = v + txy.x * (w - v);  // Projection falls on the segment\\r\\n    vec2 projection_y = v + txy.y * (w - v);  // Projection falls on the segment\\r\\n    return min(dist(p, projection_x), dist(p, projection_y));\\r\\n}\\r\\n\\r\\nfloat ldist_inf(vec2 v, vec2 w, vec2 p) {\\r\\n    // we wanna solve for t \\r\\n    // v + t*(w-v) = p + _ * (1, -1)\\r\\n    // or\\r\\n    // v + t*(w-v) = p + _ * (1, -1)\\r\\n    // Coz shortest path in inf_norm is a straight diagonal line\\r\\n\\r\\n    float t_pp = (p.x - v.x + v.y - p.y) / (w.x - v.x - w.y + v.y);\\r\\n    float t_pm = (p.x - v.x - v.y + p.y) / (w.x - v.x + w.y - v.y);\\r\\n\\r\\n    t_pp = clamp(t_pp, 0.0, 1.0);\\r\\n    t_pm = clamp(t_pm, 0.0, 1.0);\\r\\n    vec2 projection_pp = v + t_pp * (w - v);  // Projection falls on the segment\\r\\n    vec2 projection_pm = v + t_pm * (w - v);  // Projection falls on the segment\\r\\n    return min(dist(p, projection_pp), dist(p, projection_pm));\\r\\n}\\r\\n\\r\\nfloat ldist_2(vec2 v, vec2 w, vec2 p) {\\r\\n    // Consider the line extending the segment, parameterized as v + t (w - v).\\r\\n    // We find projection of point p onto the line. \\r\\n    // It falls where t = [(p-v) . (w-v)] / |w-v|^2\\r\\n    // We clamp t from [0,1] to handle points outside the segment vw.\\r\\n    float t = clamp(dot(p - v, w - v) / dot(v - w, v - w), 0.0, 1.0);\\r\\n    vec2 projection = v + t * (w - v);  // Projection falls on the segment\\r\\n    return dist(p, projection);\\r\\n}\\r\\n\\r\\nfloat line_dist(vec2 v, vec2 w, vec2 p) {\\r\\n    // Return minimum distance between line segment vw and point p\\r\\n    float l2 = dot(v - w, v - w);  // i.e. |w-v|^2 -  avoid a sqrt\\r\\n    if (l2 < 1.0) return dist(p, v);   // v == w case\\r\\n    \\r\\n    if(u_mode == 0)\\r\\n        return ldist_inf(v,w,p);\\r\\n\\r\\n    if(u_mode == 1)\\r\\n        return ldist_1(v,w,p);\\r\\n\\r\\n    return ldist_2(v,w,p);\\r\\n}\\r\\n\\r\\nvoid main(){\\r\\n\\r\\n    gl_FragColor = texture2D(texture, gl_FragCoord.xy / screenSize);\\r\\n\\r\\n    if(line_dist(u_org, u_end, gl_FragCoord.xy) <= u_rad + 0.55)\\r\\n    {\\r\\n        gl_FragColor=u_col;\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    float dx = 0.0;\\r\\n    float dy = 0.0;\\r\\n    vec2 tempOrg = u_org;\\r\\n    vec2 tempEnd = u_end;\\r\\n\\r\\n    return;\\r\\n    // wrap for thick brushes\\r\\n    \\r\\n    if(gl_FragCoord.x <= u_rad)\\r\\n        dx = screenSize.x;\\r\\n    else if(gl_FragCoord.x >= screenSize.x - u_rad)\\r\\n        dx = -screenSize.x;\\r\\n\\r\\n    if(dx!=0.0 && line_dist(u_org, u_end, gl_FragCoord.xy + vec2(dx,0)) <= u_rad + 0.55)\\r\\n    {\\r\\n        gl_FragColor=u_col;\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if(gl_FragCoord.y <= u_rad)\\r\\n        dy = screenSize.y;\\r\\n    else if(gl_FragCoord.y >= screenSize.y - u_rad)\\r\\n        dy = -screenSize.y;\\r\\n\\r\\n    if(dy!=0.0 && line_dist(u_org, u_end, gl_FragCoord.xy + vec2(0,dy)) <= u_rad + 0.55)\\r\\n    {\\r\\n        gl_FragColor=u_col;\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if(dy!=0.0 && dx!=0.0 && line_dist(u_org, u_end, gl_FragCoord.xy + vec2(dx,dy)) <= u_rad + 0.55)\\r\\n    {\\r\\n        gl_FragColor=u_col;\\r\\n        return;\\r\\n    }\\r\\n}\\r\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZ2xzbC9kcmF3LmZyYWcuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLHlCQUF5Qiw4QkFBOEIsNEJBQTRCLDJCQUEyQix1QkFBdUIsd0JBQXdCLHVCQUF1QiwyQkFBMkIsdUNBQXVDLGdDQUFnQywyRkFBMkYsK0ZBQStGLHFDQUFxQyxLQUFLLHVDQUF1QyxnQ0FBZ0MsMkZBQTJGLCtGQUErRixrQ0FBa0MsdUNBQXVDLEtBQUsscUNBQXFDLGdDQUFnQywyRkFBMkYsK0ZBQStGLHlDQUF5QyxLQUFLLG9DQUFvQyxxREFBcUQsdURBQXVELDRCQUE0QixLQUFLLCtDQUErQyxxT0FBcU8sNkRBQTZELGtEQUFrRCxvRkFBb0YsbUdBQW1HLEtBQUssaURBQWlELDRRQUE0USx1RUFBdUUseUNBQXlDLHFDQUFxQyxrREFBa0Qsb0ZBQW9GLHFHQUFxRyxLQUFLLCtDQUErQyxvVkFBb1YsNENBQTRDLHFFQUFxRSxLQUFLLGlEQUFpRCw2R0FBNkcsMEVBQTBFLGlGQUFpRiw2REFBNkQsa0NBQWtDLEtBQUssb0JBQW9CLDRFQUE0RSxpRkFBaUYsK0JBQStCLG1CQUFtQixTQUFTLDJCQUEyQix1QkFBdUIsNkJBQTZCLDZCQUE2QixtQkFBbUIsMEdBQTBHLHNGQUFzRix5R0FBeUcsK0JBQStCLG1CQUFtQixTQUFTLHFFQUFxRSxzRkFBc0YseUdBQXlHLCtCQUErQixtQkFBbUIsU0FBUyxxSEFBcUgsK0JBQStCLG1CQUFtQixTQUFTLEtBQUssS0FBSyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9nbHNsL2RyYXcuZnJhZz8yYmZhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwicHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxyXFxudW5pZm9ybSBzYW1wbGVyMkQgdGV4dHVyZTtcXHJcXG51bmlmb3JtIHZlYzIgc2NyZWVuU2l6ZTtcXHJcXG5cXHJcXG51bmlmb3JtIHZlYzIgdV9vcmc7XFxyXFxudW5pZm9ybSB2ZWMyIHVfZW5kO1xcclxcbnVuaWZvcm0gZmxvYXQgdV9yYWQ7XFxyXFxudW5pZm9ybSB2ZWM0IHVfY29sO1xcclxcblxcclxcbnVuaWZvcm0gaW50IHVfbW9kZTtcXHJcXG5cXHJcXG5cXHJcXG5mbG9hdCBkXzEodmVjMiBvLCB2ZWMyIGUpIHtcXHJcXG4gICAgdmVjMiBkZWx0YSA9IGFicyhlIC0gbyk7XFxyXFxuICAgIC8vIGlmKGRlbHRhLnggPiAwLjUgKiBzY3JlZW5TaXplLngpXFxyXFxuICAgIC8vICAgICBkZWx0YS54ID0gc2NyZWVuU2l6ZS54IC0gZGVsdGEueDtcXHJcXG5cXHJcXG4gICAgLy8gaWYoZGVsdGEueSA+IDAuNSAqIHNjcmVlblNpemUueSlcXHJcXG4gICAgLy8gICAgIGRlbHRhLnkgPSBzY3JlZW5TaXplLnkgLSBkZWx0YS55O1xcclxcblxcclxcbiAgICByZXR1cm4gZGVsdGEueCArIGRlbHRhLnk7XFxyXFxufVxcclxcblxcclxcblxcclxcbmZsb2F0IGRfMih2ZWMyIG8sIHZlYzIgZSkge1xcclxcbiAgICB2ZWMyIGRlbHRhID0gYWJzKGUgLSBvKTtcXHJcXG4gICAgLy8gaWYoZGVsdGEueCA+IDAuNSAqIHNjcmVlblNpemUueClcXHJcXG4gICAgLy8gICAgIGRlbHRhLnggPSBzY3JlZW5TaXplLnggLSBkZWx0YS54O1xcclxcblxcclxcbiAgICAvLyBpZihkZWx0YS55ID4gMC41ICogc2NyZWVuU2l6ZS55KVxcclxcbiAgICAvLyAgICAgZGVsdGEueSA9IHNjcmVlblNpemUueSAtIGRlbHRhLnk7XFxyXFxuXFxyXFxuICAgIGRlbHRhID0gZGVsdGEgKiBkZWx0YTtcXHJcXG4gICAgcmV0dXJuIHNxcnQoZGVsdGEueCArIGRlbHRhLnkpO1xcclxcbn1cXHJcXG5cXHJcXG5mbG9hdCBkX2luZih2ZWMyIG8sIHZlYzIgZSkge1xcclxcbiAgICB2ZWMyIGRlbHRhID0gYWJzKGUgLSBvKTtcXHJcXG4gICAgLy8gaWYoZGVsdGEueCA+IDAuNSAqIHNjcmVlblNpemUueClcXHJcXG4gICAgLy8gICAgIGRlbHRhLnggPSBzY3JlZW5TaXplLnggLSBkZWx0YS54O1xcclxcblxcclxcbiAgICAvLyBpZihkZWx0YS55ID4gMC41ICogc2NyZWVuU2l6ZS55KVxcclxcbiAgICAvLyAgICAgZGVsdGEueSA9IHNjcmVlblNpemUueSAtIGRlbHRhLnk7XFxyXFxuXFxyXFxuICAgIHJldHVybiBtYXgoZGVsdGEueCwgZGVsdGEueSk7XFxyXFxufVxcclxcblxcclxcbmZsb2F0IGRpc3QodmVjMiBhLCB2ZWMyIGIpIHtcXHJcXG4gICAgaWYodV9tb2RlID09IDApXFxyXFxuICAgICAgICByZXR1cm4gZF9pbmYoYSxiKTtcXHJcXG5cXHJcXG4gICAgaWYodV9tb2RlID09IDEpXFxyXFxuICAgICAgICByZXR1cm4gZF8xKGEsYik7XFxyXFxuXFxyXFxuICAgIHJldHVybiBkXzIoYSxiKTtcXHJcXG59XFxyXFxuXFxyXFxuZmxvYXQgbGRpc3RfMSh2ZWMyIHYsIHZlYzIgdywgdmVjMiBwKSB7XFxyXFxuICAgIC8vIHdlIHdhbm5hIHNvbHZlIGZvciB0IFxcclxcbiAgICAvLyB2ICsgdCoody12KSA9ICh4LF8pXFxyXFxuICAgIC8vIG9yXFxyXFxuICAgIC8vIHYgKyB0Kih3LXYpID0gKF8seSlcXHJcXG4gICAgLy8gQ296IHNob3J0ZXN0IHBhdGggaW4gbWFuaGF0dGFuIGlzIGEgc3RyYWlnaHQgdmVydGljYWwgb3IgaG9yaXpvbnRhbCBsaW5lXFxyXFxuXFxyXFxuICAgIHZlYzIgdHh5ID0gKHAgLSB2KSAvICh3IC0gdik7XFxyXFxuXFxyXFxuICAgIHR4eSA9IGNsYW1wKHR4eSwgdmVjMigwLjAsIDAuMCksIHZlYzIoMS4wLCAxLjApKTtcXHJcXG4gICAgdmVjMiBwcm9qZWN0aW9uX3ggPSB2ICsgdHh5LnggKiAodyAtIHYpOyAgLy8gUHJvamVjdGlvbiBmYWxscyBvbiB0aGUgc2VnbWVudFxcclxcbiAgICB2ZWMyIHByb2plY3Rpb25feSA9IHYgKyB0eHkueSAqICh3IC0gdik7ICAvLyBQcm9qZWN0aW9uIGZhbGxzIG9uIHRoZSBzZWdtZW50XFxyXFxuICAgIHJldHVybiBtaW4oZGlzdChwLCBwcm9qZWN0aW9uX3gpLCBkaXN0KHAsIHByb2plY3Rpb25feSkpO1xcclxcbn1cXHJcXG5cXHJcXG5mbG9hdCBsZGlzdF9pbmYodmVjMiB2LCB2ZWMyIHcsIHZlYzIgcCkge1xcclxcbiAgICAvLyB3ZSB3YW5uYSBzb2x2ZSBmb3IgdCBcXHJcXG4gICAgLy8gdiArIHQqKHctdikgPSBwICsgXyAqICgxLCAtMSlcXHJcXG4gICAgLy8gb3JcXHJcXG4gICAgLy8gdiArIHQqKHctdikgPSBwICsgXyAqICgxLCAtMSlcXHJcXG4gICAgLy8gQ296IHNob3J0ZXN0IHBhdGggaW4gaW5mX25vcm0gaXMgYSBzdHJhaWdodCBkaWFnb25hbCBsaW5lXFxyXFxuXFxyXFxuICAgIGZsb2F0IHRfcHAgPSAocC54IC0gdi54ICsgdi55IC0gcC55KSAvICh3LnggLSB2LnggLSB3LnkgKyB2LnkpO1xcclxcbiAgICBmbG9hdCB0X3BtID0gKHAueCAtIHYueCAtIHYueSArIHAueSkgLyAody54IC0gdi54ICsgdy55IC0gdi55KTtcXHJcXG5cXHJcXG4gICAgdF9wcCA9IGNsYW1wKHRfcHAsIDAuMCwgMS4wKTtcXHJcXG4gICAgdF9wbSA9IGNsYW1wKHRfcG0sIDAuMCwgMS4wKTtcXHJcXG4gICAgdmVjMiBwcm9qZWN0aW9uX3BwID0gdiArIHRfcHAgKiAodyAtIHYpOyAgLy8gUHJvamVjdGlvbiBmYWxscyBvbiB0aGUgc2VnbWVudFxcclxcbiAgICB2ZWMyIHByb2plY3Rpb25fcG0gPSB2ICsgdF9wbSAqICh3IC0gdik7ICAvLyBQcm9qZWN0aW9uIGZhbGxzIG9uIHRoZSBzZWdtZW50XFxyXFxuICAgIHJldHVybiBtaW4oZGlzdChwLCBwcm9qZWN0aW9uX3BwKSwgZGlzdChwLCBwcm9qZWN0aW9uX3BtKSk7XFxyXFxufVxcclxcblxcclxcbmZsb2F0IGxkaXN0XzIodmVjMiB2LCB2ZWMyIHcsIHZlYzIgcCkge1xcclxcbiAgICAvLyBDb25zaWRlciB0aGUgbGluZSBleHRlbmRpbmcgdGhlIHNlZ21lbnQsIHBhcmFtZXRlcml6ZWQgYXMgdiArIHQgKHcgLSB2KS5cXHJcXG4gICAgLy8gV2UgZmluZCBwcm9qZWN0aW9uIG9mIHBvaW50IHAgb250byB0aGUgbGluZS4gXFxyXFxuICAgIC8vIEl0IGZhbGxzIHdoZXJlIHQgPSBbKHAtdikgLiAody12KV0gLyB8dy12fF4yXFxyXFxuICAgIC8vIFdlIGNsYW1wIHQgZnJvbSBbMCwxXSB0byBoYW5kbGUgcG9pbnRzIG91dHNpZGUgdGhlIHNlZ21lbnQgdncuXFxyXFxuICAgIGZsb2F0IHQgPSBjbGFtcChkb3QocCAtIHYsIHcgLSB2KSAvIGRvdCh2IC0gdywgdiAtIHcpLCAwLjAsIDEuMCk7XFxyXFxuICAgIHZlYzIgcHJvamVjdGlvbiA9IHYgKyB0ICogKHcgLSB2KTsgIC8vIFByb2plY3Rpb24gZmFsbHMgb24gdGhlIHNlZ21lbnRcXHJcXG4gICAgcmV0dXJuIGRpc3QocCwgcHJvamVjdGlvbik7XFxyXFxufVxcclxcblxcclxcbmZsb2F0IGxpbmVfZGlzdCh2ZWMyIHYsIHZlYzIgdywgdmVjMiBwKSB7XFxyXFxuICAgIC8vIFJldHVybiBtaW5pbXVtIGRpc3RhbmNlIGJldHdlZW4gbGluZSBzZWdtZW50IHZ3IGFuZCBwb2ludCBwXFxyXFxuICAgIGZsb2F0IGwyID0gZG90KHYgLSB3LCB2IC0gdyk7ICAvLyBpLmUuIHx3LXZ8XjIgLSAgYXZvaWQgYSBzcXJ0XFxyXFxuICAgIGlmIChsMiA8IDEuMCkgcmV0dXJuIGRpc3QocCwgdik7ICAgLy8gdiA9PSB3IGNhc2VcXHJcXG4gICAgXFxyXFxuICAgIGlmKHVfbW9kZSA9PSAwKVxcclxcbiAgICAgICAgcmV0dXJuIGxkaXN0X2luZih2LHcscCk7XFxyXFxuXFxyXFxuICAgIGlmKHVfbW9kZSA9PSAxKVxcclxcbiAgICAgICAgcmV0dXJuIGxkaXN0XzEodix3LHApO1xcclxcblxcclxcbiAgICByZXR1cm4gbGRpc3RfMih2LHcscCk7XFxyXFxufVxcclxcblxcclxcbnZvaWQgbWFpbigpe1xcclxcblxcclxcbiAgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodGV4dHVyZSwgZ2xfRnJhZ0Nvb3JkLnh5IC8gc2NyZWVuU2l6ZSk7XFxyXFxuXFxyXFxuICAgIGlmKGxpbmVfZGlzdCh1X29yZywgdV9lbmQsIGdsX0ZyYWdDb29yZC54eSkgPD0gdV9yYWQgKyAwLjU1KVxcclxcbiAgICB7XFxyXFxuICAgICAgICBnbF9GcmFnQ29sb3I9dV9jb2w7XFxyXFxuICAgICAgICByZXR1cm47XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgZmxvYXQgZHggPSAwLjA7XFxyXFxuICAgIGZsb2F0IGR5ID0gMC4wO1xcclxcbiAgICB2ZWMyIHRlbXBPcmcgPSB1X29yZztcXHJcXG4gICAgdmVjMiB0ZW1wRW5kID0gdV9lbmQ7XFxyXFxuXFxyXFxuICAgIHJldHVybjtcXHJcXG4gICAgLy8gd3JhcCBmb3IgdGhpY2sgYnJ1c2hlc1xcclxcbiAgICBcXHJcXG4gICAgaWYoZ2xfRnJhZ0Nvb3JkLnggPD0gdV9yYWQpXFxyXFxuICAgICAgICBkeCA9IHNjcmVlblNpemUueDtcXHJcXG4gICAgZWxzZSBpZihnbF9GcmFnQ29vcmQueCA+PSBzY3JlZW5TaXplLnggLSB1X3JhZClcXHJcXG4gICAgICAgIGR4ID0gLXNjcmVlblNpemUueDtcXHJcXG5cXHJcXG4gICAgaWYoZHghPTAuMCAmJiBsaW5lX2Rpc3QodV9vcmcsIHVfZW5kLCBnbF9GcmFnQ29vcmQueHkgKyB2ZWMyKGR4LDApKSA8PSB1X3JhZCArIDAuNTUpXFxyXFxuICAgIHtcXHJcXG4gICAgICAgIGdsX0ZyYWdDb2xvcj11X2NvbDtcXHJcXG4gICAgICAgIHJldHVybjtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBpZihnbF9GcmFnQ29vcmQueSA8PSB1X3JhZClcXHJcXG4gICAgICAgIGR5ID0gc2NyZWVuU2l6ZS55O1xcclxcbiAgICBlbHNlIGlmKGdsX0ZyYWdDb29yZC55ID49IHNjcmVlblNpemUueSAtIHVfcmFkKVxcclxcbiAgICAgICAgZHkgPSAtc2NyZWVuU2l6ZS55O1xcclxcblxcclxcbiAgICBpZihkeSE9MC4wICYmIGxpbmVfZGlzdCh1X29yZywgdV9lbmQsIGdsX0ZyYWdDb29yZC54eSArIHZlYzIoMCxkeSkpIDw9IHVfcmFkICsgMC41NSlcXHJcXG4gICAge1xcclxcbiAgICAgICAgZ2xfRnJhZ0NvbG9yPXVfY29sO1xcclxcbiAgICAgICAgcmV0dXJuO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIGlmKGR5IT0wLjAgJiYgZHghPTAuMCAmJiBsaW5lX2Rpc3QodV9vcmcsIHVfZW5kLCBnbF9GcmFnQ29vcmQueHkgKyB2ZWMyKGR4LGR5KSkgPD0gdV9yYWQgKyAwLjU1KVxcclxcbiAgICB7XFxyXFxuICAgICAgICBnbF9GcmFnQ29sb3I9dV9jb2w7XFxyXFxuICAgICAgICByZXR1cm47XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/glsl/draw.frag\n");

/***/ }),

/***/ "./src/canvasController.js":
/*!*********************************!*\
  !*** ./src/canvasController.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CanvasController\": () => (/* binding */ CanvasController)\n/* harmony export */ });\n/* harmony import */ var _igloo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./igloo.js */ \"./src/igloo.js\");\n/* harmony import */ var _glsl_draw_frag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glsl/draw.frag */ \"./src/glsl/draw.frag\");\n/* harmony import */ var _glsl_copy_frag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glsl/copy.frag */ \"./src/glsl/copy.frag\");\n/* harmony import */ var _glsl_copy_vert__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glsl/copy.vert */ \"./src/glsl/copy.vert\");\n\r\n\r\n\r\n\r\n\r\n\r\nclass CanvasController {\r\n    constructor(canvas, drawHook) {\r\n        this.canvas = canvas;\r\n        this.drawHook = drawHook;\r\n        this.viewsize = new Float32Array([canvas.width, canvas.height]);\r\n\r\n        var gl = canvas.getContext(\"webgl\");\r\n        if (!gl) {\r\n            throw new Error('no webgl')\r\n        }\r\n\r\n        this.gl = gl\r\n        gl.getExtension('OES_texture_float');\r\n        gl.getExtension('WEBGL_color_buffer_float');\r\n        \r\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n\r\n        this.igloo = new _igloo_js__WEBPACK_IMPORTED_MODULE_0__.Igloo(gl)\r\n        this.quad = this.igloo.array(_igloo_js__WEBPACK_IMPORTED_MODULE_0__.Igloo.QUAD2);\r\n\r\n        this.program_copy = this.igloo.program(_glsl_copy_vert__WEBPACK_IMPORTED_MODULE_3__[\"default\"], _glsl_copy_frag__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\r\n        this.program_draw = this.igloo.program(_glsl_copy_vert__WEBPACK_IMPORTED_MODULE_3__[\"default\"], _glsl_draw_frag__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\r\n\r\n        this.frameBuffer = this.igloo.framebuffer();\r\n        this.tex_main = this.igloo.texture(null, gl.RGBA, gl.REPEAT, gl.NEAREST, gl.FLOAT)\r\n            .blank(this.viewsize[0], this.viewsize[1]);\r\n        this.tex_temp = this.igloo.texture(null, gl.RGBA, gl.REPEAT, gl.NEAREST, gl.FLOAT)\r\n            .blank(this.viewsize[0], this.viewsize[1]);\r\n\r\n\r\n        this.show();\r\n        this._addEvents();\r\n    }\r\n\r\n    _swapTextures() {\r\n        var tmp = this.tex_main;\r\n        this.tex_main = this.tex_temp\r\n        this.tex_temp = tmp;\r\n    };\r\n\r\n    _getMousePos(event) {\r\n        var rect = this.canvas.getBoundingClientRect();\r\n        return [\r\n            (event.pageX - rect.left),\r\n            (this.canvas.height - (event.pageY - rect.top)),\r\n        ];\r\n    };\r\n\r\n    _addEvents() {\r\n        this.start_pos = null\r\n        this.canvas.addEventListener('mousedown', e => {\r\n            e.stopPropagation();\r\n            this.start_pos = this._getMousePos(e)\r\n        })\r\n        this.canvas.addEventListener('mousemove', e => {\r\n            e.stopPropagation();\r\n            if (!this.start_pos) return;\r\n            const end_pos = this._getMousePos(e);\r\n            this.draw(this.start_pos, end_pos);\r\n            this.start_pos = end_pos;\r\n        })\r\n        this.canvas.addEventListener('mouseup', e => {\r\n            e.stopPropagation();\r\n            \r\n            if (this.drawHook && this.start_pos) this.drawHook(this);\r\n            this.start_pos = null;\r\n        })\r\n\r\n        this.canvas.addEventListener('mouseleave', e => {\r\n            e.stopPropagation();\r\n           \r\n            if (this.drawHook && this.start_pos) this.drawHook(this);\r\n            this.start_pos = null;\r\n        })\r\n    }\r\n\r\n    sync() {\r\n        this.gl.finish();\r\n    }\r\n\r\n    getArray() {\r\n        const gl = this.gl;\r\n        const texture = this.tex_main;\r\n        const [width, height] = this.viewsize;\r\n\r\n        var framebuffer = gl.createFramebuffer();\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture.texture, 0);\r\n    \r\n        // Read the contents of the framebuffer\r\n        var data = new Float32Array(width * height * 4);\r\n        gl.readPixels(0, 0, width, height, gl.RGBA, gl.FLOAT, data);\r\n\r\n        return data;\r\n    }\r\n\r\n    draw(from, to, col=null, rad=5, mode=2) {\r\n        from = new Float32Array(from);\r\n        to = new Float32Array(to);\r\n        col = col ? new Float32Array(col) : new Float32Array([1,1,1,1]);\r\n\r\n\r\n        const gl = this.gl\r\n\r\n        this.frameBuffer.attach(this.tex_temp);\r\n        gl.viewport(0, 0, this.viewsize[0], this.viewsize[1]);\r\n        this.tex_main.bind(0);\r\n        this.program_draw.use()\r\n            .attrib('a_position', this.quad, 2)\r\n            .uniformi('texture', 0)\r\n            .uniform('screenSize', this.viewsize)\r\n            .uniform('u_org', from)\r\n            .uniform('u_end', to)\r\n            .uniform('u_col', col)\r\n            .uniform('u_rad', rad-1)\r\n            .uniformi('u_mode', mode)\r\n            .draw(gl.TRIANGLE_STRIP, 4);\r\n        \r\n        this._swapTextures();\r\n        this.show();\r\n    }\r\n\r\n    shift(dx, dy) {\r\n        const gl = this.gl\r\n        this.frameBuffer.attach(this.tex_temp);\r\n        gl.viewport(0, 0, this.viewsize[0], this.viewsize[1]);\r\n        this.tex_main.bind(0);\r\n        this.program_copy.use()\r\n            .attrib('a_position', this.quad, 2)\r\n            .uniform('u_offset', new Float32Array([dx, dy]))\r\n            .uniform('screenSize', this.viewsize)\r\n            .uniformi('texture', 0)\r\n            .draw(gl.TRIANGLE_STRIP, 4);\r\n\r\n        this._swapTextures();\r\n        this.show();\r\n    }\r\n\r\n    show() {\r\n        const gl = this.gl\r\n        this.igloo.defaultFramebuffer.bind();\r\n        gl.viewport(0, 0, this.viewsize[0], this.viewsize[1]);\r\n        this.tex_main.bind(0);\r\n        this.program_copy.use()\r\n            .attrib('a_position', this.quad, 2)\r\n            .uniform('u_offset', new Float32Array([0, 0]))\r\n            .uniform('screenSize', this.viewsize)\r\n            .uniformi('texture', 0)\r\n            .draw(gl.TRIANGLE_STRIP, 4);\r\n    }\r\n\r\n\r\n    setImage(img, w, h) {\r\n        this.tex_main.set(img, w, h);\r\n        this.show();\r\n    }\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/canvasController.js\n");

/***/ }),

/***/ "./src/fft.js":
/*!********************!*\
  !*** ./src/fft.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CAdd\": () => (/* binding */ CAdd),\n/* harmony export */   \"CExp\": () => (/* binding */ CExp),\n/* harmony export */   \"CMagn\": () => (/* binding */ CMagn),\n/* harmony export */   \"CMul\": () => (/* binding */ CMul),\n/* harmony export */   \"CPhase\": () => (/* binding */ CPhase),\n/* harmony export */   \"CSub\": () => (/* binding */ CSub),\n/* harmony export */   \"dft\": () => (/* binding */ dft),\n/* harmony export */   \"fft\": () => (/* binding */ fft),\n/* harmony export */   \"fftPixelData\": () => (/* binding */ fftPixelData)\n/* harmony export */ });\n\r\nfunction CAdd(a, b) {\r\n    return [a[0] + b[0], a[1] + b[1]];\r\n}\r\n\r\nfunction CSub(a, b) {\r\n    return [a[0] - b[0], a[1] - b[1]];\r\n}\r\n\r\nfunction CMul(a, b) {\r\n    return [(a[0] * b[0] - a[1] * b[1]),\r\n    (a[0] * b[1] + a[1] * b[0])];\r\n}\r\n\r\nfunction CMagn(c) {\r\n    return Math.sqrt(c[0] * c[0] + c[1] * c[1]);\r\n}\r\n\r\nfunction CPhase(c) {\r\n    return Math.atan2(c[1], c[0]);\r\n}\r\n\r\nfunction CExp(c) {\r\n    const coef = Math.exp(c[0]);\r\n    return [coef * Math.cos(c[1]), coef * Math.sin(c[1])]\r\n}\r\n\r\n\r\n\r\nfunction dft(arr, dir=-1) {\r\n    const length = arr.length;\r\n    const res = [];\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        res[i] = [0, 0];\r\n        for (let k = 0; k < length; k++) {\r\n            const pow = dir * Math.PI * 2 / length * k * i;\r\n            const term = arr[k]?.length ? arr[k] : [arr[k], 0];\r\n\r\n            const temp = CMul(term, CExp([0, pow]))\r\n            res[i] = CAdd(res[i], temp);\r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nfunction fft(arr, dir=-1, norm=false) {\r\n    function even(__, ix) {\r\n        return ix % 2 == 0;\r\n    }\r\n\r\n    function odd(__, ix) {\r\n        return ix % 2 == 1;\r\n    }\r\n\r\n    const length = arr.length;\r\n    const mult = norm ? [1/length, 0] : [1,0];\r\n    const res = [];\r\n\r\n    if (length == 1) {\r\n        return arr[0]?.length ? [arr[0]] : [[arr[0], 0]];\r\n    }\r\n\r\n    // recursion\r\n    const res_evens = fft(arr.filter(even));\r\n    const res_odds = fft(arr.filter(odd));\r\n\r\n    // Now, perform N/2 operations!\r\n    for (var k = 0; k < length / 2; k++) {\r\n        const pow = dir * Math.PI * 2 / length * k;\r\n\r\n        // t is a complex number!\r\n        const t = res_evens[k];\r\n        const e = CMul(CExp([0,pow]), res_odds[k]);\r\n\r\n        res[k] = CMul(CAdd(t, e), mult);\r\n        res[k + (length / 2)] = CMul(CSub(t, e), mult);\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nfunction fftPixelData(data,w,h, dir=-1, norm=false) {\r\n    const chan = 4;\r\n    function getElem(i,j,c) {\r\n        return data[i*w*chan + j*chan + c]\r\n    }\r\n\r\n    function setElem(arr, i,j,c, val) {\r\n        arr[i*w*chan + j*chan + c] = val;\r\n    }\r\n\r\n    function getChanRow(i, c) {\r\n        const res = []\r\n        for (let j = 0; j < w; j++) {\r\n            res[j] = getElem(i,j,c)\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    function logMap(x, max=1) {\r\n        return Math.log(1+x)/Math.log(1+max)\r\n    }\r\n    \r\n    const magnitude = new Float32Array(data);\r\n    const phase = new Float32Array(data);\r\n    const res = [];\r\n\r\n    let maxMagn = [0,0,0];\r\n    for(let c = 0; c < 3; c++)\r\n    {\r\n        const temp = [];\r\n        for (let i = 0; i < h; i++) {\r\n            const line = getChanRow(i,c);\r\n            const f_line = fft(line, dir, norm);\r\n            temp.push(f_line);\r\n        }\r\n\r\n        const getCol = j => {\r\n            const res = [];\r\n            for (let i = 0; i < h; i++) {\r\n                res[i] = temp[i][j]\r\n            }\r\n\r\n            return res;\r\n        }\r\n\r\n        const temp2 = []\r\n        for (let j = 0; j < w; j++) {\r\n            const col = getCol(j);\r\n            const f_col = fft(col, dir, norm);\r\n            temp2.push(f_col);\r\n\r\n            const colMagnMax = Math.max(...col.map(CMagn));\r\n            if (colMagnMax > maxMagn[c]) maxMagn[c] = colMagnMax;\r\n        }\r\n        res.push(temp2)\r\n    }\r\n\r\n    for(let c = 0; c < 3; c++)\r\n        for (let j = 0; j < w; j++)\r\n            for (let i = 0; i < h; i++) {\r\n                const item = res[c][j][i];\r\n                const phaseVal = CPhase(item);\r\n                const magnVal = CMagn(item)\r\n                // correct phase so it can be an image\r\n                const phaseCorrected = (phaseVal + Math.PI) / Math.PI / 2;\r\n                setElem(magnitude, i,j,c, logMap(magnVal, maxMagn[c]))\r\n                setElem(phase, i,j,c, phaseCorrected)\r\n            }\r\n\r\n\r\n    return {magnitude, phase};\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZmZ0LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixZQUFZO0FBQ2hDO0FBQ0Esd0JBQXdCLFlBQVk7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixPQUFPO0FBQzFCO0FBQ0E7QUFDQSx3QkFBd0IsT0FBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixPQUFPO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLE9BQU87QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQix3QkFBd0IsT0FBTztBQUMvQiw0QkFBNEIsT0FBTztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZmZ0LmpzP2I0NjgiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcbmV4cG9ydCBmdW5jdGlvbiBDQWRkKGEsIGIpIHtcclxuICAgIHJldHVybiBbYVswXSArIGJbMF0sIGFbMV0gKyBiWzFdXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIENTdWIoYSwgYikge1xyXG4gICAgcmV0dXJuIFthWzBdIC0gYlswXSwgYVsxXSAtIGJbMV1dO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ011bChhLCBiKSB7XHJcbiAgICByZXR1cm4gWyhhWzBdICogYlswXSAtIGFbMV0gKiBiWzFdKSxcclxuICAgIChhWzBdICogYlsxXSArIGFbMV0gKiBiWzBdKV07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDTWFnbihjKSB7XHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KGNbMF0gKiBjWzBdICsgY1sxXSAqIGNbMV0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ1BoYXNlKGMpIHtcclxuICAgIHJldHVybiBNYXRoLmF0YW4yKGNbMV0sIGNbMF0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ0V4cChjKSB7XHJcbiAgICBjb25zdCBjb2VmID0gTWF0aC5leHAoY1swXSk7XHJcbiAgICByZXR1cm4gW2NvZWYgKiBNYXRoLmNvcyhjWzFdKSwgY29lZiAqIE1hdGguc2luKGNbMV0pXVxyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZnQoYXJyLCBkaXI9LTEpIHtcclxuICAgIGNvbnN0IGxlbmd0aCA9IGFyci5sZW5ndGg7XHJcbiAgICBjb25zdCByZXMgPSBbXTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgcmVzW2ldID0gWzAsIDBdO1xyXG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgbGVuZ3RoOyBrKyspIHtcclxuICAgICAgICAgICAgY29uc3QgcG93ID0gZGlyICogTWF0aC5QSSAqIDIgLyBsZW5ndGggKiBrICogaTtcclxuICAgICAgICAgICAgY29uc3QgdGVybSA9IGFycltrXT8ubGVuZ3RoID8gYXJyW2tdIDogW2FycltrXSwgMF07XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0ZW1wID0gQ011bCh0ZXJtLCBDRXhwKFswLCBwb3ddKSlcclxuICAgICAgICAgICAgcmVzW2ldID0gQ0FkZChyZXNbaV0sIHRlbXApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmZ0KGFyciwgZGlyPS0xLCBub3JtPWZhbHNlKSB7XHJcbiAgICBmdW5jdGlvbiBldmVuKF9fLCBpeCkge1xyXG4gICAgICAgIHJldHVybiBpeCAlIDIgPT0gMDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBvZGQoX18sIGl4KSB7XHJcbiAgICAgICAgcmV0dXJuIGl4ICUgMiA9PSAxO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGxlbmd0aCA9IGFyci5sZW5ndGg7XHJcbiAgICBjb25zdCBtdWx0ID0gbm9ybSA/IFsxL2xlbmd0aCwgMF0gOiBbMSwwXTtcclxuICAgIGNvbnN0IHJlcyA9IFtdO1xyXG5cclxuICAgIGlmIChsZW5ndGggPT0gMSkge1xyXG4gICAgICAgIHJldHVybiBhcnJbMF0/Lmxlbmd0aCA/IFthcnJbMF1dIDogW1thcnJbMF0sIDBdXTtcclxuICAgIH1cclxuXHJcbiAgICAvLyByZWN1cnNpb25cclxuICAgIGNvbnN0IHJlc19ldmVucyA9IGZmdChhcnIuZmlsdGVyKGV2ZW4pKTtcclxuICAgIGNvbnN0IHJlc19vZGRzID0gZmZ0KGFyci5maWx0ZXIob2RkKSk7XHJcblxyXG4gICAgLy8gTm93LCBwZXJmb3JtIE4vMiBvcGVyYXRpb25zIVxyXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBsZW5ndGggLyAyOyBrKyspIHtcclxuICAgICAgICBjb25zdCBwb3cgPSBkaXIgKiBNYXRoLlBJICogMiAvIGxlbmd0aCAqIGs7XHJcblxyXG4gICAgICAgIC8vIHQgaXMgYSBjb21wbGV4IG51bWJlciFcclxuICAgICAgICBjb25zdCB0ID0gcmVzX2V2ZW5zW2tdO1xyXG4gICAgICAgIGNvbnN0IGUgPSBDTXVsKENFeHAoWzAscG93XSksIHJlc19vZGRzW2tdKTtcclxuXHJcbiAgICAgICAgcmVzW2tdID0gQ011bChDQWRkKHQsIGUpLCBtdWx0KTtcclxuICAgICAgICByZXNbayArIChsZW5ndGggLyAyKV0gPSBDTXVsKENTdWIodCwgZSksIG11bHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmZnRQaXhlbERhdGEoZGF0YSx3LGgsIGRpcj0tMSwgbm9ybT1mYWxzZSkge1xyXG4gICAgY29uc3QgY2hhbiA9IDQ7XHJcbiAgICBmdW5jdGlvbiBnZXRFbGVtKGksaixjKSB7XHJcbiAgICAgICAgcmV0dXJuIGRhdGFbaSp3KmNoYW4gKyBqKmNoYW4gKyBjXVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNldEVsZW0oYXJyLCBpLGosYywgdmFsKSB7XHJcbiAgICAgICAgYXJyW2kqdypjaGFuICsgaipjaGFuICsgY10gPSB2YWw7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Q2hhblJvdyhpLCBjKSB7XHJcbiAgICAgICAgY29uc3QgcmVzID0gW11cclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHc7IGorKykge1xyXG4gICAgICAgICAgICByZXNbal0gPSBnZXRFbGVtKGksaixjKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBsb2dNYXAoeCwgbWF4PTEpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5sb2coMSt4KS9NYXRoLmxvZygxK21heClcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3QgbWFnbml0dWRlID0gbmV3IEZsb2F0MzJBcnJheShkYXRhKTtcclxuICAgIGNvbnN0IHBoYXNlID0gbmV3IEZsb2F0MzJBcnJheShkYXRhKTtcclxuICAgIGNvbnN0IHJlcyA9IFtdO1xyXG5cclxuICAgIGxldCBtYXhNYWduID0gWzAsMCwwXTtcclxuICAgIGZvcihsZXQgYyA9IDA7IGMgPCAzOyBjKyspXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgdGVtcCA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBnZXRDaGFuUm93KGksYyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZfbGluZSA9IGZmdChsaW5lLCBkaXIsIG5vcm0pO1xyXG4gICAgICAgICAgICB0ZW1wLnB1c2goZl9saW5lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGdldENvbCA9IGogPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZXMgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHJlc1tpXSA9IHRlbXBbaV1bal1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHRlbXAyID0gW11cclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHc7IGorKykge1xyXG4gICAgICAgICAgICBjb25zdCBjb2wgPSBnZXRDb2woaik7XHJcbiAgICAgICAgICAgIGNvbnN0IGZfY29sID0gZmZ0KGNvbCwgZGlyLCBub3JtKTtcclxuICAgICAgICAgICAgdGVtcDIucHVzaChmX2NvbCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb2xNYWduTWF4ID0gTWF0aC5tYXgoLi4uY29sLm1hcChDTWFnbikpO1xyXG4gICAgICAgICAgICBpZiAoY29sTWFnbk1heCA+IG1heE1hZ25bY10pIG1heE1hZ25bY10gPSBjb2xNYWduTWF4O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXMucHVzaCh0ZW1wMilcclxuICAgIH1cclxuXHJcbiAgICBmb3IobGV0IGMgPSAwOyBjIDwgMzsgYysrKVxyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdzsgaisrKVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IHJlc1tjXVtqXVtpXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBoYXNlVmFsID0gQ1BoYXNlKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWFnblZhbCA9IENNYWduKGl0ZW0pXHJcbiAgICAgICAgICAgICAgICAvLyBjb3JyZWN0IHBoYXNlIHNvIGl0IGNhbiBiZSBhbiBpbWFnZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcGhhc2VDb3JyZWN0ZWQgPSAocGhhc2VWYWwgKyBNYXRoLlBJKSAvIE1hdGguUEkgLyAyO1xyXG4gICAgICAgICAgICAgICAgc2V0RWxlbShtYWduaXR1ZGUsIGksaixjLCBsb2dNYXAobWFnblZhbCwgbWF4TWFnbltjXSkpXHJcbiAgICAgICAgICAgICAgICBzZXRFbGVtKHBoYXNlLCBpLGosYywgcGhhc2VDb3JyZWN0ZWQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgcmV0dXJuIHttYWduaXR1ZGUsIHBoYXNlfTtcclxufVxyXG5cclxuXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/fft.js\n");

/***/ }),

/***/ "./src/igloo.js":
/*!**********************!*\
  !*** ./src/igloo.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Igloo\": () => (/* binding */ Igloo)\n/* harmony export */ });\n/**\r\n * Wrap WebGLRenderingContext objects with useful behavior.\r\n * @param {WebGLRenderingContext|HTMLCanvasElement} gl\r\n * @param {Object} [options] to pass to getContext()\r\n * @returns {Igloo}\r\n * @namespace\r\n */\r\nfunction Igloo(gl, options) {\r\n    var canvas;\r\n    if (gl instanceof HTMLCanvasElement) {\r\n        canvas = gl;\r\n        gl = Igloo.getContext(gl, options);\r\n    } else {\r\n        canvas = gl.canvas;\r\n    }\r\n    this.gl = gl;\r\n    this.canvas = canvas;\r\n    this.defaultFramebuffer = new Igloo.Framebuffer(gl, null);\r\n}\r\n\r\n/**\r\n * To be used in a vec2 GL_TRIANGLE_STRIP draw.\r\n * @type {Float32Array}\r\n * @constant\r\n */\r\nIgloo.QUAD2 = new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]);\r\n\r\n/**\r\n * Asynchronously or synchronously fetch data from the server.\r\n * @param {string} url\r\n * @param {Function} [callback] if provided, call is asynchronous\r\n * @returns {string}\r\n */\r\nIgloo.fetch = function(url, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open('GET', url, Boolean(callback));\r\n    if (callback != null) {\r\n        xhr.onload = function() {\r\n            callback(xhr.responseText);\r\n        };\r\n    }\r\n    xhr.send();\r\n    return xhr.responseText;\r\n};\r\n\r\n/**\r\n * @param {HTMLCanvasElement} canvas\r\n * @param {Object} [options] to pass to getContext()\r\n * @param {boolean} [noerror] If true, return null instead of throwing\r\n * @returns {?WebGLRenderingContext} a WebGL rendering context.\r\n */\r\nIgloo.getContext = function(canvas, options, noerror) {\r\n    var gl;\r\n    try {\r\n        gl = canvas.getContext('webgl', options || {}) ||\r\n            canvas.getContext('experimental-webgl', options || {});\r\n    } catch (e) {\r\n        gl = null;\r\n    }\r\n    if (gl == null && !noerror) {\r\n        throw new Error('Could not create WebGL context.');\r\n    } else {\r\n        return gl;\r\n    }\r\n};\r\n\r\n/**\r\n * @param {string} string\r\n * @returns {boolean} True if the string looks like a URL\r\n */\r\nIgloo.looksLikeURL = function(string) {\r\n    return /\\s/.exec(string) == null;\r\n};\r\n\r\n/**\r\n * @param {*} object\r\n * @returns {boolean} true if object is an array or typed array\r\n */\r\nIgloo.isArray = function(object) {\r\n    var name = Object.prototype.toString.apply(object, []),\r\n        re = / (Float(32|64)|Int(16|32|8)|Uint(16|32|8(Clamped)?))?Array]$/;\r\n    return re.exec(name) != null;\r\n};\r\n\r\n/**\r\n * Creates a program from a program configuration.\r\n *\r\n * @param {string} vertex URL or source of the vertex shader\r\n * @param {string} fragment URL or source of the fragment shader\r\n * @param {Function} [transform] Transforms the shaders before compilation\r\n * @returns {Igloo.Program}\r\n */\r\nIgloo.prototype.program = function(vertex, fragment, transform) {\r\n    if (Igloo.looksLikeURL(vertex)) vertex = Igloo.fetch(vertex);\r\n    if (Igloo.looksLikeURL(fragment)) fragment = Igloo.fetch(fragment);\r\n    if (transform != null) {\r\n        vertex = transform(vertex);\r\n        fragment = transform(fragment);\r\n    }\r\n    return new Igloo.Program(this.gl, vertex, fragment);\r\n};\r\n\r\n/**\r\n * Create a new GL_ARRAY_BUFFER with optional data.\r\n * @param {ArrayBuffer|ArrayBufferView} [data]\r\n * @param {GLenum} [usage]\r\n * @returns {Igloo.Buffer}\r\n */\r\nIgloo.prototype.array = function(data, usage) {\r\n    var gl = this.gl,\r\n        buffer = new Igloo.Buffer(gl, gl.ARRAY_BUFFER);\r\n    if (data != null) {\r\n        buffer.update(data, usage == null ? gl.STATIC_DRAW : usage);\r\n    }\r\n    return buffer;\r\n};\r\n\r\n/**\r\n * Create a new GL_ELEMENT_ARRAY_BUFFER with optional data.\r\n * @param {ArrayBuffer|ArrayBufferView} [data]\r\n * @param {GLenum} [usage]\r\n * @returns {Igloo.Buffer}\r\n */\r\nIgloo.prototype.elements = function(data, usage) {\r\n    var gl = this.gl,\r\n        buffer = new Igloo.Buffer(gl, gl.ELEMENT_ARRAY_BUFFER);\r\n    if (data != null) {\r\n        buffer.update(data, usage == null ? gl.STATIC_DRAW : usage);\r\n    }\r\n    return buffer;\r\n};\r\n\r\n/**\r\n * @param {TexImageSource} [source]\r\n * @param {GLenum} [format=GL_RGBA]\r\n * @param {GLenum} [wrap=GL_CLAMP_TO_EDGE]\r\n * @param {GLenum} [filter=GL_LINEAR]\r\n * @param {GLenum} [type=UNSIGNED_BYTE]\r\n * @param {Object} [options = {type: 'ArrayBufferView', width, height} || {}]\r\n * @returns {Igloo.Texture}\r\n */\r\nIgloo.prototype.texture = function(source, format, wrap, filter, type, options) {\r\n    var texture = new Igloo.Texture(this.gl, format, wrap, filter, type);\r\n    if (source != null) {\r\n        if (options && options.type === 'ArrayBufferView') {\r\n          texture.set(source, options.width, options.height);\r\n        }\r\n        else {\r\n          texture.set(source);\r\n        }\r\n    }\r\n    return texture;\r\n};\r\n\r\n/**\r\n * @param {Igloo.Texture} [texture]\r\n * @returns {Igloo.Framebuffer}\r\n */\r\nIgloo.prototype.framebuffer = function(texture) {\r\n    var framebuffer = new Igloo.Framebuffer(this.gl);\r\n    if (texture != null) framebuffer.attach(texture);\r\n    return framebuffer;\r\n};\r\n\r\n/**\r\n * Fluent WebGLProgram wrapper for managing variables and data. The\r\n * constructor compiles and links a program from a pair of shaders.\r\n * Throws an exception if compiling or linking fails.\r\n * @param {WebGLRenderingContext} gl\r\n * @param {string} vertex Shader source\r\n * @param {string} fragment Shader source\r\n * @constructor\r\n */\r\nIgloo.Program = function(gl, vertex, fragment) {\r\n    this.gl = gl;\r\n    var p = this.program = gl.createProgram();\r\n    gl.attachShader(p, this.makeShader(gl.VERTEX_SHADER, vertex));\r\n    gl.attachShader(p, this.makeShader(gl.FRAGMENT_SHADER, fragment));\r\n    gl.linkProgram(p);\r\n    if (!gl.getProgramParameter(p, gl.LINK_STATUS)) {\r\n        throw new Error(gl.getProgramInfoLog(p));\r\n    }\r\n    this.vars = {};\r\n};\r\n\r\n/**\r\n * Compile a shader from source.\r\n * @param {number} type\r\n * @param {string} source\r\n * @returns {WebGLShader}\r\n */\r\nIgloo.Program.prototype.makeShader = function(type, source) {\r\n    var gl = this.gl;\r\n    var shader = gl.createShader(type);\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n        return shader;\r\n    } else {\r\n        throw new Error(gl.getShaderInfoLog(shader));\r\n    }\r\n};\r\n\r\n/**\r\n * Tell WebGL to use this program right now.\r\n * @returns {Igloo.Program} this\r\n */\r\nIgloo.Program.prototype.use = function() {\r\n    this.gl.useProgram(this.program);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Declare/set a uniform or set a uniform's data.\r\n * @param {string} name uniform variable name\r\n * @param {number|Array|ArrayBufferView} [value]\r\n * @param {boolean} [i] if true use the integer version\r\n * @returns {Igloo.Program} this\r\n */\r\nIgloo.Program.prototype.uniform = function(name, value, i, dim) {\r\n    if (value == null) {\r\n        this.vars[name] = this.gl.getUniformLocation(this.program, name);\r\n    } else {\r\n        if (this.vars[name] == null) this.uniform(name);\r\n        var v = this.vars[name];\r\n        if (Igloo.isArray(value)) {\r\n            var l = dim ? dim : value.length;\r\n            var method = 'uniform' + l + (i ? 'i' : 'f') + 'v';\r\n            this.gl[method](v, value);\r\n        } else if (typeof value === 'number' || typeof value === 'boolean') {\r\n            if (i) {\r\n                this.gl.uniform1i(v, value);\r\n            } else {\r\n                this.gl.uniform1f(v, value);\r\n            }\r\n        } else {\r\n            throw new Error('Invalid uniform value: ' + value);\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Set a uniform's data to a specific matrix.\r\n * @param {string} name uniform variable name\r\n * @param {Array|ArrayBufferView} matrix\r\n * @param {boolean} [transpose=false]\r\n * @returns {Igloo.Program} this\r\n */\r\nIgloo.Program.prototype.matrix = function(name, matrix, transpose) {\r\n    if (this.vars[name] == null) this.uniform(name);\r\n    var method = 'uniformMatrix' + Math.sqrt(matrix.length) + 'fv';\r\n    this.gl[method](this.vars[name], Boolean(transpose), matrix);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Like the uniform() method, but using integers.\r\n * @returns {Igloo.Program} this\r\n */\r\nIgloo.Program.prototype.uniformi = function(name, value) {\r\n    return this.uniform(name, value, true);\r\n};\r\n\r\n/**\r\n * Declare an attrib or set an attrib's buffer.\r\n * @param {string} name attrib variable name\r\n * @param {WebGLBuffer} [value]\r\n * @param {number} [size] element size (required if value is provided)\r\n * @param {number} [stride=0]\r\n * @returns {Igloo.Program} this\r\n */\r\nIgloo.Program.prototype.attrib = function(name, value, size, stride) {\r\n    var gl = this.gl;\r\n    if (value == null) {\r\n        this.vars[name] = gl.getAttribLocation(this.program, name);\r\n    } else {\r\n        if (this.vars[name] == null) this.attrib(name); // get location\r\n        value.bind();\r\n        gl.enableVertexAttribArray(this.vars[name]);\r\n        gl.vertexAttribPointer(this.vars[name], size, gl.FLOAT,\r\n                               false, stride == null ? 0 : stride, 0);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Call glDrawArrays or glDrawElements with this program.\r\n * @param {number} mode\r\n * @param {number} count the number of vertex attribs to render\r\n * @param {GLenum} [type] use glDrawElements of this type\r\n * @returns {Igloo.Program} this\r\n */\r\nIgloo.Program.prototype.draw = function(mode, count, type) {\r\n    var gl = this.gl;\r\n    if (type == null) {\r\n        gl.drawArrays(mode, 0, count);\r\n    } else {\r\n        gl.drawElements(mode, count, type, 0);\r\n    }\r\n    if (gl.getError() !== gl.NO_ERROR) {\r\n        throw new Error('WebGL rendering error');\r\n    }\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Disables all attribs from this program.\r\n * @returns {Igloo.Program} this\r\n */\r\nIgloo.Program.prototype.disable = function() {\r\n    for (var attrib in this.vars) {\r\n        var location = this.vars[attrib];\r\n        if (this.vars.hasOwnProperty(attrib)) {\r\n            if (typeof location === 'number') {\r\n                this.gl.disableVertexAttribArray(location);\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Fluent WebGLBuffer wrapper.\r\n * @param {WebGLRenderingContext} gl\r\n * @param {GLenum} [target] either GL_ARRAY_BUFFER or GL_ELEMENT_ARRAY_BUFFER\r\n * @returns {WebGLProgram}\r\n * @constructor\r\n */\r\nIgloo.Buffer = function(gl, target) {\r\n    this.gl = gl;\r\n    this.buffer = gl.createBuffer();\r\n    this.target = (target == null ? gl.ARRAY_BUFFER : target);\r\n    this.size = -1;\r\n};\r\n\r\n/**\r\n * Binds this buffer to ARRAY_BUFFER.\r\n * @returns {Igloo.Buffer} this\r\n */\r\nIgloo.Buffer.prototype.bind = function() {\r\n    this.gl.bindBuffer(this.target, this.buffer);\r\n    return this;\r\n};\r\n\r\n/**\r\n * @param\r\n * @param {ArrayBuffer|ArrayBufferView} data\r\n * @param {GLenum} [usage]\r\n * @returns {Igloo.Buffer} this\r\n */\r\nIgloo.Buffer.prototype.update = function(data, usage) {\r\n    var gl = this.gl;\r\n    if (data instanceof Array) {\r\n        data = new Float32Array(data);\r\n    }\r\n    usage = usage == null ? gl.DYNAMIC_DRAW : usage;\r\n    this.bind();\r\n    if (this.size !== data.byteLength) {\r\n        gl.bufferData(this.target, data, usage);\r\n        this.size = data.byteLength;\r\n    } else {\r\n        gl.bufferSubData(this.target, 0, data);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Create a new texture, optionally filled blank.\r\n * @param {WebGLRenderingContext} gl\r\n * @param {GLenum} [format=GL_RGBA]\r\n * @param {GLenum} [wrap=GL_CLAMP_TO_EDGE]\r\n * @param {GLenum} [filter=GL_LINEAR]\r\n * @param {GLenum} [type=UNSIGNED_BYTE]\r\n * @returns {Igloo.Texture}\r\n */\r\nIgloo.Texture = function(gl, format, wrap, filter, type) {\r\n    this.gl = gl;\r\n    var texture = this.texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    wrap = wrap == null ? gl.CLAMP_TO_EDGE : wrap;\r\n    filter = filter == null ? gl.LINEAR : filter;\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrap);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrap);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\r\n    this.format = format == null ? gl.RGBA : format;\r\n    this.type = type == null ? gl.UNSIGNED_BYTE : type;\r\n};\r\n\r\n/**\r\n * @param {number} [unit] active texture unit to bind\r\n * @returns {Igloo.Texture}\r\n */\r\nIgloo.Texture.prototype.bind = function(unit) {\r\n    var gl = this.gl;\r\n    if (unit != null) {\r\n        gl.activeTexture(gl.TEXTURE0 + unit);\r\n    }\r\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Set texture to particular size, filled with vec4(0, 0, 0, 1).\r\n * @param {number} width\r\n * @param {number} height\r\n * @returns {Igloo.Texture}\r\n */\r\nIgloo.Texture.prototype.blank = function(width, height) {\r\n    var gl = this.gl;\r\n    this.bind();\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, this.format, width, height,\r\n                  0, this.format, this.type, null);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Set the texture to a particular image.\r\n * @param {Array|ArrayBufferView|TexImageSource} source\r\n * @param {number} [width]\r\n * @param {number} [height]\r\n * @returns {Igloo.Texture}\r\n */\r\nIgloo.Texture.prototype.set = function(source, width, height) {\r\n    var gl = this.gl;\r\n    this.bind();\r\n    if (source instanceof Array) {\r\n        if (this.type == gl.FLOAT) {\r\n            source = new Float32Array(source);\r\n        } else {\r\n            source = new Uint8Array(source);\r\n        }\r\n    }\r\n    if (width != null || height != null) {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, this.format,\r\n                      width, height, 0, this.format,\r\n                      this.type, source);\r\n    } else {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, this.format,\r\n                      this.format, this.type, source);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Set part of the texture to a particular image.\r\n * @param {Array|ArrayBufferView|TexImageSource} source\r\n * @param {number} xoff\r\n * @param {number} yoff\r\n * @param {number} [width]\r\n * @param {number} [height]\r\n * @returns {Igloo.Texture}\r\n */\r\nIgloo.Texture.prototype.subset = function(source, xoff, yoff, width, height) {\r\n    var gl = this.gl;\r\n    this.bind();\r\n    if (source instanceof Array) {\r\n        if (this.type == gl.FLOAT) {\r\n            source = new Float32Array(source);\r\n        } else {\r\n            source = new Uint8Array(source);\r\n        }\r\n    }\r\n    if (width != null || height != null) {\r\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, xoff, yoff,\r\n                         width, height,\r\n                         this.format, this.type, source);\r\n    } else {\r\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, xoff, yoff,\r\n                         this.format, this.type, source);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Copy part/all of the current framebuffer to this image.\r\n * @param {Array|ArrayBufferView|TexImageSource} source\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {number} width\r\n * @param {number} height\r\n * @returns {Igloo.Texture}\r\n */\r\nIgloo.Texture.prototype.copy = function(x, y, width, height) {\r\n    var gl = this.gl;\r\n    gl.copyTexImage2D(gl.TEXTURE_2D, 0, this.format, x, y, width, height, 0);\r\n    return this;\r\n};\r\n\r\n/**\r\n * @param {WebGLRenderingContext} gl\r\n * @param {WebGLFramebuffer} [framebuffer] to be wrapped (null for default)\r\n * @returns {Igloo.Framebuffer}\r\n */\r\nIgloo.Framebuffer = function(gl, framebuffer) {\r\n    this.gl = gl;\r\n    this.framebuffer =\r\n        arguments.length == 2 ? framebuffer : gl.createFramebuffer();\r\n    this.renderbuffer = null;\r\n};\r\n\r\n/**\r\n * @returns {Igloo.Framebuffer}\r\n */\r\nIgloo.Framebuffer.prototype.bind = function() {\r\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.framebuffer);\r\n    return this;\r\n};\r\n\r\n/**\r\n * @returns {Igloo.Framebuffer}\r\n */\r\nIgloo.Framebuffer.prototype.unbind = function() {\r\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\r\n    return this;\r\n};\r\n\r\n/**\r\n * @param {Igloo.Texture} texture\r\n * @returns {Igloo.Framebuffer}\r\n */\r\nIgloo.Framebuffer.prototype.attach = function(texture) {\r\n    var gl = this.gl;\r\n    this.bind();\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,\r\n                            gl.TEXTURE_2D, texture.texture, 0);\r\n    return this;\r\n};\r\n\r\n/**\r\n * @param {Igloo.Texture} array of textures\r\n * @returns {Igloo.Framebuffer}\r\n */\r\nIgloo.Framebuffer.prototype.attachArr = function(textures) {\r\n    var gl = this.gl;\r\n    var ext = gl.getExtension('WEBGL_draw_buffers');\r\n    var attachIdx = 0;\r\n    var arr = [];\r\n\r\n    this.bind();\r\n    textures.forEach(function(texture) {\r\n      var attachIdxStr = 'COLOR_ATTACHMENT' + attachIdx +'_WEBGL';\r\n      attachIdx += 1;\r\n      arr.push(ext[attachIdxStr]);\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, ext[attachIdxStr],\r\n                              gl.TEXTURE_2D, texture.texture, 0);\r\n    });\r\n\r\n    console.log('attachArr');\r\n    console.log(arr);\r\n    ext.drawBuffersWEBGL(arr);\r\n\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Attach a renderbuffer as a depth buffer for depth-tested rendering.\r\n * @param {number} width\r\n * @param {number} height\r\n * @returns {Igloo.Framebuffer}\r\n */\r\nIgloo.Framebuffer.prototype.attachDepth = function(width, height) {\r\n    var gl = this.gl;\r\n    this.bind();\r\n    if (this.renderbuffer == null) {\r\n        this.renderbuffer = gl.createRenderbuffer();\r\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16,\r\n                               width, height);\r\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT,\r\n                                   gl.RENDERBUFFER, this.renderbuffer);\r\n    }\r\n    return this;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/igloo.js\n");

/***/ }),

/***/ "./src/imageUtils.js":
/*!***************************!*\
  !*** ./src/imageUtils.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"loadImageByFile\": () => (/* binding */ loadImageByFile),\n/* harmony export */   \"loadImageByUrl\": () => (/* binding */ loadImageByUrl),\n/* harmony export */   \"loadImageFromCanvas\": () => (/* binding */ loadImageFromCanvas),\n/* harmony export */   \"resizeImage\": () => (/* binding */ resizeImage)\n/* harmony export */ });\n/* harmony import */ var pica__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pica */ \"./node_modules/pica/dist/pica.js\");\n/* harmony import */ var pica__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pica__WEBPACK_IMPORTED_MODULE_0__);\n\r\n \r\n\r\nfunction loadImageByUrl(url) {\r\n    return new Promise(resolve => {\r\n        let i = new Image();\r\n        i.onload = (() => resolve(i));\r\n        i.src = url;\r\n    });\r\n}\r\n\r\nfunction loadImageByFile(file) {\r\n    return new Promise(resolve => {\r\n        let reader = new FileReader();\r\n\r\n        reader.readAsDataURL(file);\r\n\r\n        reader.onload = async () => {\r\n            const res = await loadImageByUrl(reader.result)\r\n            resolve(res)\r\n        };\r\n    })\r\n}\r\n\r\nasync function loadImageFromCanvas(canvas) {\r\n    const url = canvas.toDataURL();\r\n    return await loadImageByUrl(url);\r\n}\r\n\r\nasync function resizeImage(img, w, h) {\r\n    var canvas = document.createElement('canvas');\r\n    canvas.width = w;\r\n    canvas.height = h;\r\n\r\n    const p = new (pica__WEBPACK_IMPORTED_MODULE_0___default())();\r\n    await p.resize(img, canvas);\r\n\r\n    return await loadImageFromCanvas(canvas)\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW1hZ2VVdGlscy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUN1QjtBQUN2QjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw2Q0FBSTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9pbWFnZVV0aWxzLmpzPzA0MzQiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCBQaWNhIGZyb20gJ3BpY2EnIFxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRJbWFnZUJ5VXJsKHVybCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgIGxldCBpID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgaS5vbmxvYWQgPSAoKCkgPT4gcmVzb2x2ZShpKSk7XHJcbiAgICAgICAgaS5zcmMgPSB1cmw7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRJbWFnZUJ5RmlsZShmaWxlKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgbGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcblxyXG4gICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xyXG5cclxuICAgICAgICByZWFkZXIub25sb2FkID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBsb2FkSW1hZ2VCeVVybChyZWFkZXIucmVzdWx0KVxyXG4gICAgICAgICAgICByZXNvbHZlKHJlcylcclxuICAgICAgICB9O1xyXG4gICAgfSlcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRJbWFnZUZyb21DYW52YXMoY2FudmFzKSB7XHJcbiAgICBjb25zdCB1cmwgPSBjYW52YXMudG9EYXRhVVJMKCk7XHJcbiAgICByZXR1cm4gYXdhaXQgbG9hZEltYWdlQnlVcmwodXJsKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlc2l6ZUltYWdlKGltZywgdywgaCkge1xyXG4gICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgY2FudmFzLndpZHRoID0gdztcclxuICAgIGNhbnZhcy5oZWlnaHQgPSBoO1xyXG5cclxuICAgIGNvbnN0IHAgPSBuZXcgUGljYSgpO1xyXG4gICAgYXdhaXQgcC5yZXNpemUoaW1nLCBjYW52YXMpO1xyXG5cclxuICAgIHJldHVybiBhd2FpdCBsb2FkSW1hZ2VGcm9tQ2FudmFzKGNhbnZhcylcclxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/imageUtils.js\n");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _imageUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imageUtils.js */ \"./src/imageUtils.js\");\n/* harmony import */ var _canvasController_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canvasController.js */ \"./src/canvasController.js\");\n/* harmony import */ var _fft_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fft.js */ \"./src/fft.js\");\n\r\n\r\n\r\n\r\nif (document.readyState === \"complete\" ||\r\n    (document.readyState !== \"loading\" && !document.documentElement.doScroll)) {\r\n    main();\r\n} else {\r\n    document.addEventListener(\"DOMContentLoaded\", main);\r\n}\r\n\r\nfunction getElementsWithId() {\r\n\r\n    const res = {}\r\n    const elems = document.querySelectorAll('[id]')\r\n\r\n    for (const el of elems)\r\n        res[el.id] = el\r\n\r\n\r\n    return res;\r\n}\r\n\r\nasync function setImage(input, ctrl) {\r\n\r\n    const file = input.files[0];\r\n    let img = await (0,_imageUtils_js__WEBPACK_IMPORTED_MODULE_0__.loadImageByFile)(file);\r\n    img = await (0,_imageUtils_js__WEBPACK_IMPORTED_MODULE_0__.resizeImage)(img, 512, 512);\r\n\r\n    ctrl.setImage(img);\r\n}\r\n\r\nfunction main() {\r\n    const elems = getElementsWithId();\r\n\r\n    const spaceCtrl = new _canvasController_js__WEBPACK_IMPORTED_MODULE_1__.CanvasController(elems.space);\r\n    const magnitudeCtrl = new _canvasController_js__WEBPACK_IMPORTED_MODULE_1__.CanvasController(elems.magnitude);\r\n    const phaseCtrl = new _canvasController_js__WEBPACK_IMPORTED_MODULE_1__.CanvasController(elems.phase);\r\n\r\n    const forwardFourier = () => {\r\n        const arr = spaceCtrl.getArray();\r\n        const res = (0,_fft_js__WEBPACK_IMPORTED_MODULE_2__.fftPixelData)(arr, 512, 512);\r\n\r\n        magnitudeCtrl.setImage(res.magnitude, 512, 512);\r\n        magnitudeCtrl.shift(256, 256);\r\n\r\n        phaseCtrl.setImage(res.phase, 512, 512);\r\n        phaseCtrl.shift(256, 256);\r\n\r\n    }\r\n\r\n    spaceCtrl.drawHook = () => {\r\n        forwardFourier();\r\n    }\r\n\r\n    elems.space_input.onchange = async () => {\r\n        await setImage(elems.space_input, spaceCtrl);\r\n        spaceCtrl.sync();\r\n        forwardFourier();\r\n    }\r\n\r\n    elems.magnitude_input.onchange = async () => {\r\n        await setImage(elems.magnitude_input, magnitudeCtrl);\r\n    }\r\n\r\n    elems.phase_input.onchange = async () => {\r\n        await setImage(elems.phase_input, phaseCtrl);\r\n    }\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWFpbi5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQThEO0FBQ047QUFDakI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLCtEQUFlO0FBQ25DLGdCQUFnQiwyREFBVztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixrRUFBZ0I7QUFDMUMsOEJBQThCLGtFQUFnQjtBQUM5QywwQkFBMEIsa0VBQWdCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxREFBWTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz81NmQ3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvYWRJbWFnZUJ5RmlsZSwgcmVzaXplSW1hZ2UgfSBmcm9tICcuL2ltYWdlVXRpbHMuanMnXHJcbmltcG9ydCB7IENhbnZhc0NvbnRyb2xsZXIgfSBmcm9tICcuL2NhbnZhc0NvbnRyb2xsZXIuanMnXHJcbmltcG9ydCB7IGZmdFBpeGVsRGF0YSB9IGZyb20gJy4vZmZ0LmpzJ1xyXG5cclxuaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxyXG4gICAgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwpKSB7XHJcbiAgICBtYWluKCk7XHJcbn0gZWxzZSB7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBtYWluKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0RWxlbWVudHNXaXRoSWQoKSB7XHJcblxyXG4gICAgY29uc3QgcmVzID0ge31cclxuICAgIGNvbnN0IGVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2lkXScpXHJcblxyXG4gICAgZm9yIChjb25zdCBlbCBvZiBlbGVtcylcclxuICAgICAgICByZXNbZWwuaWRdID0gZWxcclxuXHJcblxyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gc2V0SW1hZ2UoaW5wdXQsIGN0cmwpIHtcclxuXHJcbiAgICBjb25zdCBmaWxlID0gaW5wdXQuZmlsZXNbMF07XHJcbiAgICBsZXQgaW1nID0gYXdhaXQgbG9hZEltYWdlQnlGaWxlKGZpbGUpO1xyXG4gICAgaW1nID0gYXdhaXQgcmVzaXplSW1hZ2UoaW1nLCA1MTIsIDUxMik7XHJcblxyXG4gICAgY3RybC5zZXRJbWFnZShpbWcpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYWluKCkge1xyXG4gICAgY29uc3QgZWxlbXMgPSBnZXRFbGVtZW50c1dpdGhJZCgpO1xyXG5cclxuICAgIGNvbnN0IHNwYWNlQ3RybCA9IG5ldyBDYW52YXNDb250cm9sbGVyKGVsZW1zLnNwYWNlKTtcclxuICAgIGNvbnN0IG1hZ25pdHVkZUN0cmwgPSBuZXcgQ2FudmFzQ29udHJvbGxlcihlbGVtcy5tYWduaXR1ZGUpO1xyXG4gICAgY29uc3QgcGhhc2VDdHJsID0gbmV3IENhbnZhc0NvbnRyb2xsZXIoZWxlbXMucGhhc2UpO1xyXG5cclxuICAgIGNvbnN0IGZvcndhcmRGb3VyaWVyID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFyciA9IHNwYWNlQ3RybC5nZXRBcnJheSgpO1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IGZmdFBpeGVsRGF0YShhcnIsIDUxMiwgNTEyKTtcclxuXHJcbiAgICAgICAgbWFnbml0dWRlQ3RybC5zZXRJbWFnZShyZXMubWFnbml0dWRlLCA1MTIsIDUxMik7XHJcbiAgICAgICAgbWFnbml0dWRlQ3RybC5zaGlmdCgyNTYsIDI1Nik7XHJcblxyXG4gICAgICAgIHBoYXNlQ3RybC5zZXRJbWFnZShyZXMucGhhc2UsIDUxMiwgNTEyKTtcclxuICAgICAgICBwaGFzZUN0cmwuc2hpZnQoMjU2LCAyNTYpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBzcGFjZUN0cmwuZHJhd0hvb2sgPSAoKSA9PiB7XHJcbiAgICAgICAgZm9yd2FyZEZvdXJpZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBlbGVtcy5zcGFjZV9pbnB1dC5vbmNoYW5nZSA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICBhd2FpdCBzZXRJbWFnZShlbGVtcy5zcGFjZV9pbnB1dCwgc3BhY2VDdHJsKTtcclxuICAgICAgICBzcGFjZUN0cmwuc3luYygpO1xyXG4gICAgICAgIGZvcndhcmRGb3VyaWVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZWxlbXMubWFnbml0dWRlX2lucHV0Lm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGF3YWl0IHNldEltYWdlKGVsZW1zLm1hZ25pdHVkZV9pbnB1dCwgbWFnbml0dWRlQ3RybCk7XHJcbiAgICB9XHJcblxyXG4gICAgZWxlbXMucGhhc2VfaW5wdXQub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgYXdhaXQgc2V0SW1hZ2UoZWxlbXMucGhhc2VfaW5wdXQsIHBoYXNlQ3RybCk7XHJcbiAgICB9XHJcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.js");
/******/ 	
/******/ })()
;