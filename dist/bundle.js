/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/pica/dist/pica.js":
/*!****************************************!*\
  !*** ./node_modules/pica/dist/pica.js ***!
  \****************************************/
/***/ ((module) => {

eval("/*!\n\npica\nhttps://github.com/nodeca/pica\n\n*/\n(function (f) {\n  if (true) {\n    module.exports = f();\n  } else { var g; }\n})(function () {\n  var define, module, exports;\n  return function () {\n    function r(e, n, t) {\n      function o(i, f) {\n        if (!n[i]) {\n          if (!e[i]) {\n            var c = undefined;\n            if (!f && c) return require(i, !0);\n            if (u) return u(i, !0);\n            var a = new Error(\"Cannot find module '\" + i + \"'\");\n            throw a.code = \"MODULE_NOT_FOUND\", a;\n          }\n\n          var p = n[i] = {\n            exports: {}\n          };\n          e[i][0].call(p.exports, function (r) {\n            var n = e[i][1][r];\n            return o(n || r);\n          }, p, p.exports, r, e, n, t);\n        }\n\n        return n[i].exports;\n      }\n\n      for (var u = undefined, i = 0; i < t.length; i++) o(t[i]);\n\n      return o;\n    }\n\n    return r;\n  }()({\n    1: [function (_dereq_, module, exports) {\n      // Collection of math functions\n      //\n      // 1. Combine components together\n      // 2. Has async init to load wasm modules\n      //\n      'use strict';\n\n      var Multimath = _dereq_('multimath');\n\n      var mm_unsharp_mask = _dereq_('./mm_unsharp_mask');\n\n      var mm_resize = _dereq_('./mm_resize');\n\n      function MathLib(requested_features) {\n        var __requested_features = requested_features || [];\n\n        var features = {\n          js: __requested_features.indexOf('js') >= 0,\n          wasm: __requested_features.indexOf('wasm') >= 0\n        };\n        Multimath.call(this, features);\n        this.features = {\n          js: features.js,\n          wasm: features.wasm && this.has_wasm()\n        };\n        this.use(mm_unsharp_mask);\n        this.use(mm_resize);\n      }\n\n      MathLib.prototype = Object.create(Multimath.prototype);\n      MathLib.prototype.constructor = MathLib;\n\n      MathLib.prototype.resizeAndUnsharp = function resizeAndUnsharp(options, cache) {\n        var result = this.resize(options, cache);\n\n        if (options.unsharpAmount) {\n          this.unsharp_mask(result, options.toWidth, options.toHeight, options.unsharpAmount, options.unsharpRadius, options.unsharpThreshold);\n        }\n\n        return result;\n      };\n\n      module.exports = MathLib;\n    }, {\n      \"./mm_resize\": 4,\n      \"./mm_unsharp_mask\": 9,\n      \"multimath\": 19\n    }],\n    2: [function (_dereq_, module, exports) {\n      // Resize convolvers, pure JS implementation\n      //\n      'use strict'; // Precision of fixed FP values\n      //var FIXED_FRAC_BITS = 14;\n\n      function clampTo8(i) {\n        return i < 0 ? 0 : i > 255 ? 255 : i;\n      }\n\n      function clampNegative(i) {\n        return i >= 0 ? i : 0;\n      } // Convolve image data in horizontal direction. Can be used for:\n      //\n      // 1. bitmap with premultiplied alpha\n      // 2. bitmap without alpha (all values 255)\n      //\n      // Notes:\n      //\n      // - output is transposed\n      // - output resolution is ~15 bits per channel(for better precision).\n      //\n\n\n      function convolveHor(src, dest, srcW, srcH, destW, filters) {\n        var r, g, b, a;\n        var filterPtr, filterShift, filterSize;\n        var srcPtr, srcY, destX, filterVal;\n        var srcOffset = 0,\n            destOffset = 0; // For each row\n\n        for (srcY = 0; srcY < srcH; srcY++) {\n          filterPtr = 0; // Apply precomputed filters to each destination row point\n\n          for (destX = 0; destX < destW; destX++) {\n            // Get the filter that determines the current output pixel.\n            filterShift = filters[filterPtr++];\n            filterSize = filters[filterPtr++];\n            srcPtr = srcOffset + filterShift * 4 | 0;\n            r = g = b = a = 0; // Apply the filter to the row to get the destination pixel r, g, b, a\n\n            for (; filterSize > 0; filterSize--) {\n              filterVal = filters[filterPtr++]; // Use reverse order to workaround deopts in old v8 (node v.10)\n              // Big thanks to @mraleph (Vyacheslav Egorov) for the tip.\n\n              a = a + filterVal * src[srcPtr + 3] | 0;\n              b = b + filterVal * src[srcPtr + 2] | 0;\n              g = g + filterVal * src[srcPtr + 1] | 0;\n              r = r + filterVal * src[srcPtr] | 0;\n              srcPtr = srcPtr + 4 | 0;\n            } // Store 15 bits between passes for better precision\n            // Instead of shift to 14 (FIXED_FRAC_BITS), shift to 7 only\n            //\n\n\n            dest[destOffset + 3] = clampNegative(a >> 7);\n            dest[destOffset + 2] = clampNegative(b >> 7);\n            dest[destOffset + 1] = clampNegative(g >> 7);\n            dest[destOffset] = clampNegative(r >> 7);\n            destOffset = destOffset + srcH * 4 | 0;\n          }\n\n          destOffset = (srcY + 1) * 4 | 0;\n          srcOffset = (srcY + 1) * srcW * 4 | 0;\n        }\n      } // Supplementary method for `convolveHor()`\n      //\n\n\n      function convolveVert(src, dest, srcW, srcH, destW, filters) {\n        var r, g, b, a;\n        var filterPtr, filterShift, filterSize;\n        var srcPtr, srcY, destX, filterVal;\n        var srcOffset = 0,\n            destOffset = 0; // For each row\n\n        for (srcY = 0; srcY < srcH; srcY++) {\n          filterPtr = 0; // Apply precomputed filters to each destination row point\n\n          for (destX = 0; destX < destW; destX++) {\n            // Get the filter that determines the current output pixel.\n            filterShift = filters[filterPtr++];\n            filterSize = filters[filterPtr++];\n            srcPtr = srcOffset + filterShift * 4 | 0;\n            r = g = b = a = 0; // Apply the filter to the row to get the destination pixel r, g, b, a\n\n            for (; filterSize > 0; filterSize--) {\n              filterVal = filters[filterPtr++]; // Use reverse order to workaround deopts in old v8 (node v.10)\n              // Big thanks to @mraleph (Vyacheslav Egorov) for the tip.\n\n              a = a + filterVal * src[srcPtr + 3] | 0;\n              b = b + filterVal * src[srcPtr + 2] | 0;\n              g = g + filterVal * src[srcPtr + 1] | 0;\n              r = r + filterVal * src[srcPtr] | 0;\n              srcPtr = srcPtr + 4 | 0;\n            } // Sync with premultiplied version for exact result match\n\n\n            r >>= 7;\n            g >>= 7;\n            b >>= 7;\n            a >>= 7; // Bring this value back in range + round result.\n            //\n\n            dest[destOffset + 3] = clampTo8(a + (1 << 13) >> 14);\n            dest[destOffset + 2] = clampTo8(b + (1 << 13) >> 14);\n            dest[destOffset + 1] = clampTo8(g + (1 << 13) >> 14);\n            dest[destOffset] = clampTo8(r + (1 << 13) >> 14);\n            destOffset = destOffset + srcH * 4 | 0;\n          }\n\n          destOffset = (srcY + 1) * 4 | 0;\n          srcOffset = (srcY + 1) * srcW * 4 | 0;\n        }\n      } // Premultiply & convolve image data in horizontal direction. Can be used for:\n      //\n      // - Any bitmap data, extracted with `.getImageData()` method (with\n      //   non-premultiplied alpha)\n      //\n      // For images without alpha channel this method is slower than `convolveHor()`\n      //\n\n\n      function convolveHorWithPre(src, dest, srcW, srcH, destW, filters) {\n        var r, g, b, a, alpha;\n        var filterPtr, filterShift, filterSize;\n        var srcPtr, srcY, destX, filterVal;\n        var srcOffset = 0,\n            destOffset = 0; // For each row\n\n        for (srcY = 0; srcY < srcH; srcY++) {\n          filterPtr = 0; // Apply precomputed filters to each destination row point\n\n          for (destX = 0; destX < destW; destX++) {\n            // Get the filter that determines the current output pixel.\n            filterShift = filters[filterPtr++];\n            filterSize = filters[filterPtr++];\n            srcPtr = srcOffset + filterShift * 4 | 0;\n            r = g = b = a = 0; // Apply the filter to the row to get the destination pixel r, g, b, a\n\n            for (; filterSize > 0; filterSize--) {\n              filterVal = filters[filterPtr++]; // Use reverse order to workaround deopts in old v8 (node v.10)\n              // Big thanks to @mraleph (Vyacheslav Egorov) for the tip.\n\n              alpha = src[srcPtr + 3];\n              a = a + filterVal * alpha | 0;\n              b = b + filterVal * src[srcPtr + 2] * alpha | 0;\n              g = g + filterVal * src[srcPtr + 1] * alpha | 0;\n              r = r + filterVal * src[srcPtr] * alpha | 0;\n              srcPtr = srcPtr + 4 | 0;\n            } // Premultiply is (* alpha / 255).\n            // Postpone division for better performance\n\n\n            b = b / 255 | 0;\n            g = g / 255 | 0;\n            r = r / 255 | 0; // Store 15 bits between passes for better precision\n            // Instead of shift to 14 (FIXED_FRAC_BITS), shift to 7 only\n            //\n\n            dest[destOffset + 3] = clampNegative(a >> 7);\n            dest[destOffset + 2] = clampNegative(b >> 7);\n            dest[destOffset + 1] = clampNegative(g >> 7);\n            dest[destOffset] = clampNegative(r >> 7);\n            destOffset = destOffset + srcH * 4 | 0;\n          }\n\n          destOffset = (srcY + 1) * 4 | 0;\n          srcOffset = (srcY + 1) * srcW * 4 | 0;\n        }\n      } // Supplementary method for `convolveHorWithPre()`\n      //\n\n\n      function convolveVertWithPre(src, dest, srcW, srcH, destW, filters) {\n        var r, g, b, a;\n        var filterPtr, filterShift, filterSize;\n        var srcPtr, srcY, destX, filterVal;\n        var srcOffset = 0,\n            destOffset = 0; // For each row\n\n        for (srcY = 0; srcY < srcH; srcY++) {\n          filterPtr = 0; // Apply precomputed filters to each destination row point\n\n          for (destX = 0; destX < destW; destX++) {\n            // Get the filter that determines the current output pixel.\n            filterShift = filters[filterPtr++];\n            filterSize = filters[filterPtr++];\n            srcPtr = srcOffset + filterShift * 4 | 0;\n            r = g = b = a = 0; // Apply the filter to the row to get the destination pixel r, g, b, a\n\n            for (; filterSize > 0; filterSize--) {\n              filterVal = filters[filterPtr++]; // Use reverse order to workaround deopts in old v8 (node v.10)\n              // Big thanks to @mraleph (Vyacheslav Egorov) for the tip.\n\n              a = a + filterVal * src[srcPtr + 3] | 0;\n              b = b + filterVal * src[srcPtr + 2] | 0;\n              g = g + filterVal * src[srcPtr + 1] | 0;\n              r = r + filterVal * src[srcPtr] | 0;\n              srcPtr = srcPtr + 4 | 0;\n            } // Downscale to leave room for un-premultiply\n\n\n            r >>= 7;\n            g >>= 7;\n            b >>= 7;\n            a >>= 7; // Un-premultiply\n\n            a = clampTo8(a + (1 << 13) >> 14);\n\n            if (a > 0) {\n              r = r * 255 / a | 0;\n              g = g * 255 / a | 0;\n              b = b * 255 / a | 0;\n            } // Bring this value back in range + round result.\n            // Shift value = FIXED_FRAC_BITS + 7\n            //\n\n\n            dest[destOffset + 3] = a;\n            dest[destOffset + 2] = clampTo8(b + (1 << 13) >> 14);\n            dest[destOffset + 1] = clampTo8(g + (1 << 13) >> 14);\n            dest[destOffset] = clampTo8(r + (1 << 13) >> 14);\n            destOffset = destOffset + srcH * 4 | 0;\n          }\n\n          destOffset = (srcY + 1) * 4 | 0;\n          srcOffset = (srcY + 1) * srcW * 4 | 0;\n        }\n      }\n\n      module.exports = {\n        convolveHor: convolveHor,\n        convolveVert: convolveVert,\n        convolveHorWithPre: convolveHorWithPre,\n        convolveVertWithPre: convolveVertWithPre\n      };\n    }, {}],\n    3: [function (_dereq_, module, exports) {\n      // This is autogenerated file from math.wasm, don't edit.\n      //\n      'use strict';\n      /* eslint-disable max-len */\n\n      module.exports = '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';\n    }, {}],\n    4: [function (_dereq_, module, exports) {\n      'use strict';\n\n      module.exports = {\n        name: 'resize',\n        fn: _dereq_('./resize'),\n        wasm_fn: _dereq_('./resize_wasm'),\n        wasm_src: _dereq_('./convolve_wasm_base64')\n      };\n    }, {\n      \"./convolve_wasm_base64\": 3,\n      \"./resize\": 5,\n      \"./resize_wasm\": 8\n    }],\n    5: [function (_dereq_, module, exports) {\n      'use strict';\n\n      var createFilters = _dereq_('./resize_filter_gen');\n\n      var _require = _dereq_('./convolve'),\n          convolveHor = _require.convolveHor,\n          convolveVert = _require.convolveVert,\n          convolveHorWithPre = _require.convolveHorWithPre,\n          convolveVertWithPre = _require.convolveVertWithPre;\n\n      function hasAlpha(src, width, height) {\n        var ptr = 3,\n            len = width * height * 4 | 0;\n\n        while (ptr < len) {\n          if (src[ptr] !== 255) return true;\n          ptr = ptr + 4 | 0;\n        }\n\n        return false;\n      }\n\n      function resetAlpha(dst, width, height) {\n        var ptr = 3,\n            len = width * height * 4 | 0;\n\n        while (ptr < len) {\n          dst[ptr] = 0xFF;\n          ptr = ptr + 4 | 0;\n        }\n      }\n\n      module.exports = function resize(options) {\n        var src = options.src;\n        var srcW = options.width;\n        var srcH = options.height;\n        var destW = options.toWidth;\n        var destH = options.toHeight;\n        var scaleX = options.scaleX || options.toWidth / options.width;\n        var scaleY = options.scaleY || options.toHeight / options.height;\n        var offsetX = options.offsetX || 0;\n        var offsetY = options.offsetY || 0;\n        var dest = options.dest || new Uint8Array(destW * destH * 4);\n        var filter = typeof options.filter === 'undefined' ? 'mks2013' : options.filter;\n        var filtersX = createFilters(filter, srcW, destW, scaleX, offsetX),\n            filtersY = createFilters(filter, srcH, destH, scaleY, offsetY);\n        var tmp = new Uint16Array(destW * srcH * 4); // Autodetect if alpha channel exists, and use appropriate method\n\n        if (hasAlpha(src, srcW, srcH)) {\n          convolveHorWithPre(src, tmp, srcW, srcH, destW, filtersX);\n          convolveVertWithPre(tmp, dest, srcH, destW, destH, filtersY);\n        } else {\n          convolveHor(src, tmp, srcW, srcH, destW, filtersX);\n          convolveVert(tmp, dest, srcH, destW, destH, filtersY);\n          resetAlpha(dest, destW, destH);\n        }\n\n        return dest;\n      };\n    }, {\n      \"./convolve\": 2,\n      \"./resize_filter_gen\": 6\n    }],\n    6: [function (_dereq_, module, exports) {\n      // Calculate convolution filters for each destination point,\n      // and pack data to Int16Array:\n      //\n      // [ shift, length, data..., shift2, length2, data..., ... ]\n      //\n      // - shift - offset in src image\n      // - length - filter length (in src points)\n      // - data - filter values sequence\n      //\n      'use strict';\n\n      var FILTER_INFO = _dereq_('./resize_filter_info'); // Precision of fixed FP values\n\n\n      var FIXED_FRAC_BITS = 14;\n\n      function toFixedPoint(num) {\n        return Math.round(num * ((1 << FIXED_FRAC_BITS) - 1));\n      }\n\n      module.exports = function resizeFilterGen(filter, srcSize, destSize, scale, offset) {\n        var filterFunction = FILTER_INFO.filter[filter].fn;\n        var scaleInverted = 1.0 / scale;\n        var scaleClamped = Math.min(1.0, scale); // For upscale\n        // Filter window (averaging interval), scaled to src image\n\n        var srcWindow = FILTER_INFO.filter[filter].win / scaleClamped;\n        var destPixel, srcPixel, srcFirst, srcLast, filterElementSize, floatFilter, fxpFilter, total, pxl, idx, floatVal, filterTotal, filterVal;\n        var leftNotEmpty, rightNotEmpty, filterShift, filterSize;\n        var maxFilterElementSize = Math.floor((srcWindow + 1) * 2);\n        var packedFilter = new Int16Array((maxFilterElementSize + 2) * destSize);\n        var packedFilterPtr = 0;\n        var slowCopy = !packedFilter.subarray || !packedFilter.set; // For each destination pixel calculate source range and built filter values\n\n        for (destPixel = 0; destPixel < destSize; destPixel++) {\n          // Scaling should be done relative to central pixel point\n          srcPixel = (destPixel + 0.5) * scaleInverted + offset;\n          srcFirst = Math.max(0, Math.floor(srcPixel - srcWindow));\n          srcLast = Math.min(srcSize - 1, Math.ceil(srcPixel + srcWindow));\n          filterElementSize = srcLast - srcFirst + 1;\n          floatFilter = new Float32Array(filterElementSize);\n          fxpFilter = new Int16Array(filterElementSize);\n          total = 0.0; // Fill filter values for calculated range\n\n          for (pxl = srcFirst, idx = 0; pxl <= srcLast; pxl++, idx++) {\n            floatVal = filterFunction((pxl + 0.5 - srcPixel) * scaleClamped);\n            total += floatVal;\n            floatFilter[idx] = floatVal;\n          } // Normalize filter, convert to fixed point and accumulate conversion error\n\n\n          filterTotal = 0;\n\n          for (idx = 0; idx < floatFilter.length; idx++) {\n            filterVal = floatFilter[idx] / total;\n            filterTotal += filterVal;\n            fxpFilter[idx] = toFixedPoint(filterVal);\n          } // Compensate normalization error, to minimize brightness drift\n\n\n          fxpFilter[destSize >> 1] += toFixedPoint(1.0 - filterTotal); //\n          // Now pack filter to useable form\n          //\n          // 1. Trim heading and tailing zero values, and compensate shitf/length\n          // 2. Put all to single array in this format:\n          //\n          //    [ pos shift, data length, value1, value2, value3, ... ]\n          //\n\n          leftNotEmpty = 0;\n\n          while (leftNotEmpty < fxpFilter.length && fxpFilter[leftNotEmpty] === 0) {\n            leftNotEmpty++;\n          }\n\n          if (leftNotEmpty < fxpFilter.length) {\n            rightNotEmpty = fxpFilter.length - 1;\n\n            while (rightNotEmpty > 0 && fxpFilter[rightNotEmpty] === 0) {\n              rightNotEmpty--;\n            }\n\n            filterShift = srcFirst + leftNotEmpty;\n            filterSize = rightNotEmpty - leftNotEmpty + 1;\n            packedFilter[packedFilterPtr++] = filterShift; // shift\n\n            packedFilter[packedFilterPtr++] = filterSize; // size\n\n            if (!slowCopy) {\n              packedFilter.set(fxpFilter.subarray(leftNotEmpty, rightNotEmpty + 1), packedFilterPtr);\n              packedFilterPtr += filterSize;\n            } else {\n              // fallback for old IE < 11, without subarray/set methods\n              for (idx = leftNotEmpty; idx <= rightNotEmpty; idx++) {\n                packedFilter[packedFilterPtr++] = fxpFilter[idx];\n              }\n            }\n          } else {\n            // zero data, write header only\n            packedFilter[packedFilterPtr++] = 0; // shift\n\n            packedFilter[packedFilterPtr++] = 0; // size\n          }\n        }\n\n        return packedFilter;\n      };\n    }, {\n      \"./resize_filter_info\": 7\n    }],\n    7: [function (_dereq_, module, exports) {\n      // Filter definitions to build tables for\n      // resizing convolvers.\n      //\n      // Presets for quality 0..3. Filter functions + window size\n      //\n      'use strict';\n\n      var filter = {\n        // Nearest neibor\n        box: {\n          win: 0.5,\n          fn: function fn(x) {\n            if (x < 0) x = -x;\n            return x < 0.5 ? 1.0 : 0.0;\n          }\n        },\n        // // Hamming\n        hamming: {\n          win: 1.0,\n          fn: function fn(x) {\n            if (x < 0) x = -x;\n\n            if (x >= 1.0) {\n              return 0.0;\n            }\n\n            if (x < 1.19209290E-07) {\n              return 1.0;\n            }\n\n            var xpi = x * Math.PI;\n            return Math.sin(xpi) / xpi * (0.54 + 0.46 * Math.cos(xpi / 1.0));\n          }\n        },\n        // Lanczos, win = 2\n        lanczos2: {\n          win: 2.0,\n          fn: function fn(x) {\n            if (x < 0) x = -x;\n\n            if (x >= 2.0) {\n              return 0.0;\n            }\n\n            if (x < 1.19209290E-07) {\n              return 1.0;\n            }\n\n            var xpi = x * Math.PI;\n            return Math.sin(xpi) / xpi * Math.sin(xpi / 2.0) / (xpi / 2.0);\n          }\n        },\n        // Lanczos, win = 3\n        lanczos3: {\n          win: 3.0,\n          fn: function fn(x) {\n            if (x < 0) x = -x;\n\n            if (x >= 3.0) {\n              return 0.0;\n            }\n\n            if (x < 1.19209290E-07) {\n              return 1.0;\n            }\n\n            var xpi = x * Math.PI;\n            return Math.sin(xpi) / xpi * Math.sin(xpi / 3.0) / (xpi / 3.0);\n          }\n        },\n        // Magic Kernel Sharp 2013, win = 2.5\n        // http://johncostella.com/magic/\n        mks2013: {\n          win: 2.5,\n          fn: function fn(x) {\n            if (x < 0) x = -x;\n\n            if (x >= 2.5) {\n              return 0.0;\n            }\n\n            if (x >= 1.5) {\n              return -0.125 * (x - 2.5) * (x - 2.5);\n            }\n\n            if (x >= 0.5) {\n              return 0.25 * (4 * x * x - 11 * x + 7);\n            }\n\n            return 1.0625 - 1.75 * x * x;\n          }\n        }\n      };\n      module.exports = {\n        filter: filter,\n        // Legacy mapping\n        f2q: {\n          box: 0,\n          hamming: 1,\n          lanczos2: 2,\n          lanczos3: 3\n        },\n        q2f: ['box', 'hamming', 'lanczos2', 'lanczos3']\n      };\n    }, {}],\n    8: [function (_dereq_, module, exports) {\n      'use strict';\n\n      var createFilters = _dereq_('./resize_filter_gen');\n\n      function hasAlpha(src, width, height) {\n        var ptr = 3,\n            len = width * height * 4 | 0;\n\n        while (ptr < len) {\n          if (src[ptr] !== 255) return true;\n          ptr = ptr + 4 | 0;\n        }\n\n        return false;\n      }\n\n      function resetAlpha(dst, width, height) {\n        var ptr = 3,\n            len = width * height * 4 | 0;\n\n        while (ptr < len) {\n          dst[ptr] = 0xFF;\n          ptr = ptr + 4 | 0;\n        }\n      }\n\n      function asUint8Array(src) {\n        return new Uint8Array(src.buffer, 0, src.byteLength);\n      }\n\n      var IS_LE = true; // should not crash everything on module load in old browsers\n\n      try {\n        IS_LE = new Uint32Array(new Uint8Array([1, 0, 0, 0]).buffer)[0] === 1;\n      } catch (__) {}\n\n      function copyInt16asLE(src, target, target_offset) {\n        if (IS_LE) {\n          target.set(asUint8Array(src), target_offset);\n          return;\n        }\n\n        for (var ptr = target_offset, i = 0; i < src.length; i++) {\n          var data = src[i];\n          target[ptr++] = data & 0xFF;\n          target[ptr++] = data >> 8 & 0xFF;\n        }\n      }\n\n      module.exports = function resize_wasm(options) {\n        var src = options.src;\n        var srcW = options.width;\n        var srcH = options.height;\n        var destW = options.toWidth;\n        var destH = options.toHeight;\n        var scaleX = options.scaleX || options.toWidth / options.width;\n        var scaleY = options.scaleY || options.toHeight / options.height;\n        var offsetX = options.offsetX || 0.0;\n        var offsetY = options.offsetY || 0.0;\n        var dest = options.dest || new Uint8Array(destW * destH * 4);\n        var filter = typeof options.filter === 'undefined' ? 'mks2013' : options.filter;\n        var filtersX = createFilters(filter, srcW, destW, scaleX, offsetX),\n            filtersY = createFilters(filter, srcH, destH, scaleY, offsetY); // destination is 0 too.\n\n        var src_offset = 0;\n        var src_size = Math.max(src.byteLength, dest.byteLength); // buffer between convolve passes\n\n        var tmp_offset = this.__align(src_offset + src_size);\n\n        var tmp_size = srcH * destW * 4 * 2; // 2 bytes per channel\n\n        var filtersX_offset = this.__align(tmp_offset + tmp_size);\n\n        var filtersY_offset = this.__align(filtersX_offset + filtersX.byteLength);\n\n        var alloc_bytes = filtersY_offset + filtersY.byteLength;\n\n        var instance = this.__instance('resize', alloc_bytes); //\n        // Fill memory block with data to process\n        //\n\n\n        var mem = new Uint8Array(this.__memory.buffer);\n        var mem32 = new Uint32Array(this.__memory.buffer); // 32-bit copy is much faster in chrome\n\n        var src32 = new Uint32Array(src.buffer);\n        mem32.set(src32); // We should guarantee LE bytes order. Filters are not big, so\n        // speed difference is not significant vs direct .set()\n\n        copyInt16asLE(filtersX, mem, filtersX_offset);\n        copyInt16asLE(filtersY, mem, filtersY_offset); // Now call webassembly method\n        // emsdk does method names with '_'\n\n        var fn = instance.exports.convolveHV || instance.exports._convolveHV;\n\n        if (hasAlpha(src, srcW, srcH)) {\n          fn(filtersX_offset, filtersY_offset, tmp_offset, srcW, srcH, destW, destH, 1);\n        } else {\n          fn(filtersX_offset, filtersY_offset, tmp_offset, srcW, srcH, destW, destH, 0);\n          resetAlpha(dest, destW, destH);\n        } //\n        // Copy data back to typed array\n        //\n        // 32-bit copy is much faster in chrome\n\n\n        var dest32 = new Uint32Array(dest.buffer);\n        dest32.set(new Uint32Array(this.__memory.buffer, 0, destH * destW));\n        return dest;\n      };\n    }, {\n      \"./resize_filter_gen\": 6\n    }],\n    9: [function (_dereq_, module, exports) {\n      'use strict';\n\n      module.exports = {\n        name: 'unsharp_mask',\n        fn: _dereq_('./unsharp_mask'),\n        wasm_fn: _dereq_('./unsharp_mask_wasm'),\n        wasm_src: _dereq_('./unsharp_mask_wasm_base64')\n      };\n    }, {\n      \"./unsharp_mask\": 10,\n      \"./unsharp_mask_wasm\": 11,\n      \"./unsharp_mask_wasm_base64\": 12\n    }],\n    10: [function (_dereq_, module, exports) {\n      // Unsharp mask filter\n      //\n      // http://stackoverflow.com/a/23322820/1031804\n      // USM(O) = O + (2 * (Amount / 100) * (O - GB))\n      // GB - gaussian blur.\n      //\n      // Image is converted from RGB to HSV, unsharp mask is applied to the\n      // brightness channel and then image is converted back to RGB.\n      //\n      'use strict';\n\n      var glur_mono16 = _dereq_('glur/mono16');\n\n      function hsv_v16(img, width, height) {\n        var size = width * height;\n        var out = new Uint16Array(size);\n        var r, g, b, max;\n\n        for (var i = 0; i < size; i++) {\n          r = img[4 * i];\n          g = img[4 * i + 1];\n          b = img[4 * i + 2];\n          max = r >= g && r >= b ? r : g >= b && g >= r ? g : b;\n          out[i] = max << 8;\n        }\n\n        return out;\n      }\n\n      module.exports = function unsharp(img, width, height, amount, radius, threshold) {\n        var v1, v2, vmul;\n        var diff, iTimes4;\n\n        if (amount === 0 || radius < 0.5) {\n          return;\n        }\n\n        if (radius > 2.0) {\n          radius = 2.0;\n        }\n\n        var brightness = hsv_v16(img, width, height);\n        var blured = new Uint16Array(brightness); // copy, because blur modify src\n\n        glur_mono16(blured, width, height, radius);\n        var amountFp = amount / 100 * 0x1000 + 0.5 | 0;\n        var thresholdFp = threshold << 8;\n        var size = width * height;\n        /* eslint-disable indent */\n\n        for (var i = 0; i < size; i++) {\n          v1 = brightness[i];\n          diff = v1 - blured[i];\n\n          if (Math.abs(diff) >= thresholdFp) {\n            // add unsharp mask to the brightness channel\n            v2 = v1 + (amountFp * diff + 0x800 >> 12); // Both v1 and v2 are within [0.0 .. 255.0] (0000-FF00) range, never going into\n            // [255.003 .. 255.996] (FF01-FFFF). This allows to round this value as (x+.5)|0\n            // later without overflowing.\n\n            v2 = v2 > 0xff00 ? 0xff00 : v2;\n            v2 = v2 < 0x0000 ? 0x0000 : v2; // Avoid division by 0. V=0 means rgb(0,0,0), unsharp with unsharpAmount>0 cannot\n            // change this value (because diff between colors gets inflated), so no need to verify correctness.\n\n            v1 = v1 !== 0 ? v1 : 1; // Multiplying V in HSV model by a constant is equivalent to multiplying each component\n            // in RGB by the same constant (same for HSL), see also:\n            // https://beesbuzz.biz/code/16-hsv-color-transforms\n\n            vmul = (v2 << 12) / v1 | 0; // Result will be in [0..255] range because:\n            //  - all numbers are positive\n            //  - r,g,b <= (v1/256)\n            //  - r,g,b,(v1/256),(v2/256) <= 255\n            // So highest this number can get is X*255/X+0.5=255.5 which is < 256 and rounds down.\n\n            iTimes4 = i * 4;\n            img[iTimes4] = img[iTimes4] * vmul + 0x800 >> 12; // R\n\n            img[iTimes4 + 1] = img[iTimes4 + 1] * vmul + 0x800 >> 12; // G\n\n            img[iTimes4 + 2] = img[iTimes4 + 2] * vmul + 0x800 >> 12; // B\n          }\n        }\n      };\n    }, {\n      \"glur/mono16\": 18\n    }],\n    11: [function (_dereq_, module, exports) {\n      'use strict';\n\n      module.exports = function unsharp(img, width, height, amount, radius, threshold) {\n        if (amount === 0 || radius < 0.5) {\n          return;\n        }\n\n        if (radius > 2.0) {\n          radius = 2.0;\n        }\n\n        var pixels = width * height;\n        var img_bytes_cnt = pixels * 4;\n        var hsv_bytes_cnt = pixels * 2;\n        var blur_bytes_cnt = pixels * 2;\n        var blur_line_byte_cnt = Math.max(width, height) * 4; // float32 array\n\n        var blur_coeffs_byte_cnt = 8 * 4; // float32 array\n\n        var img_offset = 0;\n        var hsv_offset = img_bytes_cnt;\n        var blur_offset = hsv_offset + hsv_bytes_cnt;\n        var blur_tmp_offset = blur_offset + blur_bytes_cnt;\n        var blur_line_offset = blur_tmp_offset + blur_bytes_cnt;\n        var blur_coeffs_offset = blur_line_offset + blur_line_byte_cnt;\n\n        var instance = this.__instance('unsharp_mask', img_bytes_cnt + hsv_bytes_cnt + blur_bytes_cnt * 2 + blur_line_byte_cnt + blur_coeffs_byte_cnt, {\n          exp: Math.exp\n        }); // 32-bit copy is much faster in chrome\n\n\n        var img32 = new Uint32Array(img.buffer);\n        var mem32 = new Uint32Array(this.__memory.buffer);\n        mem32.set(img32); // HSL\n\n        var fn = instance.exports.hsv_v16 || instance.exports._hsv_v16;\n        fn(img_offset, hsv_offset, width, height); // BLUR\n\n        fn = instance.exports.blurMono16 || instance.exports._blurMono16;\n        fn(hsv_offset, blur_offset, blur_tmp_offset, blur_line_offset, blur_coeffs_offset, width, height, radius); // UNSHARP\n\n        fn = instance.exports.unsharp || instance.exports._unsharp;\n        fn(img_offset, img_offset, hsv_offset, blur_offset, width, height, amount, threshold); // 32-bit copy is much faster in chrome\n\n        img32.set(new Uint32Array(this.__memory.buffer, 0, pixels));\n      };\n    }, {}],\n    12: [function (_dereq_, module, exports) {\n      // This is autogenerated file from math.wasm, don't edit.\n      //\n      'use strict';\n      /* eslint-disable max-len */\n\n      module.exports = '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';\n    }, {}],\n    13: [function (_dereq_, module, exports) {\n      'use strict';\n\n      var GC_INTERVAL = 100;\n\n      function Pool(create, idle) {\n        this.create = create;\n        this.available = [];\n        this.acquired = {};\n        this.lastId = 1;\n        this.timeoutId = 0;\n        this.idle = idle || 2000;\n      }\n\n      Pool.prototype.acquire = function () {\n        var _this = this;\n\n        var resource;\n\n        if (this.available.length !== 0) {\n          resource = this.available.pop();\n        } else {\n          resource = this.create();\n          resource.id = this.lastId++;\n\n          resource.release = function () {\n            return _this.release(resource);\n          };\n        }\n\n        this.acquired[resource.id] = resource;\n        return resource;\n      };\n\n      Pool.prototype.release = function (resource) {\n        var _this2 = this;\n\n        delete this.acquired[resource.id];\n        resource.lastUsed = Date.now();\n        this.available.push(resource);\n\n        if (this.timeoutId === 0) {\n          this.timeoutId = setTimeout(function () {\n            return _this2.gc();\n          }, GC_INTERVAL);\n        }\n      };\n\n      Pool.prototype.gc = function () {\n        var _this3 = this;\n\n        var now = Date.now();\n        this.available = this.available.filter(function (resource) {\n          if (now - resource.lastUsed > _this3.idle) {\n            resource.destroy();\n            return false;\n          }\n\n          return true;\n        });\n\n        if (this.available.length !== 0) {\n          this.timeoutId = setTimeout(function () {\n            return _this3.gc();\n          }, GC_INTERVAL);\n        } else {\n          this.timeoutId = 0;\n        }\n      };\n\n      module.exports = Pool;\n    }, {}],\n    14: [function (_dereq_, module, exports) {\n      // Add intermediate resizing steps when scaling down by a very large factor.\n      //\n      // For example, when resizing 10000x10000 down to 10x10, it'll resize it to\n      // 300x300 first.\n      //\n      // It's needed because tiler has issues when the entire tile is scaled down\n      // to a few pixels (1024px source tile with border size 3 should result in\n      // at least 3+3+2 = 8px target tile, so max scale factor is 128 here).\n      //\n      // Also, adding intermediate steps can speed up processing if we use lower\n      // quality algorithms for first stages.\n      //\n      'use strict'; // min size = 0 results in infinite loop,\n      // min size = 1 can consume large amount of memory\n\n      var MIN_INNER_TILE_SIZE = 2;\n\n      module.exports = function createStages(fromWidth, fromHeight, toWidth, toHeight, srcTileSize, destTileBorder) {\n        var scaleX = toWidth / fromWidth;\n        var scaleY = toHeight / fromHeight; // derived from createRegions equation:\n        // innerTileWidth = pixelFloor(srcTileSize * scaleX) - 2 * destTileBorder;\n\n        var minScale = (2 * destTileBorder + MIN_INNER_TILE_SIZE + 1) / srcTileSize; // refuse to scale image multiple times by less than twice each time,\n        // it could only happen because of invalid options\n\n        if (minScale > 0.5) return [[toWidth, toHeight]];\n        var stageCount = Math.ceil(Math.log(Math.min(scaleX, scaleY)) / Math.log(minScale)); // no additional resizes are necessary,\n        // stageCount can be zero or be negative when enlarging the image\n\n        if (stageCount <= 1) return [[toWidth, toHeight]];\n        var result = [];\n\n        for (var i = 0; i < stageCount; i++) {\n          var width = Math.round(Math.pow(Math.pow(fromWidth, stageCount - i - 1) * Math.pow(toWidth, i + 1), 1 / stageCount));\n          var height = Math.round(Math.pow(Math.pow(fromHeight, stageCount - i - 1) * Math.pow(toHeight, i + 1), 1 / stageCount));\n          result.push([width, height]);\n        }\n\n        return result;\n      };\n    }, {}],\n    15: [function (_dereq_, module, exports) {\n      // Split original image into multiple 1024x1024 chunks to reduce memory usage\n      // (images have to be unpacked into typed arrays for resizing) and allow\n      // parallel processing of multiple tiles at a time.\n      //\n      'use strict';\n      /*\n       * pixelFloor and pixelCeil are modified versions of Math.floor and Math.ceil\n       * functions which take into account floating point arithmetic errors.\n       * Those errors can cause undesired increments/decrements of sizes and offsets:\n       * Math.ceil(36 / (36 / 500)) = 501\n       * pixelCeil(36 / (36 / 500)) = 500\n       */\n\n      var PIXEL_EPSILON = 1e-5;\n\n      function pixelFloor(x) {\n        var nearest = Math.round(x);\n\n        if (Math.abs(x - nearest) < PIXEL_EPSILON) {\n          return nearest;\n        }\n\n        return Math.floor(x);\n      }\n\n      function pixelCeil(x) {\n        var nearest = Math.round(x);\n\n        if (Math.abs(x - nearest) < PIXEL_EPSILON) {\n          return nearest;\n        }\n\n        return Math.ceil(x);\n      }\n\n      module.exports = function createRegions(options) {\n        var scaleX = options.toWidth / options.width;\n        var scaleY = options.toHeight / options.height;\n        var innerTileWidth = pixelFloor(options.srcTileSize * scaleX) - 2 * options.destTileBorder;\n        var innerTileHeight = pixelFloor(options.srcTileSize * scaleY) - 2 * options.destTileBorder; // prevent infinite loop, this should never happen\n\n        if (innerTileWidth < 1 || innerTileHeight < 1) {\n          throw new Error('Internal error in pica: target tile width/height is too small.');\n        }\n\n        var x, y;\n        var innerX, innerY, toTileWidth, toTileHeight;\n        var tiles = [];\n        var tile; // we go top-to-down instead of left-to-right to make image displayed from top to\n        // doesn in the browser\n\n        for (innerY = 0; innerY < options.toHeight; innerY += innerTileHeight) {\n          for (innerX = 0; innerX < options.toWidth; innerX += innerTileWidth) {\n            x = innerX - options.destTileBorder;\n\n            if (x < 0) {\n              x = 0;\n            }\n\n            toTileWidth = innerX + innerTileWidth + options.destTileBorder - x;\n\n            if (x + toTileWidth >= options.toWidth) {\n              toTileWidth = options.toWidth - x;\n            }\n\n            y = innerY - options.destTileBorder;\n\n            if (y < 0) {\n              y = 0;\n            }\n\n            toTileHeight = innerY + innerTileHeight + options.destTileBorder - y;\n\n            if (y + toTileHeight >= options.toHeight) {\n              toTileHeight = options.toHeight - y;\n            }\n\n            tile = {\n              toX: x,\n              toY: y,\n              toWidth: toTileWidth,\n              toHeight: toTileHeight,\n              toInnerX: innerX,\n              toInnerY: innerY,\n              toInnerWidth: innerTileWidth,\n              toInnerHeight: innerTileHeight,\n              offsetX: x / scaleX - pixelFloor(x / scaleX),\n              offsetY: y / scaleY - pixelFloor(y / scaleY),\n              scaleX: scaleX,\n              scaleY: scaleY,\n              x: pixelFloor(x / scaleX),\n              y: pixelFloor(y / scaleY),\n              width: pixelCeil(toTileWidth / scaleX),\n              height: pixelCeil(toTileHeight / scaleY)\n            };\n            tiles.push(tile);\n          }\n        }\n\n        return tiles;\n      };\n    }, {}],\n    16: [function (_dereq_, module, exports) {\n      'use strict';\n\n      function objClass(obj) {\n        return Object.prototype.toString.call(obj);\n      }\n\n      module.exports.isCanvas = function isCanvas(element) {\n        var cname = objClass(element);\n        return cname === '[object HTMLCanvasElement]'\n        /* browser */\n        || cname === '[object OffscreenCanvas]' || cname === '[object Canvas]'\n        /* node-canvas */\n        ;\n      };\n\n      module.exports.isImage = function isImage(element) {\n        return objClass(element) === '[object HTMLImageElement]';\n      };\n\n      module.exports.isImageBitmap = function isImageBitmap(element) {\n        return objClass(element) === '[object ImageBitmap]';\n      };\n\n      module.exports.limiter = function limiter(concurrency) {\n        var active = 0,\n            queue = [];\n\n        function roll() {\n          if (active < concurrency && queue.length) {\n            active++;\n            queue.shift()();\n          }\n        }\n\n        return function limit(fn) {\n          return new Promise(function (resolve, reject) {\n            queue.push(function () {\n              fn().then(function (result) {\n                resolve(result);\n                active--;\n                roll();\n              }, function (err) {\n                reject(err);\n                active--;\n                roll();\n              });\n            });\n            roll();\n          });\n        };\n      };\n\n      module.exports.cib_quality_name = function cib_quality_name(num) {\n        switch (num) {\n          case 0:\n            return 'pixelated';\n\n          case 1:\n            return 'low';\n\n          case 2:\n            return 'medium';\n        }\n\n        return 'high';\n      };\n\n      module.exports.cib_support = function cib_support(createCanvas) {\n        return Promise.resolve().then(function () {\n          if (typeof createImageBitmap === 'undefined') {\n            return false;\n          }\n\n          var c = createCanvas(100, 100);\n          return createImageBitmap(c, 0, 0, 100, 100, {\n            resizeWidth: 10,\n            resizeHeight: 10,\n            resizeQuality: 'high'\n          }).then(function (bitmap) {\n            var status = bitmap.width === 10; // Branch below is filtered on upper level. We do not call resize\n            // detection for basic ImageBitmap.\n            //\n            // https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap\n            // old Crome 51 has ImageBitmap without .close(). Then this code\n            // will throw and return 'false' as expected.\n            //\n\n            bitmap.close();\n            c = null;\n            return status;\n          });\n        })[\"catch\"](function () {\n          return false;\n        });\n      };\n\n      module.exports.worker_offscreen_canvas_support = function worker_offscreen_canvas_support() {\n        return new Promise(function (resolve, reject) {\n          if (typeof OffscreenCanvas === 'undefined') {\n            // if OffscreenCanvas is present, we assume browser supports Worker and built-in Promise as well\n            resolve(false);\n            return;\n          }\n\n          function workerPayload(self) {\n            if (typeof createImageBitmap === 'undefined') {\n              self.postMessage(false);\n              return;\n            }\n\n            Promise.resolve().then(function () {\n              var canvas = new OffscreenCanvas(10, 10); // test that 2d context can be used in worker\n\n              var ctx = canvas.getContext('2d');\n              ctx.rect(0, 0, 1, 1); // test that cib can be used to return image bitmap from worker\n\n              return createImageBitmap(canvas, 0, 0, 1, 1);\n            }).then(function () {\n              return self.postMessage(true);\n            }, function () {\n              return self.postMessage(false);\n            });\n          }\n\n          var code = btoa(\"(\".concat(workerPayload.toString(), \")(self);\"));\n          var w = new Worker(\"data:text/javascript;base64,\".concat(code));\n\n          w.onmessage = function (ev) {\n            return resolve(ev.data);\n          };\n\n          w.onerror = reject;\n        }).then(function (result) {\n          return result;\n        }, function () {\n          return false;\n        });\n      }; // Check if canvas.getContext('2d').getImageData can be used,\n      // FireFox randomizes the output of that function in `privacy.resistFingerprinting` mode\n\n\n      module.exports.can_use_canvas = function can_use_canvas(createCanvas) {\n        var usable = false;\n\n        try {\n          var canvas = createCanvas(2, 1);\n          var ctx = canvas.getContext('2d');\n          var d = ctx.createImageData(2, 1);\n          d.data[0] = 12;\n          d.data[1] = 23;\n          d.data[2] = 34;\n          d.data[3] = 255;\n          d.data[4] = 45;\n          d.data[5] = 56;\n          d.data[6] = 67;\n          d.data[7] = 255;\n          ctx.putImageData(d, 0, 0);\n          d = null;\n          d = ctx.getImageData(0, 0, 2, 1);\n\n          if (d.data[0] === 12 && d.data[1] === 23 && d.data[2] === 34 && d.data[3] === 255 && d.data[4] === 45 && d.data[5] === 56 && d.data[6] === 67 && d.data[7] === 255) {\n            usable = true;\n          }\n        } catch (err) {}\n\n        return usable;\n      }; // Check if createImageBitmap(img, sx, sy, sw, sh) signature works correctly\n      // with JPEG images oriented with Exif;\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1220671\n      // TODO: remove after it's fixed in chrome for at least 2 releases\n\n\n      module.exports.cib_can_use_region = function cib_can_use_region() {\n        return new Promise(function (resolve) {\n          // `Image` check required for use in `ServiceWorker`\n          if (typeof Image === 'undefined' || typeof createImageBitmap === 'undefined') {\n            resolve(false);\n            return;\n          }\n\n          var image = new Image();\n          image.src = 'data:image/jpeg;base64,' + '/9j/4QBiRXhpZgAATU0AKgAAAAgABQESAAMAAAABAAYAAAEaAAUAAAABAAAASgEbAAUAA' + 'AABAAAAUgEoAAMAAAABAAIAAAITAAMAAAABAAEAAAAAAAAAAABIAAAAAQAAAEgAAAAB/9' + 'sAQwAEAwMEAwMEBAMEBQQEBQYKBwYGBgYNCQoICg8NEBAPDQ8OERMYFBESFxIODxUcFRc' + 'ZGRsbGxAUHR8dGh8YGhsa/9sAQwEEBQUGBQYMBwcMGhEPERoaGhoaGhoaGhoaGhoaGhoa' + 'GhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoa/8IAEQgAAQACAwERAAIRAQMRA' + 'f/EABQAAQAAAAAAAAAAAAAAAAAAAAf/xAAUAQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAA' + 'IQAxAAAAF/P//EABQQAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQEAAQUCf//EABQRAQAAAAA' + 'AAAAAAAAAAAAAAAD/2gAIAQMBAT8Bf//EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQIB' + 'AT8Bf//EABQQAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQEABj8Cf//EABQQAQAAAAAAAAAAA' + 'AAAAAAAAAD/2gAIAQEAAT8hf//aAAwDAQACAAMAAAAQH//EABQRAQAAAAAAAAAAAAAAAA' + 'AAAAD/2gAIAQMBAT8Qf//EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQIBAT8Qf//EABQ' + 'QAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQEAAT8Qf//Z';\n\n          image.onload = function () {\n            createImageBitmap(image, 0, 0, image.width, image.height).then(function (bitmap) {\n              if (bitmap.width === image.width && bitmap.height === image.height) {\n                resolve(true);\n              } else {\n                resolve(false);\n              }\n            }, function () {\n              return resolve(false);\n            });\n          };\n\n          image.onerror = function () {\n            return resolve(false);\n          };\n        });\n      };\n    }, {}],\n    17: [function (_dereq_, module, exports) {\n      // Web Worker wrapper for image resize function\n      'use strict';\n\n      module.exports = function () {\n        var MathLib = _dereq_('./mathlib');\n\n        var mathLib;\n        /* eslint-disable no-undef */\n\n        onmessage = function onmessage(ev) {\n          var tileOpts = ev.data.opts;\n          var returnBitmap = false;\n\n          if (!tileOpts.src && tileOpts.srcBitmap) {\n            var canvas = new OffscreenCanvas(tileOpts.width, tileOpts.height);\n            var ctx = canvas.getContext('2d');\n            ctx.drawImage(tileOpts.srcBitmap, 0, 0);\n            tileOpts.src = ctx.getImageData(0, 0, tileOpts.width, tileOpts.height).data;\n            canvas.width = canvas.height = 0;\n            canvas = null;\n            tileOpts.srcBitmap.close();\n            tileOpts.srcBitmap = null; // Temporary force out data to typed array, because Chrome have artefacts\n            // https://github.com/nodeca/pica/issues/223\n            // returnBitmap = true;\n          }\n\n          if (!mathLib) mathLib = new MathLib(ev.data.features); // Use multimath's sync auto-init. Avoid Promise use in old browsers,\n          // because polyfills are not propagated to webworker.\n\n          var data = mathLib.resizeAndUnsharp(tileOpts);\n\n          if (returnBitmap) {\n            var toImageData = new ImageData(new Uint8ClampedArray(data), tileOpts.toWidth, tileOpts.toHeight);\n\n            var _canvas = new OffscreenCanvas(tileOpts.toWidth, tileOpts.toHeight);\n\n            var _ctx = _canvas.getContext('2d');\n\n            _ctx.putImageData(toImageData, 0, 0);\n\n            createImageBitmap(_canvas).then(function (bitmap) {\n              postMessage({\n                bitmap: bitmap\n              }, [bitmap]);\n            });\n          } else {\n            postMessage({\n              data: data\n            }, [data.buffer]);\n          }\n        };\n      };\n    }, {\n      \"./mathlib\": 1\n    }],\n    18: [function (_dereq_, module, exports) {\n      // Calculate Gaussian blur of an image using IIR filter\n      // The method is taken from Intel's white paper and code example attached to it:\n      // https://software.intel.com/en-us/articles/iir-gaussian-blur-filter\n      // -implementation-using-intel-advanced-vector-extensions\n      var a0, a1, a2, a3, b1, b2, left_corner, right_corner;\n\n      function gaussCoef(sigma) {\n        if (sigma < 0.5) {\n          sigma = 0.5;\n        }\n\n        var a = Math.exp(0.726 * 0.726) / sigma,\n            g1 = Math.exp(-a),\n            g2 = Math.exp(-2 * a),\n            k = (1 - g1) * (1 - g1) / (1 + 2 * a * g1 - g2);\n        a0 = k;\n        a1 = k * (a - 1) * g1;\n        a2 = k * (a + 1) * g1;\n        a3 = -k * g2;\n        b1 = 2 * g1;\n        b2 = -g2;\n        left_corner = (a0 + a1) / (1 - b1 - b2);\n        right_corner = (a2 + a3) / (1 - b1 - b2); // Attempt to force type to FP32.\n\n        return new Float32Array([a0, a1, a2, a3, b1, b2, left_corner, right_corner]);\n      }\n\n      function convolveMono16(src, out, line, coeff, width, height) {\n        // takes src image and writes the blurred and transposed result into out\n        var prev_src, curr_src, curr_out, prev_out, prev_prev_out;\n        var src_index, out_index, line_index;\n        var i, j;\n        var coeff_a0, coeff_a1, coeff_b1, coeff_b2;\n\n        for (i = 0; i < height; i++) {\n          src_index = i * width;\n          out_index = i;\n          line_index = 0; // left to right\n\n          prev_src = src[src_index];\n          prev_prev_out = prev_src * coeff[6];\n          prev_out = prev_prev_out;\n          coeff_a0 = coeff[0];\n          coeff_a1 = coeff[1];\n          coeff_b1 = coeff[4];\n          coeff_b2 = coeff[5];\n\n          for (j = 0; j < width; j++) {\n            curr_src = src[src_index];\n            curr_out = curr_src * coeff_a0 + prev_src * coeff_a1 + prev_out * coeff_b1 + prev_prev_out * coeff_b2;\n            prev_prev_out = prev_out;\n            prev_out = curr_out;\n            prev_src = curr_src;\n            line[line_index] = prev_out;\n            line_index++;\n            src_index++;\n          }\n\n          src_index--;\n          line_index--;\n          out_index += height * (width - 1); // right to left\n\n          prev_src = src[src_index];\n          prev_prev_out = prev_src * coeff[7];\n          prev_out = prev_prev_out;\n          curr_src = prev_src;\n          coeff_a0 = coeff[2];\n          coeff_a1 = coeff[3];\n\n          for (j = width - 1; j >= 0; j--) {\n            curr_out = curr_src * coeff_a0 + prev_src * coeff_a1 + prev_out * coeff_b1 + prev_prev_out * coeff_b2;\n            prev_prev_out = prev_out;\n            prev_out = curr_out;\n            prev_src = curr_src;\n            curr_src = src[src_index];\n            out[out_index] = line[line_index] + prev_out;\n            src_index--;\n            line_index--;\n            out_index -= height;\n          }\n        }\n      }\n\n      function blurMono16(src, width, height, radius) {\n        // Quick exit on zero radius\n        if (!radius) {\n          return;\n        }\n\n        var out = new Uint16Array(src.length),\n            tmp_line = new Float32Array(Math.max(width, height));\n        var coeff = gaussCoef(radius);\n        convolveMono16(src, out, tmp_line, coeff, width, height, radius);\n        convolveMono16(out, src, tmp_line, coeff, height, width, radius);\n      }\n\n      module.exports = blurMono16;\n    }, {}],\n    19: [function (_dereq_, module, exports) {\n      'use strict';\n\n      var assign = _dereq_('object-assign');\n\n      var base64decode = _dereq_('./lib/base64decode');\n\n      var hasWebAssembly = _dereq_('./lib/wa_detect');\n\n      var DEFAULT_OPTIONS = {\n        js: true,\n        wasm: true\n      };\n\n      function MultiMath(options) {\n        if (!(this instanceof MultiMath)) return new MultiMath(options);\n        var opts = assign({}, DEFAULT_OPTIONS, options || {});\n        this.options = opts;\n        this.__cache = {};\n        this.__init_promise = null;\n        this.__modules = opts.modules || {};\n        this.__memory = null;\n        this.__wasm = {};\n        this.__isLE = new Uint32Array(new Uint8Array([1, 0, 0, 0]).buffer)[0] === 1;\n\n        if (!this.options.js && !this.options.wasm) {\n          throw new Error('mathlib: at least \"js\" or \"wasm\" should be enabled');\n        }\n      }\n\n      MultiMath.prototype.has_wasm = hasWebAssembly;\n\n      MultiMath.prototype.use = function (module) {\n        this.__modules[module.name] = module; // Pin the best possible implementation\n\n        if (this.options.wasm && this.has_wasm() && module.wasm_fn) {\n          this[module.name] = module.wasm_fn;\n        } else {\n          this[module.name] = module.fn;\n        }\n\n        return this;\n      };\n\n      MultiMath.prototype.init = function () {\n        if (this.__init_promise) return this.__init_promise;\n\n        if (!this.options.js && this.options.wasm && !this.has_wasm()) {\n          return Promise.reject(new Error('mathlib: only \"wasm\" was enabled, but it\\'s not supported'));\n        }\n\n        var self = this;\n        this.__init_promise = Promise.all(Object.keys(self.__modules).map(function (name) {\n          var module = self.__modules[name];\n          if (!self.options.wasm || !self.has_wasm() || !module.wasm_fn) return null; // If already compiled - exit\n\n          if (self.__wasm[name]) return null; // Compile wasm source\n\n          return WebAssembly.compile(self.__base64decode(module.wasm_src)).then(function (m) {\n            self.__wasm[name] = m;\n          });\n        })).then(function () {\n          return self;\n        });\n        return this.__init_promise;\n      }; ////////////////////////////////////////////////////////////////////////////////\n      // Methods below are for internal use from plugins\n      // Simple decode base64 to typed array. Useful to load embedded webassembly\n      // code. You probably don't need to call this method directly.\n      //\n\n\n      MultiMath.prototype.__base64decode = base64decode; // Increase current memory to include specified number of bytes. Do nothing if\n      // size is already ok. You probably don't need to call this method directly,\n      // because it will be invoked from `.__instance()`.\n      //\n\n      MultiMath.prototype.__reallocate = function mem_grow_to(bytes) {\n        if (!this.__memory) {\n          this.__memory = new WebAssembly.Memory({\n            initial: Math.ceil(bytes / (64 * 1024))\n          });\n          return this.__memory;\n        }\n\n        var mem_size = this.__memory.buffer.byteLength;\n\n        if (mem_size < bytes) {\n          this.__memory.grow(Math.ceil((bytes - mem_size) / (64 * 1024)));\n        }\n\n        return this.__memory;\n      }; // Returns instantinated webassembly item by name, with specified memory size\n      // and environment.\n      // - use cache if available\n      // - do sync module init, if async init was not called earlier\n      // - allocate memory if not enougth\n      // - can export functions to webassembly via \"env_extra\",\n      //   for example, { exp: Math.exp }\n      //\n\n\n      MultiMath.prototype.__instance = function instance(name, memsize, env_extra) {\n        if (memsize) this.__reallocate(memsize); // If .init() was not called, do sync compile\n\n        if (!this.__wasm[name]) {\n          var module = this.__modules[name];\n          this.__wasm[name] = new WebAssembly.Module(this.__base64decode(module.wasm_src));\n        }\n\n        if (!this.__cache[name]) {\n          var env_base = {\n            memoryBase: 0,\n            memory: this.__memory,\n            tableBase: 0,\n            table: new WebAssembly.Table({\n              initial: 0,\n              element: 'anyfunc'\n            })\n          };\n          this.__cache[name] = new WebAssembly.Instance(this.__wasm[name], {\n            env: assign(env_base, env_extra || {})\n          });\n        }\n\n        return this.__cache[name];\n      }; // Helper to calculate memory aligh for pointers. Webassembly does not require\n      // this, but you may wish to experiment. Default base = 8;\n      //\n\n\n      MultiMath.prototype.__align = function align(number, base) {\n        base = base || 8;\n        var reminder = number % base;\n        return number + (reminder ? base - reminder : 0);\n      };\n\n      module.exports = MultiMath;\n    }, {\n      \"./lib/base64decode\": 20,\n      \"./lib/wa_detect\": 21,\n      \"object-assign\": 22\n    }],\n    20: [function (_dereq_, module, exports) {\n      // base64 decode str -> Uint8Array, to load WA modules\n      //\n      'use strict';\n\n      var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n      module.exports = function base64decode(str) {\n        var input = str.replace(/[\\r\\n=]/g, ''),\n            // remove CR/LF & padding to simplify scan\n        max = input.length;\n        var out = new Uint8Array(max * 3 >> 2); // Collect by 6*4 bits (3 bytes)\n\n        var bits = 0;\n        var ptr = 0;\n\n        for (var idx = 0; idx < max; idx++) {\n          if (idx % 4 === 0 && idx) {\n            out[ptr++] = bits >> 16 & 0xFF;\n            out[ptr++] = bits >> 8 & 0xFF;\n            out[ptr++] = bits & 0xFF;\n          }\n\n          bits = bits << 6 | BASE64_MAP.indexOf(input.charAt(idx));\n        } // Dump tail\n\n\n        var tailbits = max % 4 * 6;\n\n        if (tailbits === 0) {\n          out[ptr++] = bits >> 16 & 0xFF;\n          out[ptr++] = bits >> 8 & 0xFF;\n          out[ptr++] = bits & 0xFF;\n        } else if (tailbits === 18) {\n          out[ptr++] = bits >> 10 & 0xFF;\n          out[ptr++] = bits >> 2 & 0xFF;\n        } else if (tailbits === 12) {\n          out[ptr++] = bits >> 4 & 0xFF;\n        }\n\n        return out;\n      };\n    }, {}],\n    21: [function (_dereq_, module, exports) {\n      // Detect WebAssembly support.\n      // - Check global WebAssembly object\n      // - Try to load simple module (can be disabled via CSP)\n      //\n      'use strict';\n\n      var wa;\n\n      module.exports = function hasWebAssembly() {\n        // use cache if called before;\n        if (typeof wa !== 'undefined') return wa;\n        wa = false;\n        if (typeof WebAssembly === 'undefined') return wa; // If WebAssenbly is disabled, code can throw on compile\n\n        try {\n          // https://github.com/brion/min-wasm-fail/blob/master/min-wasm-fail.in.js\n          // Additional check that WA internals are correct\n\n          /* eslint-disable comma-spacing, max-len */\n          var bin = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 6, 1, 96, 1, 127, 1, 127, 3, 2, 1, 0, 5, 3, 1, 0, 1, 7, 8, 1, 4, 116, 101, 115, 116, 0, 0, 10, 16, 1, 14, 0, 32, 0, 65, 1, 54, 2, 0, 32, 0, 40, 2, 0, 11]);\n          var module = new WebAssembly.Module(bin);\n          var instance = new WebAssembly.Instance(module, {}); // test storing to and loading from a non-zero location via a parameter.\n          // Safari on iOS 11.2.5 returns 0 unexpectedly at non-zero locations\n\n          if (instance.exports.test(4) !== 0) wa = true;\n          return wa;\n        } catch (__) {}\n\n        return wa;\n      };\n    }, {}],\n    22: [function (_dereq_, module, exports) {\n      /*\n      object-assign\n      (c) Sindre Sorhus\n      @license MIT\n      */\n      'use strict';\n      /* eslint-disable no-unused-vars */\n\n      var getOwnPropertySymbols = Object.getOwnPropertySymbols;\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n      var propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\n      function toObject(val) {\n        if (val === null || val === undefined) {\n          throw new TypeError('Object.assign cannot be called with null or undefined');\n        }\n\n        return Object(val);\n      }\n\n      function shouldUseNative() {\n        try {\n          if (!Object.assign) {\n            return false;\n          } // Detect buggy property enumeration order in older V8 versions.\n          // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\n\n          var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\n          test1[5] = 'de';\n\n          if (Object.getOwnPropertyNames(test1)[0] === '5') {\n            return false;\n          } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n          var test2 = {};\n\n          for (var i = 0; i < 10; i++) {\n            test2['_' + String.fromCharCode(i)] = i;\n          }\n\n          var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n            return test2[n];\n          });\n\n          if (order2.join('') !== '0123456789') {\n            return false;\n          } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n          var test3 = {};\n          'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n            test3[letter] = letter;\n          });\n\n          if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n            return false;\n          }\n\n          return true;\n        } catch (err) {\n          // We don't expect any of the above to throw, but better to be safe.\n          return false;\n        }\n      }\n\n      module.exports = shouldUseNative() ? Object.assign : function (target, source) {\n        var from;\n        var to = toObject(target);\n        var symbols;\n\n        for (var s = 1; s < arguments.length; s++) {\n          from = Object(arguments[s]);\n\n          for (var key in from) {\n            if (hasOwnProperty.call(from, key)) {\n              to[key] = from[key];\n            }\n          }\n\n          if (getOwnPropertySymbols) {\n            symbols = getOwnPropertySymbols(from);\n\n            for (var i = 0; i < symbols.length; i++) {\n              if (propIsEnumerable.call(from, symbols[i])) {\n                to[symbols[i]] = from[symbols[i]];\n              }\n            }\n          }\n        }\n\n        return to;\n      };\n    }, {}],\n    23: [function (_dereq_, module, exports) {\n      var bundleFn = arguments[3];\n      var sources = arguments[4];\n      var cache = arguments[5];\n      var stringify = JSON.stringify;\n\n      module.exports = function (fn, options) {\n        var wkey;\n        var cacheKeys = Object.keys(cache);\n\n        for (var i = 0, l = cacheKeys.length; i < l; i++) {\n          var key = cacheKeys[i];\n          var exp = cache[key].exports; // Using babel as a transpiler to use esmodule, the export will always\n          // be an object with the default export as a property of it. To ensure\n          // the existing api and babel esmodule exports are both supported we\n          // check for both\n\n          if (exp === fn || exp && exp.default === fn) {\n            wkey = key;\n            break;\n          }\n        }\n\n        if (!wkey) {\n          wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n          var wcache = {};\n\n          for (var i = 0, l = cacheKeys.length; i < l; i++) {\n            var key = cacheKeys[i];\n            wcache[key] = key;\n          }\n\n          sources[wkey] = ['function(require,module,exports){' + fn + '(self); }', wcache];\n        }\n\n        var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n        var scache = {};\n        scache[wkey] = wkey;\n        sources[skey] = ['function(require,module,exports){' + // try to call default if defined to also support babel esmodule exports\n        'var f = require(' + stringify(wkey) + ');' + '(f.default ? f.default : f)(self);' + '}', scache];\n        var workerSources = {};\n        resolveSources(skey);\n\n        function resolveSources(key) {\n          workerSources[key] = true;\n\n          for (var depPath in sources[key][1]) {\n            var depKey = sources[key][1][depPath];\n\n            if (!workerSources[depKey]) {\n              resolveSources(depKey);\n            }\n          }\n        }\n\n        var src = '(' + bundleFn + ')({' + Object.keys(workerSources).map(function (key) {\n          return stringify(key) + ':[' + sources[key][0] + ',' + stringify(sources[key][1]) + ']';\n        }).join(',') + '},{},[' + stringify(skey) + '])';\n        var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\n        var blob = new Blob([src], {\n          type: 'text/javascript'\n        });\n\n        if (options && options.bare) {\n          return blob;\n        }\n\n        var workerUrl = URL.createObjectURL(blob);\n        var worker = new Worker(workerUrl);\n        worker.objectURL = workerUrl;\n        return worker;\n      };\n    }, {}],\n    \"/index.js\": [function (_dereq_, module, exports) {\n      'use strict';\n\n      function _slicedToArray(arr, i) {\n        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n      }\n\n      function _nonIterableRest() {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n      }\n\n      function _unsupportedIterableToArray(o, minLen) {\n        if (!o) return;\n        if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n        var n = Object.prototype.toString.call(o).slice(8, -1);\n        if (n === \"Object\" && o.constructor) n = o.constructor.name;\n        if (n === \"Map\" || n === \"Set\") return Array.from(o);\n        if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n      }\n\n      function _arrayLikeToArray(arr, len) {\n        if (len == null || len > arr.length) len = arr.length;\n\n        for (var i = 0, arr2 = new Array(len); i < len; i++) {\n          arr2[i] = arr[i];\n        }\n\n        return arr2;\n      }\n\n      function _iterableToArrayLimit(arr, i) {\n        var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n        if (_i == null) return;\n        var _arr = [];\n        var _n = true;\n        var _d = false;\n\n        var _s, _e;\n\n        try {\n          for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n\n            if (i && _arr.length === i) break;\n          }\n        } catch (err) {\n          _d = true;\n          _e = err;\n        } finally {\n          try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n          } finally {\n            if (_d) throw _e;\n          }\n        }\n\n        return _arr;\n      }\n\n      function _arrayWithHoles(arr) {\n        if (Array.isArray(arr)) return arr;\n      }\n\n      var assign = _dereq_('object-assign');\n\n      var webworkify = _dereq_('webworkify');\n\n      var MathLib = _dereq_('./lib/mathlib');\n\n      var Pool = _dereq_('./lib/pool');\n\n      var utils = _dereq_('./lib/utils');\n\n      var worker = _dereq_('./lib/worker');\n\n      var createStages = _dereq_('./lib/stepper');\n\n      var createRegions = _dereq_('./lib/tiler');\n\n      var filter_info = _dereq_('./lib/mm_resize/resize_filter_info'); // Deduplicate pools & limiters with the same configs\n      // when user creates multiple pica instances.\n\n\n      var singletones = {};\n      var NEED_SAFARI_FIX = false;\n\n      try {\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\n          NEED_SAFARI_FIX = navigator.userAgent.indexOf('Safari') >= 0;\n        }\n      } catch (e) {}\n\n      var concurrency = 1;\n\n      if (typeof navigator !== 'undefined') {\n        concurrency = Math.min(navigator.hardwareConcurrency || 1, 4);\n      }\n\n      var DEFAULT_PICA_OPTS = {\n        tile: 1024,\n        concurrency: concurrency,\n        features: ['js', 'wasm', 'ww'],\n        idle: 2000,\n        createCanvas: function createCanvas(width, height) {\n          var tmpCanvas = document.createElement('canvas');\n          tmpCanvas.width = width;\n          tmpCanvas.height = height;\n          return tmpCanvas;\n        }\n      };\n      var DEFAULT_RESIZE_OPTS = {\n        filter: 'mks2013',\n        unsharpAmount: 0,\n        unsharpRadius: 0.0,\n        unsharpThreshold: 0\n      };\n      var CAN_NEW_IMAGE_DATA = false;\n      var CAN_CREATE_IMAGE_BITMAP = false;\n      var CAN_USE_CANVAS_GET_IMAGE_DATA = false;\n      var CAN_USE_OFFSCREEN_CANVAS = false;\n      var CAN_USE_CIB_REGION_FOR_IMAGE = false;\n\n      function workerFabric() {\n        return {\n          value: webworkify(worker),\n          destroy: function destroy() {\n            this.value.terminate();\n\n            if (typeof window !== 'undefined') {\n              var url = window.URL || window.webkitURL || window.mozURL || window.msURL;\n\n              if (url && url.revokeObjectURL && this.value.objectURL) {\n                url.revokeObjectURL(this.value.objectURL);\n              }\n            }\n          }\n        };\n      } ////////////////////////////////////////////////////////////////////////////////\n      // API methods\n\n\n      function Pica(options) {\n        if (!(this instanceof Pica)) return new Pica(options);\n        this.options = assign({}, DEFAULT_PICA_OPTS, options || {});\n        var limiter_key = \"lk_\".concat(this.options.concurrency); // Share limiters to avoid multiple parallel workers when user creates\n        // multiple pica instances.\n\n        this.__limit = singletones[limiter_key] || utils.limiter(this.options.concurrency);\n        if (!singletones[limiter_key]) singletones[limiter_key] = this.__limit; // List of supported features, according to options & browser/node.js\n\n        this.features = {\n          js: false,\n          // pure JS implementation, can be disabled for testing\n          wasm: false,\n          // webassembly implementation for heavy functions\n          cib: false,\n          // resize via createImageBitmap (only FF at this moment)\n          ww: false // webworkers\n\n        };\n        this.__workersPool = null; // Store requested features for webworkers\n\n        this.__requested_features = [];\n        this.__mathlib = null;\n      }\n\n      Pica.prototype.init = function () {\n        var _this = this;\n\n        if (this.__initPromise) return this.__initPromise; // Test if we can create ImageData without canvas and memory copy\n\n        if (typeof ImageData !== 'undefined' && typeof Uint8ClampedArray !== 'undefined') {\n          try {\n            /* eslint-disable no-new */\n            new ImageData(new Uint8ClampedArray(400), 10, 10);\n            CAN_NEW_IMAGE_DATA = true;\n          } catch (__) {}\n        } // ImageBitmap can be effective in 2 places:\n        //\n        // 1. Threaded jpeg unpack (basic)\n        // 2. Built-in resize (blocked due problem in chrome, see issue #89)\n        //\n        // For basic use we also need ImageBitmap wo support .close() method,\n        // see https://developer.mozilla.org/ru/docs/Web/API/ImageBitmap\n\n\n        if (typeof ImageBitmap !== 'undefined') {\n          if (ImageBitmap.prototype && ImageBitmap.prototype.close) {\n            CAN_CREATE_IMAGE_BITMAP = true;\n          } else {\n            this.debug('ImageBitmap does not support .close(), disabled');\n          }\n        }\n\n        var features = this.options.features.slice();\n\n        if (features.indexOf('all') >= 0) {\n          features = ['cib', 'wasm', 'js', 'ww'];\n        }\n\n        this.__requested_features = features;\n        this.__mathlib = new MathLib(features); // Check WebWorker support if requested\n\n        if (features.indexOf('ww') >= 0) {\n          if (typeof window !== 'undefined' && 'Worker' in window) {\n            // IE <= 11 don't allow to create webworkers from string. We should check it.\n            // https://connect.microsoft.com/IE/feedback/details/801810/web-workers-from-blob-urls-in-ie-10-and-11\n            try {\n              var wkr = _dereq_('webworkify')(function () {});\n\n              wkr.terminate();\n              this.features.ww = true; // pool uniqueness depends on pool config + webworker config\n\n              var wpool_key = \"wp_\".concat(JSON.stringify(this.options));\n\n              if (singletones[wpool_key]) {\n                this.__workersPool = singletones[wpool_key];\n              } else {\n                this.__workersPool = new Pool(workerFabric, this.options.idle);\n                singletones[wpool_key] = this.__workersPool;\n              }\n            } catch (__) {}\n          }\n        }\n\n        var initMath = this.__mathlib.init().then(function (mathlib) {\n          // Copy detected features\n          assign(_this.features, mathlib.features);\n        });\n\n        var checkCibResize;\n\n        if (!CAN_CREATE_IMAGE_BITMAP) {\n          checkCibResize = Promise.resolve(false);\n        } else {\n          checkCibResize = utils.cib_support(this.options.createCanvas).then(function (status) {\n            if (_this.features.cib && features.indexOf('cib') < 0) {\n              _this.debug('createImageBitmap() resize supported, but disabled by config');\n\n              return;\n            }\n\n            if (features.indexOf('cib') >= 0) _this.features.cib = status;\n          });\n        }\n\n        CAN_USE_CANVAS_GET_IMAGE_DATA = utils.can_use_canvas(this.options.createCanvas);\n        var checkOffscreenCanvas;\n\n        if (CAN_CREATE_IMAGE_BITMAP && CAN_NEW_IMAGE_DATA && features.indexOf('ww') !== -1) {\n          checkOffscreenCanvas = utils.worker_offscreen_canvas_support();\n        } else {\n          checkOffscreenCanvas = Promise.resolve(false);\n        }\n\n        checkOffscreenCanvas = checkOffscreenCanvas.then(function (result) {\n          CAN_USE_OFFSCREEN_CANVAS = result;\n        }); // we use createImageBitmap to crop image data and pass it to workers,\n        // so need to check whether function works correctly;\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1220671\n\n        var checkCibRegion = utils.cib_can_use_region().then(function (result) {\n          CAN_USE_CIB_REGION_FOR_IMAGE = result;\n        }); // Init math lib. That's async because can load some\n\n        this.__initPromise = Promise.all([initMath, checkCibResize, checkOffscreenCanvas, checkCibRegion]).then(function () {\n          return _this;\n        });\n        return this.__initPromise;\n      }; // Call resizer in webworker or locally, depending on config\n\n\n      Pica.prototype.__invokeResize = function (tileOpts, opts) {\n        var _this2 = this; // Share cache between calls:\n        //\n        // - wasm instance\n        // - wasm memory object\n        //\n\n\n        opts.__mathCache = opts.__mathCache || {};\n        return Promise.resolve().then(function () {\n          if (!_this2.features.ww) {\n            // not possible to have ImageBitmap here if user disabled WW\n            return {\n              data: _this2.__mathlib.resizeAndUnsharp(tileOpts, opts.__mathCache)\n            };\n          }\n\n          return new Promise(function (resolve, reject) {\n            var w = _this2.__workersPool.acquire();\n\n            if (opts.cancelToken) opts.cancelToken[\"catch\"](function (err) {\n              return reject(err);\n            });\n\n            w.value.onmessage = function (ev) {\n              w.release();\n              if (ev.data.err) reject(ev.data.err);else resolve(ev.data);\n            };\n\n            var transfer = [];\n            if (tileOpts.src) transfer.push(tileOpts.src.buffer);\n            if (tileOpts.srcBitmap) transfer.push(tileOpts.srcBitmap);\n            w.value.postMessage({\n              opts: tileOpts,\n              features: _this2.__requested_features,\n              preload: {\n                wasm_nodule: _this2.__mathlib.__\n              }\n            }, transfer);\n          });\n        });\n      }; // this function can return promise if createImageBitmap is used\n\n\n      Pica.prototype.__extractTileData = function (tile, from, opts, stageEnv, extractTo) {\n        if (this.features.ww && CAN_USE_OFFSCREEN_CANVAS && ( // createImageBitmap doesn't work for images (Image, ImageBitmap) with Exif orientation in Chrome,\n        // can use canvas because canvas doesn't have orientation;\n        // see https://bugs.chromium.org/p/chromium/issues/detail?id=1220671\n        utils.isCanvas(from) || CAN_USE_CIB_REGION_FOR_IMAGE)) {\n          this.debug('Create tile for OffscreenCanvas');\n          return createImageBitmap(stageEnv.srcImageBitmap || from, tile.x, tile.y, tile.width, tile.height).then(function (bitmap) {\n            extractTo.srcBitmap = bitmap;\n            return extractTo;\n          });\n        } // Extract tile RGBA buffer, depending on input type\n\n\n        if (utils.isCanvas(from)) {\n          if (!stageEnv.srcCtx) stageEnv.srcCtx = from.getContext('2d'); // If input is Canvas - extract region data directly\n\n          this.debug('Get tile pixel data');\n          extractTo.src = stageEnv.srcCtx.getImageData(tile.x, tile.y, tile.width, tile.height).data;\n          return extractTo;\n        } // If input is Image or decoded to ImageBitmap,\n        // draw region to temporary canvas and extract data from it\n        //\n        // Note! Attempt to reuse this canvas causes significant slowdown in chrome\n        //\n\n\n        this.debug('Draw tile imageBitmap/image to temporary canvas');\n        var tmpCanvas = this.options.createCanvas(tile.width, tile.height);\n        var tmpCtx = tmpCanvas.getContext('2d');\n        tmpCtx.globalCompositeOperation = 'copy';\n        tmpCtx.drawImage(stageEnv.srcImageBitmap || from, tile.x, tile.y, tile.width, tile.height, 0, 0, tile.width, tile.height);\n        this.debug('Get tile pixel data');\n        extractTo.src = tmpCtx.getImageData(0, 0, tile.width, tile.height).data; // Safari 12 workaround\n        // https://github.com/nodeca/pica/issues/199\n\n        tmpCanvas.width = tmpCanvas.height = 0;\n        return extractTo;\n      };\n\n      Pica.prototype.__landTileData = function (tile, result, stageEnv) {\n        var toImageData;\n        this.debug('Convert raw rgba tile result to ImageData');\n\n        if (result.bitmap) {\n          stageEnv.toCtx.drawImage(result.bitmap, tile.toX, tile.toY);\n          return null;\n        }\n\n        if (CAN_NEW_IMAGE_DATA) {\n          // this branch is for modern browsers\n          // If `new ImageData()` & Uint8ClampedArray suported\n          toImageData = new ImageData(new Uint8ClampedArray(result.data), tile.toWidth, tile.toHeight);\n        } else {\n          // fallback for `node-canvas` and old browsers\n          // (IE11 has ImageData but does not support `new ImageData()`)\n          toImageData = stageEnv.toCtx.createImageData(tile.toWidth, tile.toHeight);\n\n          if (toImageData.data.set) {\n            toImageData.data.set(result.data);\n          } else {\n            // IE9 don't have `.set()`\n            for (var i = toImageData.data.length - 1; i >= 0; i--) {\n              toImageData.data[i] = result.data[i];\n            }\n          }\n        }\n\n        this.debug('Draw tile');\n\n        if (NEED_SAFARI_FIX) {\n          // Safari draws thin white stripes between tiles without this fix\n          stageEnv.toCtx.putImageData(toImageData, tile.toX, tile.toY, tile.toInnerX - tile.toX, tile.toInnerY - tile.toY, tile.toInnerWidth + 1e-5, tile.toInnerHeight + 1e-5);\n        } else {\n          stageEnv.toCtx.putImageData(toImageData, tile.toX, tile.toY, tile.toInnerX - tile.toX, tile.toInnerY - tile.toY, tile.toInnerWidth, tile.toInnerHeight);\n        }\n\n        return null;\n      };\n\n      Pica.prototype.__tileAndResize = function (from, to, opts) {\n        var _this3 = this;\n\n        var stageEnv = {\n          srcCtx: null,\n          srcImageBitmap: null,\n          isImageBitmapReused: false,\n          toCtx: null\n        };\n\n        var processTile = function processTile(tile) {\n          return _this3.__limit(function () {\n            if (opts.canceled) return opts.cancelToken;\n            var tileOpts = {\n              width: tile.width,\n              height: tile.height,\n              toWidth: tile.toWidth,\n              toHeight: tile.toHeight,\n              scaleX: tile.scaleX,\n              scaleY: tile.scaleY,\n              offsetX: tile.offsetX,\n              offsetY: tile.offsetY,\n              filter: opts.filter,\n              unsharpAmount: opts.unsharpAmount,\n              unsharpRadius: opts.unsharpRadius,\n              unsharpThreshold: opts.unsharpThreshold\n            };\n\n            _this3.debug('Invoke resize math');\n\n            return Promise.resolve(tileOpts).then(function (tileOpts) {\n              return _this3.__extractTileData(tile, from, opts, stageEnv, tileOpts);\n            }).then(function (tileOpts) {\n              _this3.debug('Invoke resize math');\n\n              return _this3.__invokeResize(tileOpts, opts);\n            }).then(function (result) {\n              if (opts.canceled) return opts.cancelToken;\n              stageEnv.srcImageData = null;\n              return _this3.__landTileData(tile, result, stageEnv);\n            });\n          });\n        }; // Need to normalize data source first. It can be canvas or image.\n        // If image - try to decode in background if possible\n\n\n        return Promise.resolve().then(function () {\n          stageEnv.toCtx = to.getContext('2d');\n          if (utils.isCanvas(from)) return null;\n\n          if (utils.isImageBitmap(from)) {\n            stageEnv.srcImageBitmap = from;\n            stageEnv.isImageBitmapReused = true;\n            return null;\n          }\n\n          if (utils.isImage(from)) {\n            // try do decode image in background for faster next operations;\n            // if we're using offscreen canvas, cib is called per tile, so not needed here\n            if (!CAN_CREATE_IMAGE_BITMAP) return null;\n\n            _this3.debug('Decode image via createImageBitmap');\n\n            return createImageBitmap(from).then(function (imageBitmap) {\n              stageEnv.srcImageBitmap = imageBitmap;\n            }) // Suppress error to use fallback, if method fails\n            // https://github.com/nodeca/pica/issues/190\n\n            /* eslint-disable no-unused-vars */\n            [\"catch\"](function (e) {\n              return null;\n            });\n          }\n\n          throw new Error('Pica: \".from\" should be Image, Canvas or ImageBitmap');\n        }).then(function () {\n          if (opts.canceled) return opts.cancelToken;\n\n          _this3.debug('Calculate tiles'); //\n          // Here we are with \"normalized\" source,\n          // follow to tiling\n          //\n\n\n          var regions = createRegions({\n            width: opts.width,\n            height: opts.height,\n            srcTileSize: _this3.options.tile,\n            toWidth: opts.toWidth,\n            toHeight: opts.toHeight,\n            destTileBorder: opts.__destTileBorder\n          });\n          var jobs = regions.map(function (tile) {\n            return processTile(tile);\n          });\n\n          function cleanup(stageEnv) {\n            if (stageEnv.srcImageBitmap) {\n              if (!stageEnv.isImageBitmapReused) stageEnv.srcImageBitmap.close();\n              stageEnv.srcImageBitmap = null;\n            }\n          }\n\n          _this3.debug('Process tiles');\n\n          return Promise.all(jobs).then(function () {\n            _this3.debug('Finished!');\n\n            cleanup(stageEnv);\n            return to;\n          }, function (err) {\n            cleanup(stageEnv);\n            throw err;\n          });\n        });\n      };\n\n      Pica.prototype.__processStages = function (stages, from, to, opts) {\n        var _this4 = this;\n\n        if (opts.canceled) return opts.cancelToken;\n\n        var _stages$shift = stages.shift(),\n            _stages$shift2 = _slicedToArray(_stages$shift, 2),\n            toWidth = _stages$shift2[0],\n            toHeight = _stages$shift2[1];\n\n        var isLastStage = stages.length === 0; // Optimization for legacy filters -\n        // only use user-defined quality for the last stage,\n        // use simpler (Hamming) filter for the first stages where\n        // scale factor is large enough (more than 2-3)\n        //\n        // For advanced filters (mks2013 and custom) - skip optimization,\n        // because need to apply sharpening every time\n\n        var filter;\n        if (isLastStage || filter_info.q2f.indexOf(opts.filter) < 0) filter = opts.filter;else if (opts.filter === 'box') filter = 'box';else filter = 'hamming';\n        opts = assign({}, opts, {\n          toWidth: toWidth,\n          toHeight: toHeight,\n          filter: filter\n        });\n        var tmpCanvas;\n\n        if (!isLastStage) {\n          // create temporary canvas\n          tmpCanvas = this.options.createCanvas(toWidth, toHeight);\n        }\n\n        return this.__tileAndResize(from, isLastStage ? to : tmpCanvas, opts).then(function () {\n          if (isLastStage) return to;\n          opts.width = toWidth;\n          opts.height = toHeight;\n          return _this4.__processStages(stages, tmpCanvas, to, opts);\n        }).then(function (res) {\n          if (tmpCanvas) {\n            // Safari 12 workaround\n            // https://github.com/nodeca/pica/issues/199\n            tmpCanvas.width = tmpCanvas.height = 0;\n          }\n\n          return res;\n        });\n      };\n\n      Pica.prototype.__resizeViaCreateImageBitmap = function (from, to, opts) {\n        var _this5 = this;\n\n        var toCtx = to.getContext('2d');\n        this.debug('Resize via createImageBitmap()');\n        return createImageBitmap(from, {\n          resizeWidth: opts.toWidth,\n          resizeHeight: opts.toHeight,\n          resizeQuality: utils.cib_quality_name(filter_info.f2q[opts.filter])\n        }).then(function (imageBitmap) {\n          if (opts.canceled) return opts.cancelToken; // if no unsharp - draw directly to output canvas\n\n          if (!opts.unsharpAmount) {\n            toCtx.drawImage(imageBitmap, 0, 0);\n            imageBitmap.close();\n            toCtx = null;\n\n            _this5.debug('Finished!');\n\n            return to;\n          }\n\n          _this5.debug('Unsharp result');\n\n          var tmpCanvas = _this5.options.createCanvas(opts.toWidth, opts.toHeight);\n\n          var tmpCtx = tmpCanvas.getContext('2d');\n          tmpCtx.drawImage(imageBitmap, 0, 0);\n          imageBitmap.close();\n          var iData = tmpCtx.getImageData(0, 0, opts.toWidth, opts.toHeight);\n\n          _this5.__mathlib.unsharp_mask(iData.data, opts.toWidth, opts.toHeight, opts.unsharpAmount, opts.unsharpRadius, opts.unsharpThreshold);\n\n          toCtx.putImageData(iData, 0, 0); // Safari 12 workaround\n          // https://github.com/nodeca/pica/issues/199\n\n          tmpCanvas.width = tmpCanvas.height = 0;\n          iData = tmpCtx = tmpCanvas = toCtx = null;\n\n          _this5.debug('Finished!');\n\n          return to;\n        });\n      };\n\n      Pica.prototype.resize = function (from, to, options) {\n        var _this6 = this;\n\n        this.debug('Start resize...');\n        var opts = assign({}, DEFAULT_RESIZE_OPTS);\n\n        if (!isNaN(options)) {\n          opts = assign(opts, {\n            quality: options\n          });\n        } else if (options) {\n          opts = assign(opts, options);\n        }\n\n        opts.toWidth = to.width;\n        opts.toHeight = to.height;\n        opts.width = from.naturalWidth || from.width;\n        opts.height = from.naturalHeight || from.height; // Legacy `.quality` option\n\n        if (Object.prototype.hasOwnProperty.call(opts, 'quality')) {\n          if (opts.quality < 0 || opts.quality > 3) {\n            throw new Error(\"Pica: .quality should be [0..3], got \".concat(opts.quality));\n          }\n\n          opts.filter = filter_info.q2f[opts.quality];\n        } // Prevent stepper from infinite loop\n\n\n        if (to.width === 0 || to.height === 0) {\n          return Promise.reject(new Error(\"Invalid output size: \".concat(to.width, \"x\").concat(to.height)));\n        }\n\n        if (opts.unsharpRadius > 2) opts.unsharpRadius = 2;\n        opts.canceled = false;\n\n        if (opts.cancelToken) {\n          // Wrap cancelToken to avoid successive resolve & set flag\n          opts.cancelToken = opts.cancelToken.then(function (data) {\n            opts.canceled = true;\n            throw data;\n          }, function (err) {\n            opts.canceled = true;\n            throw err;\n          });\n        }\n\n        var DEST_TILE_BORDER = 3; // Max possible filter window size\n\n        opts.__destTileBorder = Math.ceil(Math.max(DEST_TILE_BORDER, 2.5 * opts.unsharpRadius | 0));\n        return this.init().then(function () {\n          if (opts.canceled) return opts.cancelToken; // if createImageBitmap supports resize, just do it and return\n\n          if (_this6.features.cib) {\n            if (filter_info.q2f.indexOf(opts.filter) >= 0) {\n              return _this6.__resizeViaCreateImageBitmap(from, to, opts);\n            }\n\n            _this6.debug('cib is enabled, but not supports provided filter, fallback to manual math');\n          }\n\n          if (!CAN_USE_CANVAS_GET_IMAGE_DATA) {\n            var err = new Error('Pica: cannot use getImageData on canvas, ' + \"make sure fingerprinting protection isn't enabled\");\n            err.code = 'ERR_GET_IMAGE_DATA';\n            throw err;\n          } //\n          // No easy way, let's resize manually via arrays\n          //\n\n\n          var stages = createStages(opts.width, opts.height, opts.toWidth, opts.toHeight, _this6.options.tile, opts.__destTileBorder);\n          return _this6.__processStages(stages, from, to, opts);\n        });\n      }; // RGBA buffer resize\n      //\n\n\n      Pica.prototype.resizeBuffer = function (options) {\n        var _this7 = this;\n\n        var opts = assign({}, DEFAULT_RESIZE_OPTS, options); // Legacy `.quality` option\n\n        if (Object.prototype.hasOwnProperty.call(opts, 'quality')) {\n          if (opts.quality < 0 || opts.quality > 3) {\n            throw new Error(\"Pica: .quality should be [0..3], got \".concat(opts.quality));\n          }\n\n          opts.filter = filter_info.q2f[opts.quality];\n        }\n\n        return this.init().then(function () {\n          return _this7.__mathlib.resizeAndUnsharp(opts);\n        });\n      };\n\n      Pica.prototype.toBlob = function (canvas, mimeType, quality) {\n        mimeType = mimeType || 'image/png';\n        return new Promise(function (resolve) {\n          if (canvas.toBlob) {\n            canvas.toBlob(function (blob) {\n              return resolve(blob);\n            }, mimeType, quality);\n            return;\n          }\n\n          if (canvas.convertToBlob) {\n            resolve(canvas.convertToBlob({\n              type: mimeType,\n              quality: quality\n            }));\n            return;\n          } // Fallback for old browsers\n\n\n          var asString = atob(canvas.toDataURL(mimeType, quality).split(',')[1]);\n          var len = asString.length;\n          var asBuffer = new Uint8Array(len);\n\n          for (var i = 0; i < len; i++) {\n            asBuffer[i] = asString.charCodeAt(i);\n          }\n\n          resolve(new Blob([asBuffer], {\n            type: mimeType\n          }));\n        });\n      };\n\n      Pica.prototype.debug = function () {};\n\n      module.exports = Pica;\n    }, {\n      \"./lib/mathlib\": 1,\n      \"./lib/mm_resize/resize_filter_info\": 7,\n      \"./lib/pool\": 13,\n      \"./lib/stepper\": 14,\n      \"./lib/tiler\": 15,\n      \"./lib/utils\": 16,\n      \"./lib/worker\": 17,\n      \"object-assign\": 22,\n      \"webworkify\": 23\n    }]\n  }, {}, [])(\"/index.js\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pica/dist/pica.js\n");

/***/ }),

/***/ "./src/brushMenu.js":
/*!**************************!*\
  !*** ./src/brushMenu.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BrushMenu\": () => (/* binding */ BrushMenu)\n/* harmony export */ });\n/* harmony import */ var _brushSettings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./brushSettings.js */ \"./src/brushSettings.js\");\n/* harmony import */ var _style_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../style.css */ \"./style.css\");\n\n\nclass BrushMenu extends HTMLElement {\n  get css() {\n    return _style_css__WEBPACK_IMPORTED_MODULE_1__[\"default\"] +\n    /*css*/\n    `\n            canvas {\n                border: 1px grey solid;\n            }\n\n            button {\n                width: 32px;\n            }\n\n            button[selected] {\n                background-color: #999;\n            }\n        `;\n  }\n\n  get html() {\n    return (\n      /*html*/\n      `\n        <div id=\"main\" class=\"column flex-grow-1\">\n            <div class=\"row justify-center\">\n                <span>Brush controls</span>\n            </div>\n            <div class=\"row justify-center\">\n                <span>Draw with cursor</span>\n            </div>\n            <div class=\"row justify-center\">\n                <span>1</span>\n                <input title=\"Brush size\" type=\"range\" min=\"1\" max=\"64\" value=\"${_brushSettings_js__WEBPACK_IMPORTED_MODULE_0__.brushSettings.size}\" class=\"slider\" id=\"size\">\n                <span>64</span>\n            </div>\n\n            <div class=\"row justify-center\">\n                <button title=\"Brush shape\" selected id=\"mode2\">●</button>\n                <button title=\"Brush shape\" id=\"mode1\">◆</button>\n                <button title=\"Brush shape\" id=\"mode0\">■</button>\n\n                <input title=\"Brush color\" type=\"color\" value=\"#000\" id=\"color\">\n            </div>\n        </div>\n        `\n    );\n  }\n\n  constructor() {\n    super();\n    this.attachShadow({\n      mode: 'open'\n    });\n    this.shadowRoot.innerHTML = `<style>${this.css}</style>` + this.html;\n  }\n\n  getElementsWithId() {\n    const res = {};\n    const elems = this.shadowRoot.querySelectorAll('[id]');\n\n    for (const el of elems) res[el.id] = el;\n\n    return res;\n  }\n\n  _selectMode(mode) {\n    for (const i of [0, 1, 2]) {\n      this.elems[`mode${i}`].removeAttribute('selected');\n    }\n\n    this.elems[`mode${mode}`].setAttribute('selected', true);\n    _brushSettings_js__WEBPACK_IMPORTED_MODULE_0__.brushSettings.mode = mode;\n  }\n\n  connectedCallback() {\n    // super.connectedCallback();\n    const elems = this.elems = this.getElementsWithId();\n    elems.color.addEventListener(\"input\", e => {\n      const color = e.target.value;\n      const r = parseInt(color.substr(1, 2), 16) / 255;\n      const g = parseInt(color.substr(3, 2), 16) / 255;\n      const b = parseInt(color.substr(5, 2), 16) / 255;\n      _brushSettings_js__WEBPACK_IMPORTED_MODULE_0__.brushSettings.color = [r, g, b];\n    });\n\n    elems.mode0.onclick = e => this._selectMode(0);\n\n    elems.mode1.onclick = e => this._selectMode(1);\n\n    elems.mode2.onclick = e => this._selectMode(2);\n\n    elems.size.onchange = e => {\n      _brushSettings_js__WEBPACK_IMPORTED_MODULE_0__.brushSettings.size = +e.target.value;\n    };\n  }\n\n}\ncustomElements.define(\"brush-menu\", BrushMenu);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQVlGLE9BQVosR0FBdUJULENBQUQsSUFBTyxLQUFLUCxXQUFMLENBQWlCLENBQWpCLENBQTdCOztJQUVBSixLQUFLLENBQUNSLElBQU4sQ0FBVytCLFFBQVgsR0FBdUJaLENBQUQsSUFBTztNQUN6QnpCLGlFQUFBLEdBQXFCLENBQUN5QixDQUFDLENBQUNDLE1BQUYsQ0FBU0MsS0FBL0I7SUFDSCxDQUZEO0VBR0g7O0FBekZzQztBQTRGM0NXLGNBQWMsQ0FBQ0MsTUFBZixDQUFzQixZQUF0QixFQUFvQ3JDLFNBQXBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2JydXNoTWVudS5qcz84OGNjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJydXNoU2V0dGluZ3MgfSBmcm9tICcuL2JydXNoU2V0dGluZ3MuanMnO1xyXG5cclxuaW1wb3J0IGNvbW1vbkNTUyBmcm9tICcuLi9zdHlsZS5jc3MnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJydXNoTWVudSBleHRlbmRzIEhUTUxFbGVtZW50IHtcclxuICAgIGdldCBjc3MoKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbW1vbkNTUyArIC8qY3NzKi9gXHJcbiAgICAgICAgICAgIGNhbnZhcyB7XHJcbiAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBncmV5IHNvbGlkO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBidXR0b24ge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDMycHg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGJ1dHRvbltzZWxlY3RlZF0ge1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzk5OTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIGA7XHJcbiAgICB9XHJcbiAgICBnZXQgaHRtbCgpIHtcclxuICAgICAgICByZXR1cm4gIC8qaHRtbCovYFxyXG4gICAgICAgIDxkaXYgaWQ9XCJtYWluXCIgY2xhc3M9XCJjb2x1bW4gZmxleC1ncm93LTFcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyBqdXN0aWZ5LWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+QnJ1c2ggY29udHJvbHM8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93IGp1c3RpZnktY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICA8c3Bhbj5EcmF3IHdpdGggY3Vyc29yPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyBqdXN0aWZ5LWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+MTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxpbnB1dCB0aXRsZT1cIkJydXNoIHNpemVcIiB0eXBlPVwicmFuZ2VcIiBtaW49XCIxXCIgbWF4PVwiNjRcIiB2YWx1ZT1cIiR7YnJ1c2hTZXR0aW5ncy5zaXplfVwiIGNsYXNzPVwic2xpZGVyXCIgaWQ9XCJzaXplXCI+XHJcbiAgICAgICAgICAgICAgICA8c3Bhbj42NDwvc3Bhbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93IGp1c3RpZnktY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHRpdGxlPVwiQnJ1c2ggc2hhcGVcIiBzZWxlY3RlZCBpZD1cIm1vZGUyXCI+4pePPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHRpdGxlPVwiQnJ1c2ggc2hhcGVcIiBpZD1cIm1vZGUxXCI+4peGPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHRpdGxlPVwiQnJ1c2ggc2hhcGVcIiBpZD1cIm1vZGUwXCI+4pagPC9idXR0b24+XHJcblxyXG4gICAgICAgICAgICAgICAgPGlucHV0IHRpdGxlPVwiQnJ1c2ggY29sb3JcIiB0eXBlPVwiY29sb3JcIiB2YWx1ZT1cIiMwMDBcIiBpZD1cImNvbG9yXCI+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGA7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJ30pO1xyXG4gICAgICAgIHRoaXMuc2hhZG93Um9vdC5pbm5lckhUTUwgPSBgPHN0eWxlPiR7dGhpcy5jc3N9PC9zdHlsZT5gICsgdGhpcy5odG1sO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEVsZW1lbnRzV2l0aElkKCkge1xyXG5cclxuICAgICAgICBjb25zdCByZXMgPSB7fVxyXG4gICAgICAgIGNvbnN0IGVsZW1zID0gdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tpZF0nKVxyXG4gICAgXHJcbiAgICAgICAgZm9yIChjb25zdCBlbCBvZiBlbGVtcylcclxuICAgICAgICAgICAgcmVzW2VsLmlkXSA9IGVsXHJcbiAgICBcclxuICAgIFxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcblxyXG4gICAgX3NlbGVjdE1vZGUobW9kZSkge1xyXG4gICAgICAgIGZvciAoY29uc3QgaSBvZiBbMCwxLDJdKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbXNbYG1vZGUke2l9YF0ucmVtb3ZlQXR0cmlidXRlKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5lbGVtc1tgbW9kZSR7bW9kZX1gXS5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgYnJ1c2hTZXR0aW5ncy5tb2RlID0gbW9kZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcclxuICAgICAgICAvLyBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xyXG4gICAgICAgIGNvbnN0IGVsZW1zID0gdGhpcy5lbGVtcyA9IHRoaXMuZ2V0RWxlbWVudHNXaXRoSWQoKTtcclxuXHJcbiAgICAgICAgZWxlbXMuY29sb3IuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gZS50YXJnZXQudmFsdWU7XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSBwYXJzZUludChjb2xvci5zdWJzdHIoMSwyKSwgMTYpIC8gMjU1O1xyXG4gICAgICAgICAgICBjb25zdCBnID0gcGFyc2VJbnQoY29sb3Iuc3Vic3RyKDMsMiksIDE2KSAvIDI1NTtcclxuICAgICAgICAgICAgY29uc3QgYiA9IHBhcnNlSW50KGNvbG9yLnN1YnN0cig1LDIpLCAxNikgLyAyNTU7XHJcblxyXG4gICAgICAgICAgICBicnVzaFNldHRpbmdzLmNvbG9yID0gW3IsZyxiXTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZWxlbXMubW9kZTAub25jbGljayA9IChlKSA9PiB0aGlzLl9zZWxlY3RNb2RlKDApO1xyXG4gICAgICAgIGVsZW1zLm1vZGUxLm9uY2xpY2sgPSAoZSkgPT4gdGhpcy5fc2VsZWN0TW9kZSgxKTtcclxuICAgICAgICBlbGVtcy5tb2RlMi5vbmNsaWNrID0gKGUpID0+IHRoaXMuX3NlbGVjdE1vZGUoMik7XHJcblxyXG4gICAgICAgIGVsZW1zLnNpemUub25jaGFuZ2UgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICBicnVzaFNldHRpbmdzLnNpemUgPSArZS50YXJnZXQudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJicnVzaC1tZW51XCIsIEJydXNoTWVudSk7Il0sIm5hbWVzIjpbImJydXNoU2V0dGluZ3MiLCJjb21tb25DU1MiLCJCcnVzaE1lbnUiLCJIVE1MRWxlbWVudCIsImNzcyIsImh0bWwiLCJzaXplIiwiY29uc3RydWN0b3IiLCJhdHRhY2hTaGFkb3ciLCJtb2RlIiwic2hhZG93Um9vdCIsImlubmVySFRNTCIsImdldEVsZW1lbnRzV2l0aElkIiwicmVzIiwiZWxlbXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWwiLCJpZCIsIl9zZWxlY3RNb2RlIiwiaSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImNvbm5lY3RlZENhbGxiYWNrIiwiY29sb3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInRhcmdldCIsInZhbHVlIiwiciIsInBhcnNlSW50Iiwic3Vic3RyIiwiZyIsImIiLCJtb2RlMCIsIm9uY2xpY2siLCJtb2RlMSIsIm1vZGUyIiwib25jaGFuZ2UiLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/brushMenu.js\n");

/***/ }),

/***/ "./src/brushSettings.js":
/*!******************************!*\
  !*** ./src/brushSettings.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"brushSettings\": () => (/* binding */ brushSettings)\n/* harmony export */ });\nconst brushSettings = {\n  mode: 2,\n  size: 16,\n  color: [0, 0, 0]\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYnJ1c2hTZXR0aW5ncy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsYUFBYSxHQUFHO0VBQ3pCQyxJQUFJLEVBQUUsQ0FEbUI7RUFFekJDLElBQUksRUFBRSxFQUZtQjtFQUd6QkMsS0FBSyxFQUFFLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMO0FBSGtCLENBQXRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2JydXNoU2V0dGluZ3MuanM/NWQ1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgYnJ1c2hTZXR0aW5ncyA9IHtcclxuICAgIG1vZGU6IDIsXHJcbiAgICBzaXplOiAxNixcclxuICAgIGNvbG9yOiBbMCwwLDBdXHJcbn07Il0sIm5hbWVzIjpbImJydXNoU2V0dGluZ3MiLCJtb2RlIiwic2l6ZSIsImNvbG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/brushSettings.js\n");

/***/ }),

/***/ "./src/canvasContainer.js":
/*!********************************!*\
  !*** ./src/canvasContainer.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CanvasContainer\": () => (/* binding */ CanvasContainer)\n/* harmony export */ });\n/* harmony import */ var _canvasController_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canvasController.js */ \"./src/canvasController.js\");\n/* harmony import */ var _imageUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./imageUtils.js */ \"./src/imageUtils.js\");\n/* harmony import */ var _style_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../style.css */ \"./style.css\");\n/* harmony import */ var _icons_flip_x_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./icons/flip-x.svg */ \"./src/icons/flip-x.svg\");\n/* harmony import */ var _icons_flip_y_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./icons/flip-y.svg */ \"./src/icons/flip-y.svg\");\n/* harmony import */ var _icons_rotate_right_svg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./icons/rotate-right.svg */ \"./src/icons/rotate-right.svg\");\n/* harmony import */ var _icons_rotate_left_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./icons/rotate-left.svg */ \"./src/icons/rotate-left.svg\");\n/* harmony import */ var _icons_negate_svg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./icons/negate.svg */ \"./src/icons/negate.svg\");\n\n\n // icons\n\n\n\n\n\n\nclass CanvasContainer extends HTMLElement {\n  get css() {\n    return _style_css__WEBPACK_IMPORTED_MODULE_2__[\"default\"] +\n    /*css*/\n    `\n            canvas {\n                border: 1px grey solid;\n            }\n\n            input[type=file] {\n                width: 200px;\n            }\n\n            #title {\n                font-size: 24px;\n                font-family: Arial;\n            }\n        `;\n  }\n\n  get html() {\n    return (\n      /*html*/\n      `\n        <div class=\"column flex-grow-1\">\n            <div class=\"row justify-center\">\n                <span id=\"title\"></span>\n            </div>\n\n            <div class=\"row justify-center\">\n                <button title=\"Flip x\" id=\"flip-x-btn\">${_icons_flip_x_svg__WEBPACK_IMPORTED_MODULE_3__[\"default\"]}</button>\n                <button title=\"Flip y\" id=\"flip-y-btn\">${_icons_flip_y_svg__WEBPACK_IMPORTED_MODULE_4__[\"default\"]}</button>\n                <button title=\"Negate\" id=\"negate-btn\">${_icons_negate_svg__WEBPACK_IMPORTED_MODULE_7__[\"default\"]}</button>\n                <button title=\"Rotate left\" id=\"rot-l-btn\">${_icons_rotate_left_svg__WEBPACK_IMPORTED_MODULE_6__[\"default\"]}</button>\n                <button title=\"Rotate right\" id=\"rot-r-btn\">${_icons_rotate_right_svg__WEBPACK_IMPORTED_MODULE_5__[\"default\"]}</button>      \n            </div>\n\n            <div class=\"flex-grow-1\">\n                <canvas width=\"512\" height=\"512\"></canvas>\n            </div>\n\n            <div class=\"row justify-center\">\n                <button id=\"save-btn\">Save</button>\n                <input type=\"file\" id=\"file-input\" accept=\"image/*\">  \n            </div>\n        </div>\n        `\n    );\n  }\n\n  constructor() {\n    super();\n    this.attachShadow({\n      mode: 'open'\n    });\n    this.shadowRoot.innerHTML = `<style>${this.css}</style>` + this.html;\n  }\n\n  notifyImageChange() {\n    const event = new CustomEvent('image-change', {\n      detail: {\n        main: this.isMain\n      }\n    });\n    document.dispatchEvent(event);\n  }\n\n  _saveImage() {\n    const img = this.controller.getImage();\n    const link = document.createElement(\"a\");\n    link.href = img.src;\n    link.download = \"image\" + \".png\";\n    link.style.display = \"none\";\n    const evt = new MouseEvent(\"click\", {\n      \"view\": window,\n      \"bubbles\": true,\n      \"cancelable\": true\n    });\n    document.body.appendChild(link);\n    link.dispatchEvent(evt);\n    document.body.removeChild(link);\n  }\n\n  async _setImage(img) {\n    const file = this.fileInput.files[0];\n    if (!img) img = await (0,_imageUtils_js__WEBPACK_IMPORTED_MODULE_1__.loadImageByFile)(file);\n    img = await (0,_imageUtils_js__WEBPACK_IMPORTED_MODULE_1__.resizeImage)(img, 512, 512);\n    this.controller.setImage(img);\n    this.notifyImageChange();\n  }\n\n  getElementsWithId() {\n    const res = {};\n    const elems = this.shadowRoot.querySelectorAll('[id]');\n\n    for (const el of elems) res[el.id] = el;\n\n    return res;\n  }\n\n  connectedCallback() {\n    this.canvas = this.shadowRoot.querySelector('canvas');\n    this.isMain = this.hasAttribute('is-main');\n    this.controller = new _canvasController_js__WEBPACK_IMPORTED_MODULE_0__.CanvasController(this.canvas, this.isMain);\n\n    this.controller.drawHook = () => this.notifyImageChange();\n\n    const elems = this.getElementsWithId();\n    this.fileInput = elems['file-input'];\n    elems['title'].innerHTML = this.getAttribute('title');\n\n    elems['file-input'].onchange = () => this._setImage();\n\n    elems['save-btn'].onclick = () => this._saveImage();\n\n    elems['flip-x-btn'].onclick = () => {\n      this.controller.flipX();\n      this.notifyImageChange();\n    };\n\n    elems['flip-y-btn'].onclick = () => {\n      this.controller.flipY();\n      this.notifyImageChange();\n    };\n\n    elems['rot-l-btn'].onclick = () => {\n      this.controller.rotateLeft();\n      this.notifyImageChange();\n    };\n\n    elems['rot-r-btn'].onclick = () => {\n      this.controller.rotateRight();\n      this.notifyImageChange();\n    };\n\n    elems['negate-btn'].onclick = () => {\n      this.controller.negate();\n      this.notifyImageChange();\n    };\n  }\n\n}\ncustomElements.define(\"canvas-container\", CanvasContainer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/canvasContainer.js\n");

/***/ }),

/***/ "./src/canvasController.js":
/*!*********************************!*\
  !*** ./src/canvasController.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CanvasController\": () => (/* binding */ CanvasController)\n/* harmony export */ });\n/* harmony import */ var _igloo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./igloo.js */ \"./src/igloo.js\");\n/* harmony import */ var _brushSettings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./brushSettings.js */ \"./src/brushSettings.js\");\n/* harmony import */ var _glsl_draw_frag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glsl/draw.frag */ \"./src/glsl/draw.frag\");\n/* harmony import */ var _glsl_copy_frag__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glsl/copy.frag */ \"./src/glsl/copy.frag\");\n/* harmony import */ var _glsl_copy_vert__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./glsl/copy.vert */ \"./src/glsl/copy.vert\");\n/* harmony import */ var _glsl_bitReverse_frag__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./glsl/bitReverse.frag */ \"./src/glsl/bitReverse.frag\");\n/* harmony import */ var _glsl_dftAxis_frag__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./glsl/dftAxis.frag */ \"./src/glsl/dftAxis.frag\");\n/* harmony import */ var _glsl_logmap_frag__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./glsl/logmap.frag */ \"./src/glsl/logmap.frag\");\n/* harmony import */ var _glsl_unpolarmap_frag__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./glsl/unpolarmap.frag */ \"./src/glsl/unpolarmap.frag\");\n/* harmony import */ var _glsl_polarmap_frag__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./glsl/polarmap.frag */ \"./src/glsl/polarmap.frag\");\n/* harmony import */ var _glsl_matrix_frag__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./glsl/matrix.frag */ \"./src/glsl/matrix.frag\");\n/* harmony import */ var _glsl_negate_frag__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./glsl/negate.frag */ \"./src/glsl/negate.frag\");\n\n\n\n\n\n\n\n\n\n\n\n\nclass CanvasController {\n  constructor(canvas, isMain = false) {\n    this.canvas = canvas; // this.drawHook = drawHook;\n\n    this.viewsize = new Float32Array([canvas.width, canvas.height]);\n    var gl = canvas.getContext(\"webgl2\", {\n      preserveDrawingBuffer: true\n    });\n\n    if (!gl) {\n      alert('Your device does not support webgl2');\n      throw new Error('no webgl2');\n    }\n\n    this.gl = gl;\n    const ext = gl.getExtension(\"EXT_color_buffer_float\");\n\n    if (!ext) {\n      alert(\"need EXT_color_buffer_float\");\n      return;\n    }\n\n    gl.getExtension('WEBGL_color_buffer_float'); // do not flips images when used as input data for setImage\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    this.igloo = new _igloo_js__WEBPACK_IMPORTED_MODULE_0__.Igloo(gl);\n    this.quad = this.igloo.array(_igloo_js__WEBPACK_IMPORTED_MODULE_0__.Igloo.QUAD2);\n    this.program_copy = this.igloo.program(_glsl_copy_vert__WEBPACK_IMPORTED_MODULE_4__[\"default\"], _glsl_copy_frag__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n    this.program_draw = this.igloo.program(_glsl_copy_vert__WEBPACK_IMPORTED_MODULE_4__[\"default\"], _glsl_draw_frag__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n    this.program_matrix = this.igloo.program(_glsl_copy_vert__WEBPACK_IMPORTED_MODULE_4__[\"default\"], _glsl_matrix_frag__WEBPACK_IMPORTED_MODULE_10__[\"default\"]);\n    this.program_negate = this.igloo.program(_glsl_copy_vert__WEBPACK_IMPORTED_MODULE_4__[\"default\"], _glsl_negate_frag__WEBPACK_IMPORTED_MODULE_11__[\"default\"]);\n    this.program_bit_reverse = this.igloo.program(_glsl_copy_vert__WEBPACK_IMPORTED_MODULE_4__[\"default\"], _glsl_bitReverse_frag__WEBPACK_IMPORTED_MODULE_5__[\"default\"]);\n    this.program_logmap = this.igloo.program(_glsl_copy_vert__WEBPACK_IMPORTED_MODULE_4__[\"default\"], _glsl_logmap_frag__WEBPACK_IMPORTED_MODULE_7__[\"default\"]);\n    this.program_polarmap = this.igloo.program(_glsl_copy_vert__WEBPACK_IMPORTED_MODULE_4__[\"default\"], _glsl_polarmap_frag__WEBPACK_IMPORTED_MODULE_9__[\"default\"]);\n    this.program_unpolarmap = this.igloo.program(_glsl_copy_vert__WEBPACK_IMPORTED_MODULE_4__[\"default\"], _glsl_unpolarmap_frag__WEBPACK_IMPORTED_MODULE_8__[\"default\"]);\n    this.program_dft_axis = this.igloo.program(_glsl_copy_vert__WEBPACK_IMPORTED_MODULE_4__[\"default\"], _glsl_dftAxis_frag__WEBPACK_IMPORTED_MODULE_6__[\"default\"]);\n    this.frameBuffer = this.igloo.framebuffer();\n    this.tex_main = this.igloo.texture(null, gl.RGBA, gl.REPEAT, gl.NEAREST, gl.FLOAT, gl.RGBA32F).blank(this.viewsize[0], this.viewsize[1]);\n    this.tex_temp1 = this.igloo.texture(null, gl.RGBA, gl.REPEAT, gl.NEAREST, gl.FLOAT, gl.RGBA32F).blank(this.viewsize[0], this.viewsize[1]);\n\n    if (isMain) {\n      this.tex_temp2 = this.igloo.texture(null, gl.RGBA, gl.REPEAT, gl.NEAREST, gl.FLOAT, gl.RGBA32F).blank(this.viewsize[0], this.viewsize[1]);\n      this.tex_temp3 = this.igloo.texture(null, gl.RGBA, gl.REPEAT, gl.NEAREST, gl.FLOAT, gl.RGBA32F).blank(this.viewsize[0], this.viewsize[1]);\n      this.tex_temp4 = this.igloo.texture(null, gl.RGBA, gl.REPEAT, gl.NEAREST, gl.FLOAT, gl.RGBA32F).blank(this.viewsize[0], this.viewsize[1]);\n    }\n\n    this.show();\n\n    this._addEvents();\n  }\n\n  _swapTextures() {\n    this.sync();\n    var tmp = this.tex_main;\n    this.tex_main = this.tex_temp1;\n    this.tex_temp1 = tmp;\n  }\n\n  _getMousePos(event) {\n    var rect = this.canvas.getBoundingClientRect();\n    return [event.pageX - rect.left, this.canvas.height - (event.pageY - rect.top)];\n  }\n\n  _addEvents() {\n    this.start_pos = null;\n    this.canvas.addEventListener('mousedown', e => {\n      e.stopPropagation();\n      this.start_pos = this._getMousePos(e);\n      this.draw(this.start_pos, this.start_pos, _brushSettings_js__WEBPACK_IMPORTED_MODULE_1__.brushSettings.color, _brushSettings_js__WEBPACK_IMPORTED_MODULE_1__.brushSettings.size, _brushSettings_js__WEBPACK_IMPORTED_MODULE_1__.brushSettings.mode);\n    });\n    this.canvas.addEventListener('mousemove', e => {\n      e.stopPropagation();\n      if (!this.start_pos) return;\n\n      const end_pos = this._getMousePos(e);\n\n      this.draw(this.start_pos, end_pos, _brushSettings_js__WEBPACK_IMPORTED_MODULE_1__.brushSettings.color, _brushSettings_js__WEBPACK_IMPORTED_MODULE_1__.brushSettings.size, _brushSettings_js__WEBPACK_IMPORTED_MODULE_1__.brushSettings.mode);\n      this.start_pos = end_pos;\n    });\n    this.canvas.addEventListener('mouseup', e => {\n      e.stopPropagation();\n\n      if (this.drawHook && this.start_pos) {\n        this.sync();\n        this.drawHook(this);\n      }\n\n      this.start_pos = null;\n    });\n    this.canvas.addEventListener('mouseleave', e => {\n      e.stopPropagation();\n\n      if (this.drawHook && this.start_pos) {\n        this.sync();\n        this.drawHook(this);\n      }\n\n      this.start_pos = null;\n    });\n  }\n\n  sync() {\n    this.gl.finish();\n  }\n\n  getArray(texture, width, height, format) {\n    this.sync();\n    const gl = this.gl;\n    width = width ?? this.viewsize[0];\n    height = height ?? this.viewsize[1];\n    format = format ?? gl.RGBA;\n    texture = texture ? texture : this.tex_main;\n    var framebuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture.texture, 0); // Read the contents of the framebuffer\n\n    var data = new Float32Array(width * height * 4);\n    gl.readPixels(0, 0, width, height, gl.RGBA, gl.FLOAT, data);\n    return data;\n  }\n\n  _operation(program, f_args = {}, i_args = {}, m_args = {}, inPlace = true) {\n    this.sync();\n    const gl = this.gl;\n    this.frameBuffer.attach(this.tex_temp1);\n    gl.viewport(0, 0, this.viewsize[0], this.viewsize[1]);\n    this.tex_main.bind(0);\n    program = program.use().attrib('a_position', this.quad, 2).uniformi('u_texture', 0).uniform('screenSize', this.viewsize);\n\n    for (const [key, val] of Object.entries(f_args)) program = program.uniform(key, val);\n\n    for (const [key, val] of Object.entries(i_args)) program = program.uniformi(key, val);\n\n    for (const [key, val] of Object.entries(m_args)) program = program.matrix(key, val);\n\n    program.draw(gl.TRIANGLE_STRIP, 4);\n\n    if (!inPlace) {\n      return this.getArray(this.tex_temp1);\n    }\n\n    this._swapTextures();\n\n    this.show();\n  }\n\n  draw(from, to, col = null, rad = 5, mode = 2, inPlace = true) {\n    from = new Float32Array(from);\n    to = new Float32Array(to);\n    col = col ? new Float32Array(col) : new Float32Array([0, 0, 0, 1]);\n    col = col.length == 3 ? new Float32Array([...col, 1]) : col;\n    return this._operation(this.program_draw, {\n      u_org: from,\n      u_end: to,\n      u_col: col,\n      u_rad: rad - 1\n    }, {\n      u_mode: mode\n    }, {}, inPlace);\n  }\n\n  shift(dx, dy, inPlace = true) {\n    const u_offset = new Float32Array([dx, dy]);\n    return this._operation(this.program_copy, {\n      u_offset\n    }, {}, {}, inPlace);\n  }\n\n  bitReverse(inPlace = true) {\n    return this._operation(this.program_bit_reverse, {}, {}, {}, inPlace);\n  }\n\n  flipY(inPlace = true) {\n    const u_matrix = [1, 0, 0, -1];\n    return this._operation(this.program_matrix, {}, {}, {\n      u_matrix\n    }, inPlace);\n  }\n\n  flipX(inPlace = true) {\n    const u_matrix = [-1, 0, 0, 1];\n    return this._operation(this.program_matrix, {}, {}, {\n      u_matrix\n    }, inPlace);\n  }\n\n  rotateLeft(inPlace = true) {\n    const u_matrix = [0, -1, 1, 0];\n    return this._operation(this.program_matrix, {}, {}, {\n      u_matrix\n    }, inPlace);\n  }\n\n  rotateRight(inPlace = true) {\n    const u_matrix = [0, 1, -1, 0];\n    return this._operation(this.program_matrix, {}, {}, {\n      u_matrix\n    }, inPlace);\n  }\n\n  negate(inPlace = true) {\n    return this._operation(this.program_negate, {}, {}, {}, inPlace);\n  }\n\n  show() {\n    this.sync();\n    const gl = this.gl;\n    this.igloo.defaultFramebuffer.bind();\n    gl.viewport(0, 0, this.viewsize[0], this.viewsize[1]);\n    this.tex_main.bind(0);\n    this.program_copy.use().attrib('a_position', this.quad, 2).uniform('u_offset', new Float32Array([0, 0])).uniform('screenSize', this.viewsize).uniformi('u_texture', 0).draw(gl.TRIANGLE_STRIP, 4);\n  }\n\n  dft() {\n    function arrayMax(arr) {\n      var len = arr.length,\n          max = -Infinity;\n\n      while (len--) {\n        if (arr[len] > max) {\n          max = arr[len];\n        }\n      }\n\n      return max;\n    }\n\n    ;\n    const gl = this.gl;\n    this.tex_temp3.blank(512, 512); // run dft on one axis\n\n    this.frameBuffer.attach(this.tex_temp1); // out x\n\n    this.frameBuffer.attach(this.tex_temp2, 1); // out y\n\n    this.tex_main.bind(0); // in x\n\n    this.tex_temp3.bind(1); // no y yet\n\n    gl.viewport(0, 0, this.viewsize[0], this.viewsize[1]);\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1]);\n    this.program_dft_axis.use().attrib('a_position', this.quad, 2).uniform('screenSize', this.viewsize).uniformi('u_x', 0).uniformi('u_y', 1).uniform('u_direction', -1).uniformi('u_axis', 1).uniformi('u_normalise', 0).draw(gl.TRIANGLE_STRIP, 4); // run dft on other axis\n\n    this.frameBuffer.attach(this.tex_temp3); // out x\n\n    this.frameBuffer.attach(this.tex_temp4, 1); // out y\n\n    gl.viewport(0, 0, this.viewsize[0], this.viewsize[1]);\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1]);\n    this.tex_temp1.bind(0); // in x \n\n    this.tex_temp2.bind(1); // in y\n\n    this.program_dft_axis.use().attrib('a_position', this.quad, 2).uniform('screenSize', this.viewsize).uniformi('u_x', 0).uniformi('u_y', 1).uniform('u_direction', -1).uniformi('u_axis', 0).uniformi('u_normalise', 0).draw(gl.TRIANGLE_STRIP, 4); // x y to polar\n\n    this.frameBuffer.attach(this.tex_temp1); // out magn\n\n    this.frameBuffer.attach(this.tex_temp2, 1); // out phase\n\n    gl.viewport(0, 0, this.viewsize[0], this.viewsize[1]);\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1]);\n    this.tex_temp3.bind(0); // in x \n\n    this.tex_temp4.bind(1); // in y\n\n    this.program_polarmap.use().attrib('a_position', this.quad, 2).uniform('screenSize', this.viewsize).uniformi('u_x', 0).uniformi('u_y', 1).draw(gl.TRIANGLE_STRIP, 4); // find maixmum\n    // only a 1/64th of the whole texture, because maximum is usually in the center (0,0) anyway\n\n    const magnSample = this.getArray(this.tex_temp1, 64, 64, gl.RGB);\n    this.maxval = arrayMax(magnSample);\n    const phase = this.getArray(this.tex_temp2);\n    gl.deleteFramebuffer(this.frameBuffer.framebuffer);\n    this.frameBuffer = this.igloo.framebuffer();\n    gl.viewport(0, 0, this.viewsize[0], this.viewsize[1]);\n    this.frameBuffer.attach(this.tex_temp2);\n    this.tex_temp1.bind(0);\n    this.program_logmap.use().attrib('a_position', this.quad, 2).uniform('screenSize', this.viewsize).uniform('u_maxval', this.maxval).uniformi('u_texture', 0).draw(gl.TRIANGLE_STRIP, 4);\n    const magnitude = this.getArray(this.tex_temp2);\n    return {\n      magnitude,\n      phase\n    };\n  }\n\n  idft(magn, phase) {\n    const gl = this.gl;\n    this.tex_temp1.set(magn, this.viewsize[0], this.viewsize[1]);\n    this.tex_temp2.set(phase, this.viewsize[0], this.viewsize[1]); // from magnitude and phase to x and y     \n\n    this.frameBuffer.attach(this.tex_temp3);\n    this.frameBuffer.attach(this.tex_temp4, 1);\n    gl.viewport(0, 0, this.viewsize[0], this.viewsize[1]);\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1]);\n    this.tex_temp1.bind(0);\n    this.tex_temp2.bind(1);\n    this.program_unpolarmap.use().attrib('a_position', this.quad, 2).uniform('screenSize', this.viewsize).uniformi('u_magn', 0).uniformi('u_phase', 1).uniform('u_maxval', this.maxval).draw(gl.TRIANGLE_STRIP, 4); // run dft on one axis\n\n    this.frameBuffer.attach(this.tex_temp1);\n    this.frameBuffer.attach(this.tex_temp2, 1);\n    this.tex_temp3.bind(0); // x\n\n    this.tex_temp4.bind(1); // y\n\n    gl.viewport(0, 0, this.viewsize[0], this.viewsize[1]);\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1]);\n    this.program_dft_axis.use().attrib('a_position', this.quad, 2).uniform('screenSize', this.viewsize).uniformi('u_x', 0).uniformi('u_y', 1).uniform('u_direction', 1).uniformi('u_axis', 1).uniformi('u_normalise', 1).draw(gl.TRIANGLE_STRIP, 4); // run dft on other axis\n\n    this.frameBuffer.attach(this.tex_main);\n    this.frameBuffer.attach(this.tex_temp4, 1);\n    this.tex_temp1.bind(0); // x\n\n    this.tex_temp2.bind(1); // y\n\n    gl.viewport(0, 0, this.viewsize[0], this.viewsize[1]);\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1]);\n    this.program_dft_axis.use().attrib('a_position', this.quad, 2).uniform('screenSize', this.viewsize).uniformi('u_x', 0).uniformi('u_y', 1).uniform('u_direction', 1).uniformi('u_axis', 0).uniformi('u_normalise', 1).draw(gl.TRIANGLE_STRIP, 4);\n    gl.deleteFramebuffer(this.frameBuffer.framebuffer);\n    this.frameBuffer = this.igloo.framebuffer();\n    this.show();\n  }\n\n  setImage(img, w, h) {\n    this.sync();\n    this.tex_main.set(img, w, h);\n    this.show();\n  }\n\n  getImage() {\n    const img = new Image();\n    const url = this.canvas.toDataURL(\"image/png\");\n    img.src = url;\n    return img;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/canvasController.js\n");

/***/ }),

/***/ "./src/igloo.js":
/*!**********************!*\
  !*** ./src/igloo.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Igloo\": () => (/* binding */ Igloo)\n/* harmony export */ });\n/**\r\n * Wrap WebGLRenderingContext objects with useful behavior.\r\n * @param {WebGLRenderingContext|HTMLCanvasElement} gl\r\n * @param {Object} [options] to pass to getContext()\r\n * @returns {Igloo}\r\n * @namespace\r\n */\nfunction Igloo(gl, options) {\n  var canvas;\n\n  if (gl instanceof HTMLCanvasElement) {\n    canvas = gl;\n    gl = Igloo.getContext(gl, options);\n  } else {\n    canvas = gl.canvas;\n  }\n\n  this.gl = gl;\n  this.canvas = canvas;\n  this.defaultFramebuffer = new Igloo.Framebuffer(gl, null);\n}\n/**\r\n * To be used in a vec2 GL_TRIANGLE_STRIP draw.\r\n * @type {Float32Array}\r\n * @constant\r\n */\n\nIgloo.QUAD2 = new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]);\n/**\r\n * Asynchronously or synchronously fetch data from the server.\r\n * @param {string} url\r\n * @param {Function} [callback] if provided, call is asynchronous\r\n * @returns {string}\r\n */\n\nIgloo.fetch = function (url, callback) {\n  var xhr = new XMLHttpRequest();\n  xhr.open('GET', url, Boolean(callback));\n\n  if (callback != null) {\n    xhr.onload = function () {\n      callback(xhr.responseText);\n    };\n  }\n\n  xhr.send();\n  return xhr.responseText;\n};\n/**\r\n * @param {HTMLCanvasElement} canvas\r\n * @param {Object} [options] to pass to getContext()\r\n * @param {boolean} [noerror] If true, return null instead of throwing\r\n * @returns {?WebGLRenderingContext} a WebGL rendering context.\r\n */\n\n\nIgloo.getContext = function (canvas, options, noerror) {\n  var gl;\n\n  try {\n    gl = canvas.getContext('webgl', options || {}) || canvas.getContext('experimental-webgl', options || {});\n  } catch (e) {\n    gl = null;\n  }\n\n  if (gl == null && !noerror) {\n    throw new Error('Could not create WebGL context.');\n  } else {\n    return gl;\n  }\n};\n/**\r\n * @param {string} string\r\n * @returns {boolean} True if the string looks like a URL\r\n */\n\n\nIgloo.looksLikeURL = function (string) {\n  return /\\s/.exec(string) == null;\n};\n/**\r\n * @param {*} object\r\n * @returns {boolean} true if object is an array or typed array\r\n */\n\n\nIgloo.isArray = function (object) {\n  var name = Object.prototype.toString.apply(object, []),\n      re = / (Float(32|64)|Int(16|32|8)|Uint(16|32|8(Clamped)?))?Array]$/;\n  return re.exec(name) != null;\n};\n/**\r\n * Creates a program from a program configuration.\r\n *\r\n * @param {string} vertex URL or source of the vertex shader\r\n * @param {string} fragment URL or source of the fragment shader\r\n * @param {Function} [transform] Transforms the shaders before compilation\r\n * @returns {Igloo.Program}\r\n */\n\n\nIgloo.prototype.program = function (vertex, fragment, transform) {\n  if (Igloo.looksLikeURL(vertex)) vertex = Igloo.fetch(vertex);\n  if (Igloo.looksLikeURL(fragment)) fragment = Igloo.fetch(fragment);\n\n  if (transform != null) {\n    vertex = transform(vertex);\n    fragment = transform(fragment);\n  }\n\n  return new Igloo.Program(this.gl, vertex, fragment);\n};\n/**\r\n * Create a new GL_ARRAY_BUFFER with optional data.\r\n * @param {ArrayBuffer|ArrayBufferView} [data]\r\n * @param {GLenum} [usage]\r\n * @returns {Igloo.Buffer}\r\n */\n\n\nIgloo.prototype.array = function (data, usage) {\n  var gl = this.gl,\n      buffer = new Igloo.Buffer(gl, gl.ARRAY_BUFFER);\n\n  if (data != null) {\n    buffer.update(data, usage == null ? gl.STATIC_DRAW : usage);\n  }\n\n  return buffer;\n};\n/**\r\n * Create a new GL_ELEMENT_ARRAY_BUFFER with optional data.\r\n * @param {ArrayBuffer|ArrayBufferView} [data]\r\n * @param {GLenum} [usage]\r\n * @returns {Igloo.Buffer}\r\n */\n\n\nIgloo.prototype.elements = function (data, usage) {\n  var gl = this.gl,\n      buffer = new Igloo.Buffer(gl, gl.ELEMENT_ARRAY_BUFFER);\n\n  if (data != null) {\n    buffer.update(data, usage == null ? gl.STATIC_DRAW : usage);\n  }\n\n  return buffer;\n};\n/**\r\n * @param {TexImageSource} [source]\r\n * @param {GLenum} [format=GL_RGBA]\r\n * @param {GLenum} [wrap=GL_CLAMP_TO_EDGE]\r\n * @param {GLenum} [filter=GL_LINEAR]\r\n * @param {GLenum} [type=UNSIGNED_BYTE]\r\n * @param {GLenum} [internalFormat=GL_RGBA]\r\n * @param {Object} [options = {type: 'ArrayBufferView', width, height} || {}]\r\n * @returns {Igloo.Texture}\r\n */\n\n\nIgloo.prototype.texture = function (source, format, wrap, filter, type, internalFormat, options) {\n  var texture = new Igloo.Texture(this.gl, format, wrap, filter, type, internalFormat);\n\n  if (source != null) {\n    if (options && options.type === 'ArrayBufferView') {\n      texture.set(source, options.width, options.height);\n    } else {\n      texture.set(source);\n    }\n  }\n\n  return texture;\n};\n/**\r\n * @param {Igloo.Texture} [texture]\r\n * @returns {Igloo.Framebuffer}\r\n */\n\n\nIgloo.prototype.framebuffer = function (texture) {\n  var framebuffer = new Igloo.Framebuffer(this.gl);\n  if (texture != null) framebuffer.attach(texture);\n  return framebuffer;\n};\n/**\r\n * Fluent WebGLProgram wrapper for managing variables and data. The\r\n * constructor compiles and links a program from a pair of shaders.\r\n * Throws an exception if compiling or linking fails.\r\n * @param {WebGLRenderingContext} gl\r\n * @param {string} vertex Shader source\r\n * @param {string} fragment Shader source\r\n * @constructor\r\n */\n\n\nIgloo.Program = function (gl, vertex, fragment) {\n  this.gl = gl;\n  var p = this.program = gl.createProgram();\n  gl.attachShader(p, this.makeShader(gl.VERTEX_SHADER, vertex));\n  gl.attachShader(p, this.makeShader(gl.FRAGMENT_SHADER, fragment));\n  gl.linkProgram(p);\n\n  if (!gl.getProgramParameter(p, gl.LINK_STATUS)) {\n    throw new Error(gl.getProgramInfoLog(p));\n  }\n\n  this.vars = {};\n};\n/**\r\n * Compile a shader from source.\r\n * @param {number} type\r\n * @param {string} source\r\n * @returns {WebGLShader}\r\n */\n\n\nIgloo.Program.prototype.makeShader = function (type, source) {\n  var gl = this.gl;\n  var shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    return shader;\n  } else {\n    throw new Error(gl.getShaderInfoLog(shader));\n  }\n};\n/**\r\n * Tell WebGL to use this program right now.\r\n * @returns {Igloo.Program} this\r\n */\n\n\nIgloo.Program.prototype.use = function () {\n  this.gl.useProgram(this.program);\n  return this;\n};\n/**\r\n * Declare/set a uniform or set a uniform's data.\r\n * @param {string} name uniform variable name\r\n * @param {number|Array|ArrayBufferView} [value]\r\n * @param {boolean} [i] if true use the integer version\r\n * @returns {Igloo.Program} this\r\n */\n\n\nIgloo.Program.prototype.uniform = function (name, value, i, dim) {\n  if (value == null) {\n    this.vars[name] = this.gl.getUniformLocation(this.program, name);\n  } else {\n    if (this.vars[name] == null) this.uniform(name);\n    var v = this.vars[name];\n\n    if (Igloo.isArray(value)) {\n      var l = dim ? dim : value.length;\n      var method = 'uniform' + l + (i ? 'i' : 'f') + 'v';\n      this.gl[method](v, value);\n    } else if (typeof value === 'number' || typeof value === 'boolean') {\n      if (i) {\n        this.gl.uniform1i(v, value);\n      } else {\n        this.gl.uniform1f(v, value);\n      }\n    } else {\n      throw new Error('Invalid uniform value: ' + value);\n    }\n  }\n\n  return this;\n};\n/**\r\n * Set a uniform's data to a specific matrix.\r\n * @param {string} name uniform variable name\r\n * @param {Array|ArrayBufferView} matrix\r\n * @param {boolean} [transpose=false]\r\n * @returns {Igloo.Program} this\r\n */\n\n\nIgloo.Program.prototype.matrix = function (name, matrix, transpose) {\n  if (this.vars[name] == null) this.uniform(name);\n  var method = 'uniformMatrix' + Math.sqrt(matrix.length) + 'fv';\n  this.gl[method](this.vars[name], Boolean(transpose), matrix);\n  return this;\n};\n/**\r\n * Like the uniform() method, but using integers.\r\n * @returns {Igloo.Program} this\r\n */\n\n\nIgloo.Program.prototype.uniformi = function (name, value) {\n  return this.uniform(name, value, true);\n};\n/**\r\n * Declare an attrib or set an attrib's buffer.\r\n * @param {string} name attrib variable name\r\n * @param {WebGLBuffer} [value]\r\n * @param {number} [size] element size (required if value is provided)\r\n * @param {number} [stride=0]\r\n * @returns {Igloo.Program} this\r\n */\n\n\nIgloo.Program.prototype.attrib = function (name, value, size, stride) {\n  var gl = this.gl;\n\n  if (value == null) {\n    this.vars[name] = gl.getAttribLocation(this.program, name);\n  } else {\n    if (this.vars[name] == null) this.attrib(name); // get location\n\n    value.bind();\n    gl.enableVertexAttribArray(this.vars[name]);\n    gl.vertexAttribPointer(this.vars[name], size, gl.FLOAT, false, stride == null ? 0 : stride, 0);\n  }\n\n  return this;\n};\n/**\r\n * Call glDrawArrays or glDrawElements with this program.\r\n * @param {number} mode\r\n * @param {number} count the number of vertex attribs to render\r\n * @param {GLenum} [type] use glDrawElements of this type\r\n * @returns {Igloo.Program} this\r\n */\n\n\nIgloo.Program.prototype.draw = function (mode, count, type) {\n  var gl = this.gl;\n\n  if (type == null) {\n    gl.drawArrays(mode, 0, count);\n  } else {\n    gl.drawElements(mode, count, type, 0);\n  }\n\n  if (gl.getError() !== gl.NO_ERROR) {\n    throw new Error('WebGL rendering error');\n  }\n\n  return this;\n};\n/**\r\n * Disables all attribs from this program.\r\n * @returns {Igloo.Program} this\r\n */\n\n\nIgloo.Program.prototype.disable = function () {\n  for (var attrib in this.vars) {\n    var location = this.vars[attrib];\n\n    if (this.vars.hasOwnProperty(attrib)) {\n      if (typeof location === 'number') {\n        this.gl.disableVertexAttribArray(location);\n      }\n    }\n  }\n\n  return this;\n};\n/**\r\n * Fluent WebGLBuffer wrapper.\r\n * @param {WebGLRenderingContext} gl\r\n * @param {GLenum} [target] either GL_ARRAY_BUFFER or GL_ELEMENT_ARRAY_BUFFER\r\n * @returns {WebGLProgram}\r\n * @constructor\r\n */\n\n\nIgloo.Buffer = function (gl, target) {\n  this.gl = gl;\n  this.buffer = gl.createBuffer();\n  this.target = target == null ? gl.ARRAY_BUFFER : target;\n  this.size = -1;\n};\n/**\r\n * Binds this buffer to ARRAY_BUFFER.\r\n * @returns {Igloo.Buffer} this\r\n */\n\n\nIgloo.Buffer.prototype.bind = function () {\n  this.gl.bindBuffer(this.target, this.buffer);\n  return this;\n};\n/**\r\n * @param\r\n * @param {ArrayBuffer|ArrayBufferView} data\r\n * @param {GLenum} [usage]\r\n * @returns {Igloo.Buffer} this\r\n */\n\n\nIgloo.Buffer.prototype.update = function (data, usage) {\n  var gl = this.gl;\n\n  if (data instanceof Array) {\n    data = new Float32Array(data);\n  }\n\n  usage = usage == null ? gl.DYNAMIC_DRAW : usage;\n  this.bind();\n\n  if (this.size !== data.byteLength) {\n    gl.bufferData(this.target, data, usage);\n    this.size = data.byteLength;\n  } else {\n    gl.bufferSubData(this.target, 0, data);\n  }\n\n  return this;\n};\n/**\r\n * Create a new texture, optionally filled blank.\r\n * @param {WebGLRenderingContext} gl\r\n * @param {GLenum} [format=GL_RGBA]\r\n * @param {GLenum} [wrap=GL_CLAMP_TO_EDGE]\r\n * @param {GLenum} [filter=GL_LINEAR]\r\n * @param {GLenum} [type=UNSIGNED_BYTE]\r\n * @param {GLenum} [internalFormat=GL_RGBA]\r\n * @returns {Igloo.Texture}\r\n */\n\n\nIgloo.Texture = function (gl, format, wrap, filter, type, internalFormat) {\n  this.gl = gl;\n  var texture = this.texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  wrap = wrap == null ? gl.CLAMP_TO_EDGE : wrap;\n  filter = filter == null ? gl.LINEAR : filter;\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrap);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrap);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\n  this.format = format == null ? gl.RGBA : format;\n  this.internalFormat = internalFormat == null ? gl.RGBA : internalFormat;\n  this.type = type == null ? gl.UNSIGNED_BYTE : type;\n};\n/**\r\n * @param {number} [unit] active texture unit to bind\r\n * @returns {Igloo.Texture}\r\n */\n\n\nIgloo.Texture.prototype.bind = function (unit) {\n  var gl = this.gl;\n\n  if (unit != null) {\n    gl.activeTexture(gl.TEXTURE0 + unit);\n  }\n\n  gl.bindTexture(gl.TEXTURE_2D, this.texture);\n  return this;\n};\n/**\r\n * Set texture to particular size, filled with vec4(0, 0, 0, 1).\r\n * @param {number} width\r\n * @param {number} height\r\n * @returns {Igloo.Texture}\r\n */\n\n\nIgloo.Texture.prototype.blank = function (width, height) {\n  var gl = this.gl;\n  this.bind();\n  gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, width, height, 0, this.format, this.type, null);\n  return this;\n};\n/**\r\n * Set the texture to a particular image.\r\n * @param {Array|ArrayBufferView|TexImageSource} source\r\n * @param {number} [width]\r\n * @param {number} [height]\r\n * @returns {Igloo.Texture}\r\n */\n\n\nIgloo.Texture.prototype.set = function (source, width, height) {\n  var gl = this.gl;\n  this.bind();\n\n  if (source instanceof Array) {\n    if (this.type == gl.FLOAT) {\n      source = new Float32Array(source);\n    } else {\n      source = new Uint8Array(source);\n    }\n  }\n\n  if (width != null || height != null) {\n    gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, width, height, 0, this.format, this.type, source);\n  } else {\n    gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, this.format, this.type, source);\n  }\n\n  return this;\n};\n/**\r\n * Set part of the texture to a particular image.\r\n * @param {Array|ArrayBufferView|TexImageSource} source\r\n * @param {number} xoff\r\n * @param {number} yoff\r\n * @param {number} [width]\r\n * @param {number} [height]\r\n * @returns {Igloo.Texture}\r\n */\n\n\nIgloo.Texture.prototype.subset = function (source, xoff, yoff, width, height) {\n  var gl = this.gl;\n  this.bind();\n\n  if (source instanceof Array) {\n    if (this.type == gl.FLOAT) {\n      source = new Float32Array(source);\n    } else {\n      source = new Uint8Array(source);\n    }\n  }\n\n  if (width != null || height != null) {\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, xoff, yoff, width, height, this.format, this.type, source);\n  } else {\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, xoff, yoff, this.format, this.type, source);\n  }\n\n  return this;\n};\n/**\r\n * Copy part/all of the current framebuffer to this image.\r\n * @param {Array|ArrayBufferView|TexImageSource} source\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {number} width\r\n * @param {number} height\r\n * @returns {Igloo.Texture}\r\n */\n\n\nIgloo.Texture.prototype.copy = function (x, y, width, height) {\n  var gl = this.gl;\n  gl.copyTexImage2D(gl.TEXTURE_2D, 0, this.internalFormat, x, y, width, height, 0);\n  return this;\n};\n/**\r\n * @param {WebGLRenderingContext} gl\r\n * @param {WebGLFramebuffer} [framebuffer] to be wrapped (null for default)\r\n * @returns {Igloo.Framebuffer}\r\n */\n\n\nIgloo.Framebuffer = function (gl, framebuffer) {\n  this.gl = gl;\n  this.framebuffer = arguments.length == 2 ? framebuffer : gl.createFramebuffer();\n  this.renderbuffer = null;\n};\n/**\r\n * @returns {Igloo.Framebuffer}\r\n */\n\n\nIgloo.Framebuffer.prototype.bind = function () {\n  this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.framebuffer);\n  return this;\n};\n/**\r\n * @returns {Igloo.Framebuffer}\r\n */\n\n\nIgloo.Framebuffer.prototype.unbind = function () {\n  this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\n  return this;\n};\n/**\r\n * @param {Igloo.Texture} texture\r\n * @returns {Igloo.Framebuffer}\r\n */\n\n\nIgloo.Framebuffer.prototype.attach = function (texture, i = 0) {\n  var gl = this.gl;\n  if (i == 0) this.bind();\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.TEXTURE_2D, texture.texture, 0);\n  return this;\n};\n/**\r\n * @param {Igloo.Texture} array of textures\r\n * @returns {Igloo.Framebuffer}\r\n */\n\n\nIgloo.Framebuffer.prototype.attachArr = function (textures) {\n  var gl = this.gl;\n  var ext = gl.getExtension('WEBGL_draw_buffers');\n  var attachIdx = 0;\n  var arr = [];\n  this.bind();\n  textures.forEach(function (texture) {\n    var attachIdxStr = 'COLOR_ATTACHMENT' + attachIdx + '_WEBGL';\n    attachIdx += 1;\n    arr.push(ext[attachIdxStr]);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, ext[attachIdxStr], gl.TEXTURE_2D, texture.texture, 0);\n  });\n  console.log('attachArr');\n  console.log(arr);\n  ext.drawBuffersWEBGL(arr);\n  return this;\n};\n/**\r\n * Attach a renderbuffer as a depth buffer for depth-tested rendering.\r\n * @param {number} width\r\n * @param {number} height\r\n * @returns {Igloo.Framebuffer}\r\n */\n\n\nIgloo.Framebuffer.prototype.attachDepth = function (width, height) {\n  var gl = this.gl;\n  this.bind();\n\n  if (this.renderbuffer == null) {\n    this.renderbuffer = gl.createRenderbuffer();\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.renderbuffer);\n  }\n\n  return this;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/igloo.js\n");

/***/ }),

/***/ "./src/imageUtils.js":
/*!***************************!*\
  !*** ./src/imageUtils.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"loadImageByFile\": () => (/* binding */ loadImageByFile),\n/* harmony export */   \"loadImageByUrl\": () => (/* binding */ loadImageByUrl),\n/* harmony export */   \"loadImageFromCanvas\": () => (/* binding */ loadImageFromCanvas),\n/* harmony export */   \"resizeImage\": () => (/* binding */ resizeImage)\n/* harmony export */ });\n/* harmony import */ var pica__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pica */ \"./node_modules/pica/dist/pica.js\");\n/* harmony import */ var pica__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pica__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction loadImageByUrl(url) {\n  return new Promise(resolve => {\n    let i = new Image();\n\n    i.onload = () => resolve(i);\n\n    i.src = url;\n  });\n}\nfunction loadImageByFile(file) {\n  return new Promise(resolve => {\n    let reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = async () => {\n      const res = await loadImageByUrl(reader.result);\n      resolve(res);\n    };\n  });\n}\nasync function loadImageFromCanvas(canvas) {\n  const url = canvas.toDataURL();\n  return await loadImageByUrl(url);\n}\nasync function resizeImage(img, w, h) {\n  var canvas = document.createElement('canvas');\n  canvas.width = w;\n  canvas.height = h;\n  const p = new (pica__WEBPACK_IMPORTED_MODULE_0___default())();\n  await p.resize(img, canvas);\n  return await loadImageFromCanvas(canvas);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW1hZ2VVdGlscy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDQTtBQUVPLFNBQVNDLGNBQVQsQ0FBd0JDLEdBQXhCLEVBQTZCO0VBQ2hDLE9BQU8sSUFBSUMsT0FBSixDQUFZQyxPQUFPLElBQUk7SUFDMUIsSUFBSUMsQ0FBQyxHQUFHLElBQUlDLEtBQUosRUFBUjs7SUFDQUQsQ0FBQyxDQUFDRSxNQUFGLEdBQVksTUFBTUgsT0FBTyxDQUFDQyxDQUFELENBQXpCOztJQUNBQSxDQUFDLENBQUNHLEdBQUYsR0FBUU4sR0FBUjtFQUNILENBSk0sQ0FBUDtBQUtIO0FBRU0sU0FBU08sZUFBVCxDQUF5QkMsSUFBekIsRUFBK0I7RUFDbEMsT0FBTyxJQUFJUCxPQUFKLENBQVlDLE9BQU8sSUFBSTtJQUMxQixJQUFJTyxNQUFNLEdBQUcsSUFBSUMsVUFBSixFQUFiO0lBRUFELE1BQU0sQ0FBQ0UsYUFBUCxDQUFxQkgsSUFBckI7O0lBRUFDLE1BQU0sQ0FBQ0osTUFBUCxHQUFnQixZQUFZO01BQ3hCLE1BQU1PLEdBQUcsR0FBRyxNQUFNYixjQUFjLENBQUNVLE1BQU0sQ0FBQ0ksTUFBUixDQUFoQztNQUNBWCxPQUFPLENBQUNVLEdBQUQsQ0FBUDtJQUNILENBSEQ7RUFJSCxDQVRNLENBQVA7QUFVSDtBQUVNLGVBQWVFLG1CQUFmLENBQW1DQyxNQUFuQyxFQUEyQztFQUM5QyxNQUFNZixHQUFHLEdBQUdlLE1BQU0sQ0FBQ0MsU0FBUCxFQUFaO0VBQ0EsT0FBTyxNQUFNakIsY0FBYyxDQUFDQyxHQUFELENBQTNCO0FBQ0g7QUFFTSxlQUFlaUIsV0FBZixDQUEyQkMsR0FBM0IsRUFBZ0NDLENBQWhDLEVBQW1DQyxDQUFuQyxFQUFzQztFQUN6QyxJQUFJTCxNQUFNLEdBQUdNLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixRQUF2QixDQUFiO0VBQ0FQLE1BQU0sQ0FBQ1EsS0FBUCxHQUFlSixDQUFmO0VBQ0FKLE1BQU0sQ0FBQ1MsTUFBUCxHQUFnQkosQ0FBaEI7RUFFQSxNQUFNSyxDQUFDLEdBQUcsSUFBSTNCLDZDQUFKLEVBQVY7RUFDQSxNQUFNMkIsQ0FBQyxDQUFDQyxNQUFGLENBQVNSLEdBQVQsRUFBY0gsTUFBZCxDQUFOO0VBRUEsT0FBTyxNQUFNRCxtQkFBbUIsQ0FBQ0MsTUFBRCxDQUFoQztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlVXRpbHMuanM/MDQzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IFBpY2EgZnJvbSAncGljYScgXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbG9hZEltYWdlQnlVcmwodXJsKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgbGV0IGkgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICBpLm9ubG9hZCA9ICgoKSA9PiByZXNvbHZlKGkpKTtcclxuICAgICAgICBpLnNyYyA9IHVybDtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbG9hZEltYWdlQnlGaWxlKGZpbGUpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICBsZXQgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuXHJcbiAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcblxyXG4gICAgICAgIHJlYWRlci5vbmxvYWQgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGxvYWRJbWFnZUJ5VXJsKHJlYWRlci5yZXN1bHQpXHJcbiAgICAgICAgICAgIHJlc29sdmUocmVzKVxyXG4gICAgICAgIH07XHJcbiAgICB9KVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZEltYWdlRnJvbUNhbnZhcyhjYW52YXMpIHtcclxuICAgIGNvbnN0IHVybCA9IGNhbnZhcy50b0RhdGFVUkwoKTtcclxuICAgIHJldHVybiBhd2FpdCBsb2FkSW1hZ2VCeVVybCh1cmwpO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVzaXplSW1hZ2UoaW1nLCB3LCBoKSB7XHJcbiAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICBjYW52YXMud2lkdGggPSB3O1xyXG4gICAgY2FudmFzLmhlaWdodCA9IGg7XHJcblxyXG4gICAgY29uc3QgcCA9IG5ldyBQaWNhKCk7XHJcbiAgICBhd2FpdCBwLnJlc2l6ZShpbWcsIGNhbnZhcyk7XHJcblxyXG4gICAgcmV0dXJuIGF3YWl0IGxvYWRJbWFnZUZyb21DYW52YXMoY2FudmFzKVxyXG59Il0sIm5hbWVzIjpbIlBpY2EiLCJsb2FkSW1hZ2VCeVVybCIsInVybCIsIlByb21pc2UiLCJyZXNvbHZlIiwiaSIsIkltYWdlIiwib25sb2FkIiwic3JjIiwibG9hZEltYWdlQnlGaWxlIiwiZmlsZSIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJyZWFkQXNEYXRhVVJMIiwicmVzIiwicmVzdWx0IiwibG9hZEltYWdlRnJvbUNhbnZhcyIsImNhbnZhcyIsInRvRGF0YVVSTCIsInJlc2l6ZUltYWdlIiwiaW1nIiwidyIsImgiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ3aWR0aCIsImhlaWdodCIsInAiLCJyZXNpemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/imageUtils.js\n");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _canvasController_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canvasController.js */ \"./src/canvasController.js\");\n/* harmony import */ var _brushMenu_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./brushMenu.js */ \"./src/brushMenu.js\");\n/* harmony import */ var _canvasContainer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./canvasContainer.js */ \"./src/canvasContainer.js\");\n/* harmony import */ var _imageUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./imageUtils.js */ \"./src/imageUtils.js\");\n\n\n\n\nconst IMG_NUM = 10;\n\nif (document.readyState === \"complete\" || document.readyState !== \"loading\" && !document.documentElement.doScroll) {\n  main();\n} else {\n  document.addEventListener(\"DOMContentLoaded\", main);\n}\n\nfunction getElementsWithId() {\n  const res = {};\n  const elems = document.querySelectorAll('[id]');\n\n  for (const el of elems) res[el.id] = el;\n\n  return res;\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nasync function main() {\n  const elems = getElementsWithId();\n  const spaceCtrl = elems.space.controller;\n  const magnitudeCtrl = elems.magnitude.controller;\n  const phaseCtrl = elems.phase.controller;\n\n  const reverseFourier = async () => {\n    const magn = magnitudeCtrl.shift(-256, -256, false);\n    const phase = phaseCtrl.shift(-256, -256, false);\n    spaceCtrl.idft(magn, phase);\n  };\n\n  const forwardFourier = async () => {\n    const {\n      magnitude,\n      phase\n    } = spaceCtrl.dft();\n    magnitudeCtrl.setImage(magnitude, 512, 512);\n    magnitudeCtrl.shift(256, 256);\n    phaseCtrl.setImage(phase, 512, 512);\n    phaseCtrl.shift(256, 256);\n  };\n\n  document.addEventListener('image-change', e => {\n    if (e.detail.main) forwardFourier();else reverseFourier();\n  });\n  const num = getRandomInt(0, IMG_NUM);\n  const img = await (0,_imageUtils_js__WEBPACK_IMPORTED_MODULE_3__.loadImageByUrl)(`src/static/${num}.jpg`);\n\n  elems.space._setImage(img); // forwardFourier();\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Ly8vLi9zcmMvbWFpbi5qcz81NmQ3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhbnZhc0NvbnRyb2xsZXIgfSBmcm9tICcuL2NhbnZhc0NvbnRyb2xsZXIuanMnXHJcbmltcG9ydCB7IEJydXNoTWVudSB9IGZyb20gJy4vYnJ1c2hNZW51LmpzJztcclxuaW1wb3J0IHsgQ2FudmFzQ29udGFpbmVyIH0gZnJvbSAnLi9jYW52YXNDb250YWluZXIuanMnO1xyXG5pbXBvcnQgeyBsb2FkSW1hZ2VCeVVybCB9IGZyb20gJy4vaW1hZ2VVdGlscy5qcyc7XHJcblxyXG5jb25zdCBJTUdfTlVNPTEwO1xyXG5cclxuaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxyXG4gICAgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwpKSB7XHJcbiAgICBtYWluKCk7XHJcbn0gZWxzZSB7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBtYWluKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0RWxlbWVudHNXaXRoSWQoKSB7XHJcblxyXG4gICAgY29uc3QgcmVzID0ge31cclxuICAgIGNvbnN0IGVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2lkXScpXHJcblxyXG4gICAgZm9yIChjb25zdCBlbCBvZiBlbGVtcylcclxuICAgICAgICByZXNbZWwuaWRdID0gZWxcclxuXHJcblxyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UmFuZG9tSW50IChtaW4sIG1heCkge1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIG1haW4oKSB7XHJcbiAgICBjb25zdCBlbGVtcyA9IGdldEVsZW1lbnRzV2l0aElkKCk7XHJcblxyXG4gICAgXHJcblxyXG4gICAgY29uc3Qgc3BhY2VDdHJsID0gZWxlbXMuc3BhY2UuY29udHJvbGxlcjtcclxuICAgIGNvbnN0IG1hZ25pdHVkZUN0cmwgPSBlbGVtcy5tYWduaXR1ZGUuY29udHJvbGxlcjtcclxuICAgIGNvbnN0IHBoYXNlQ3RybCA9IGVsZW1zLnBoYXNlLmNvbnRyb2xsZXI7XHJcblxyXG4gICAgY29uc3QgcmV2ZXJzZUZvdXJpZXIgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbWFnbiA9IG1hZ25pdHVkZUN0cmwuc2hpZnQoLTI1NiwgLTI1NiwgZmFsc2UpO1xyXG4gICAgICAgIGNvbnN0IHBoYXNlID0gcGhhc2VDdHJsLnNoaWZ0KC0yNTYsIC0yNTYsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgc3BhY2VDdHJsLmlkZnQobWFnbiwgcGhhc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGZvcndhcmRGb3VyaWVyID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgbWFnbml0dWRlLCBwaGFzZSB9ID0gc3BhY2VDdHJsLmRmdCgpO1xyXG5cclxuICAgICAgICBtYWduaXR1ZGVDdHJsLnNldEltYWdlKG1hZ25pdHVkZSwgNTEyLCA1MTIpO1xyXG4gICAgICAgIG1hZ25pdHVkZUN0cmwuc2hpZnQoMjU2LCAyNTYpO1xyXG5cclxuICAgICAgICBwaGFzZUN0cmwuc2V0SW1hZ2UocGhhc2UsIDUxMiwgNTEyKTtcclxuICAgICAgICBwaGFzZUN0cmwuc2hpZnQoMjU2LCAyNTYpO1xyXG4gICAgfVxyXG4gICAgXHJcblxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW1hZ2UtY2hhbmdlJywgZSA9PiB7XHJcbiAgICAgICAgaWYgKGUuZGV0YWlsLm1haW4pIGZvcndhcmRGb3VyaWVyKCk7XHJcbiAgICAgICAgZWxzZSByZXZlcnNlRm91cmllcigpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgbnVtID0gZ2V0UmFuZG9tSW50KDAsIElNR19OVU0pO1xyXG4gICAgY29uc3QgaW1nID0gYXdhaXQgbG9hZEltYWdlQnlVcmwoYHNyYy9zdGF0aWMvJHtudW19LmpwZ2ApO1xyXG4gICAgZWxlbXMuc3BhY2UuX3NldEltYWdlKGltZyk7XHJcbiAgICAvLyBmb3J3YXJkRm91cmllcigpO1xyXG5cclxufSJdLCJuYW1lcyI6WyJDYW52YXNDb250cm9sbGVyIiwiQnJ1c2hNZW51IiwiQ2FudmFzQ29udGFpbmVyIiwibG9hZEltYWdlQnlVcmwiLCJJTUdfTlVNIiwiZG9jdW1lbnQiLCJyZWFkeVN0YXRlIiwiZG9jdW1lbnRFbGVtZW50IiwiZG9TY3JvbGwiLCJtYWluIiwiYWRkRXZlbnRMaXN0ZW5lciIsImdldEVsZW1lbnRzV2l0aElkIiwicmVzIiwiZWxlbXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWwiLCJpZCIsImdldFJhbmRvbUludCIsIm1pbiIsIm1heCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInNwYWNlQ3RybCIsInNwYWNlIiwiY29udHJvbGxlciIsIm1hZ25pdHVkZUN0cmwiLCJtYWduaXR1ZGUiLCJwaGFzZUN0cmwiLCJwaGFzZSIsInJldmVyc2VGb3VyaWVyIiwibWFnbiIsInNoaWZ0IiwiaWRmdCIsImZvcndhcmRGb3VyaWVyIiwiZGZ0Iiwic2V0SW1hZ2UiLCJlIiwiZGV0YWlsIiwibnVtIiwiaW1nIiwiX3NldEltYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main.js\n");

/***/ }),

/***/ "./src/glsl/bitReverse.frag":
/*!**********************************!*\
  !*** ./src/glsl/bitReverse.frag ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"#version 300 es\\r\\nprecision mediump float;\\r\\nuniform sampler2D u_texture;\\r\\nuniform vec2 screenSize;\\r\\n\\r\\nout vec4 outColor;\\r\\n\\r\\nint bitfieldReverse(int x, int digitNum)\\r\\n{\\r\\n  int res = 0;\\r\\n  int i, shift, mask;\\r\\n\\r\\n  for(i = 0; i < digitNum; i++) {\\r\\n    mask = 1 << i;\\r\\n    shift = digitNum - 2*i - 1;\\r\\n    mask &= x;\\r\\n    mask = (shift > 0) ? mask << shift : mask >> -shift;\\r\\n    res |= mask;\\r\\n  }\\r\\n\\r\\n  return res;\\r\\n}\\r\\n\\r\\nvoid main() {\\r\\n    int sizeX = int(floor(log2(screenSize.x)));\\r\\n    int sizeY = int(floor(log2(screenSize.y)));\\r\\n\\r\\n    int x = int(floor(gl_FragCoord.x));\\r\\n    int y = int(floor(gl_FragCoord.y));\\r\\n\\r\\n    float xx = float(bitfieldReverse(x, sizeX)) + 0.5;\\r\\n    float yy = float(bitfieldReverse(y, sizeY)) + 0.5;\\r\\n\\r\\n    vec2 pos = vec2(xx,yy);\\r\\n    outColor = texture(u_texture, pos / screenSize);\\r\\n}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZ2xzbC9iaXRSZXZlcnNlLmZyYWcuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLDRDQUE0QyxnQ0FBZ0MsNEJBQTRCLDBCQUEwQixxREFBcUQsa0JBQWtCLHlCQUF5QixxQkFBcUIsY0FBYyxNQUFNLHNCQUFzQixtQ0FBbUMsa0JBQWtCLDREQUE0RCxvQkFBb0IsT0FBTyxxQkFBcUIsS0FBSyxxQkFBcUIsbURBQW1ELG1EQUFtRCwrQ0FBK0MsMkNBQTJDLDhEQUE4RCwwREFBMEQsbUNBQW1DLHdEQUF3RCxLQUFLLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZ2xzbC9iaXRSZXZlcnNlLmZyYWc/OTE1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIiN2ZXJzaW9uIDMwMCBlc1xcclxcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcclxcbnVuaWZvcm0gc2FtcGxlcjJEIHVfdGV4dHVyZTtcXHJcXG51bmlmb3JtIHZlYzIgc2NyZWVuU2l6ZTtcXHJcXG5cXHJcXG5vdXQgdmVjNCBvdXRDb2xvcjtcXHJcXG5cXHJcXG5pbnQgYml0ZmllbGRSZXZlcnNlKGludCB4LCBpbnQgZGlnaXROdW0pXFxyXFxue1xcclxcbiAgaW50IHJlcyA9IDA7XFxyXFxuICBpbnQgaSwgc2hpZnQsIG1hc2s7XFxyXFxuXFxyXFxuICBmb3IoaSA9IDA7IGkgPCBkaWdpdE51bTsgaSsrKSB7XFxyXFxuICAgIG1hc2sgPSAxIDw8IGk7XFxyXFxuICAgIHNoaWZ0ID0gZGlnaXROdW0gLSAyKmkgLSAxO1xcclxcbiAgICBtYXNrICY9IHg7XFxyXFxuICAgIG1hc2sgPSAoc2hpZnQgPiAwKSA/IG1hc2sgPDwgc2hpZnQgOiBtYXNrID4+IC1zaGlmdDtcXHJcXG4gICAgcmVzIHw9IG1hc2s7XFxyXFxuICB9XFxyXFxuXFxyXFxuICByZXR1cm4gcmVzO1xcclxcbn1cXHJcXG5cXHJcXG52b2lkIG1haW4oKSB7XFxyXFxuICAgIGludCBzaXplWCA9IGludChmbG9vcihsb2cyKHNjcmVlblNpemUueCkpKTtcXHJcXG4gICAgaW50IHNpemVZID0gaW50KGZsb29yKGxvZzIoc2NyZWVuU2l6ZS55KSkpO1xcclxcblxcclxcbiAgICBpbnQgeCA9IGludChmbG9vcihnbF9GcmFnQ29vcmQueCkpO1xcclxcbiAgICBpbnQgeSA9IGludChmbG9vcihnbF9GcmFnQ29vcmQueSkpO1xcclxcblxcclxcbiAgICBmbG9hdCB4eCA9IGZsb2F0KGJpdGZpZWxkUmV2ZXJzZSh4LCBzaXplWCkpICsgMC41O1xcclxcbiAgICBmbG9hdCB5eSA9IGZsb2F0KGJpdGZpZWxkUmV2ZXJzZSh5LCBzaXplWSkpICsgMC41O1xcclxcblxcclxcbiAgICB2ZWMyIHBvcyA9IHZlYzIoeHgseXkpO1xcclxcbiAgICBvdXRDb2xvciA9IHRleHR1cmUodV90ZXh0dXJlLCBwb3MgLyBzY3JlZW5TaXplKTtcXHJcXG59XCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/glsl/bitReverse.frag\n");

/***/ }),

/***/ "./src/glsl/copy.frag":
/*!****************************!*\
  !*** ./src/glsl/copy.frag ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"#version 300 es\\r\\n\\r\\nprecision mediump float;\\r\\nuniform sampler2D u_texture;\\r\\nuniform vec2 screenSize;\\r\\nuniform vec2 u_offset;\\r\\n\\r\\nout vec4 outColor;\\r\\n\\r\\nvoid main() {\\r\\n    outColor = texture(u_texture, (gl_FragCoord.xy + u_offset) / screenSize);\\r\\n}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZ2xzbC9jb3B5LmZyYWcuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGdEQUFnRCxnQ0FBZ0MsNEJBQTRCLDBCQUEwQiwwQkFBMEIscUJBQXFCLGlGQUFpRixLQUFLLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZ2xzbC9jb3B5LmZyYWc/ODZlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIiN2ZXJzaW9uIDMwMCBlc1xcclxcblxcclxcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcclxcbnVuaWZvcm0gc2FtcGxlcjJEIHVfdGV4dHVyZTtcXHJcXG51bmlmb3JtIHZlYzIgc2NyZWVuU2l6ZTtcXHJcXG51bmlmb3JtIHZlYzIgdV9vZmZzZXQ7XFxyXFxuXFxyXFxub3V0IHZlYzQgb3V0Q29sb3I7XFxyXFxuXFxyXFxudm9pZCBtYWluKCkge1xcclxcbiAgICBvdXRDb2xvciA9IHRleHR1cmUodV90ZXh0dXJlLCAoZ2xfRnJhZ0Nvb3JkLnh5ICsgdV9vZmZzZXQpIC8gc2NyZWVuU2l6ZSk7XFxyXFxufVwiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/glsl/copy.frag\n");

/***/ }),

/***/ "./src/glsl/copy.vert":
/*!****************************!*\
  !*** ./src/glsl/copy.vert ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"#version 300 es\\r\\nin vec2 a_position;\\r\\nout vec2 v_texCoord;\\r\\n\\r\\nvoid main() {\\r\\n  \\r\\n  v_texCoord = a_position;\\r\\n  gl_Position = vec4(a_position, 0.0, 1.0);\\r\\n}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZ2xzbC9jb3B5LnZlcnQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLHVDQUF1Qyx3QkFBd0IscUJBQXFCLG9DQUFvQywrQ0FBK0MsS0FBSyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2dsc2wvY29weS52ZXJ0P2Y2NjIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIjdmVyc2lvbiAzMDAgZXNcXHJcXG5pbiB2ZWMyIGFfcG9zaXRpb247XFxyXFxub3V0IHZlYzIgdl90ZXhDb29yZDtcXHJcXG5cXHJcXG52b2lkIG1haW4oKSB7XFxyXFxuICBcXHJcXG4gIHZfdGV4Q29vcmQgPSBhX3Bvc2l0aW9uO1xcclxcbiAgZ2xfUG9zaXRpb24gPSB2ZWM0KGFfcG9zaXRpb24sIDAuMCwgMS4wKTtcXHJcXG59XCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/glsl/copy.vert\n");

/***/ }),

/***/ "./src/glsl/dftAxis.frag":
/*!*******************************!*\
  !*** ./src/glsl/dftAxis.frag ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"#version 300 es\\r\\n\\r\\nprecision mediump float;\\r\\nuniform sampler2D u_x;\\r\\nuniform sampler2D u_y;\\r\\n\\r\\nuniform vec2 screenSize;\\r\\n\\r\\nuniform float u_direction;\\r\\nuniform int u_normalise;\\r\\nuniform int u_axis;\\r\\n\\r\\n#define PI 3.1415926535897932384626433832795\\r\\n\\r\\nlayout(location = 0) out vec4 out_x;\\r\\nlayout(location = 1) out vec4 out_y;\\r\\n\\r\\nvec2 CMul(vec2 a, vec2 b) {\\r\\n    return vec2(a.x * b.x - a.y * b.y,  a.x * b.y + a.y * b.x);\\r\\n}\\r\\n\\r\\nvec2 CExp(vec2 c) {\\r\\n    float coef = exp(c.x);\\r\\n    return vec2(coef * cos(c.y), coef * sin(c.y));\\r\\n}\\r\\n\\r\\nvoid main() {\\r\\n    vec2 resR = vec2(0., 0.);\\r\\n    vec2 resG = vec2(0., 0.);\\r\\n    vec2 resB = vec2(0., 0.);\\r\\n\\r\\n    float k = gl_FragCoord.x - 0.5;\\r\\n    float l = gl_FragCoord.y - 0.5;\\r\\n\\r\\n    // magn = vec4(k,0,0,1);\\r\\n    // phase = vec4(l,0,0,1);\\r\\n\\r\\n    float N = screenSize.x;\\r\\n    float M = screenSize.y;\\r\\n\\r\\n    // columns\\r\\n    if (u_axis == 1) {\\r\\n        for(float i = 0.; i < N; i++) {\\r\\n            vec2 power = vec2(0., u_direction * 2. * PI * k * i / N);\\r\\n            vec2 mul = CExp(power);\\r\\n            vec4 term_x = texture(u_x, vec2(i+0.5, l+0.5) / screenSize);\\r\\n            vec4 term_y =  texture(u_y, vec2(i+0.5, l+0.5) / screenSize);\\r\\n\\r\\n\\r\\n            resR += CMul(vec2(term_x.x, term_y.x), mul);\\r\\n            resG += CMul(vec2(term_x.y, term_y.y), mul);\\r\\n            resB += CMul(vec2(term_x.z, term_y.z), mul);\\r\\n        }\\r\\n\\r\\n        if (u_normalise != 0) {\\r\\n            resR = resR / N;\\r\\n            resG = resG / N;\\r\\n            resB = resB / N;\\r\\n        }\\r\\n    } else {\\r\\n        for(float j = 0.; j < M; j++) {\\r\\n            vec2 power = vec2(0., u_direction * 2. * PI * l * j / M);\\r\\n            vec2 mul = CExp(power);\\r\\n            vec4 term_x = texture(u_x, vec2(k+0.5, j+0.5) / screenSize);\\r\\n            vec4 term_y =  texture(u_y, vec2(k+0.5, j+0.5) / screenSize);\\r\\n\\r\\n            resR += CMul(vec2(term_x.x, term_y.x), mul);\\r\\n            resG += CMul(vec2(term_x.y, term_y.y), mul);\\r\\n            resB += CMul(vec2(term_x.z, term_y.z), mul);\\r\\n        }\\r\\n\\r\\n        if (u_normalise != 0) {\\r\\n            resR = resR / M;\\r\\n            resG = resG / M;\\r\\n            resB = resB / M;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    out_x = vec4(resR.x, resG.x, resB.x, 1.);\\r\\n    out_y = vec4(resR.y, resG.y, resB.y, 1.);\\r\\n\\r\\n    return;\\r\\n}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZ2xzbC9kZnRBeGlzLmZyYWcuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGdEQUFnRCwwQkFBMEIsMEJBQTBCLGdDQUFnQyxrQ0FBa0MsNEJBQTRCLHVCQUF1QixnR0FBZ0csd0NBQXdDLG1DQUFtQyxtRUFBbUUsS0FBSywyQkFBMkIsOEJBQThCLHNEQUFzRCxLQUFLLHFCQUFxQixpQ0FBaUMsaUNBQWlDLGlDQUFpQywyQ0FBMkMsdUNBQXVDLG9DQUFvQyxpQ0FBaUMsbUNBQW1DLCtCQUErQixnREFBZ0QsOEJBQThCLE9BQU8sTUFBTSx5RUFBeUUsdUNBQXVDLDRFQUE0RSw2RUFBNkUsb0VBQW9FLDREQUE0RCw0REFBNEQsYUFBYSx1Q0FBdUMsZ0NBQWdDLGdDQUFnQyxnQ0FBZ0MsYUFBYSxVQUFVLE1BQU0sOEJBQThCLE9BQU8sTUFBTSx5RUFBeUUsdUNBQXVDLDRFQUE0RSw2RUFBNkUsZ0VBQWdFLDREQUE0RCw0REFBNEQsYUFBYSx1Q0FBdUMsZ0NBQWdDLGdDQUFnQyxnQ0FBZ0MsYUFBYSxTQUFTLHFEQUFxRCxpREFBaUQsbUJBQW1CLEtBQUssQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9nbHNsL2RmdEF4aXMuZnJhZz82NmY4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiI3ZlcnNpb24gMzAwIGVzXFxyXFxuXFxyXFxucHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxyXFxudW5pZm9ybSBzYW1wbGVyMkQgdV94O1xcclxcbnVuaWZvcm0gc2FtcGxlcjJEIHVfeTtcXHJcXG5cXHJcXG51bmlmb3JtIHZlYzIgc2NyZWVuU2l6ZTtcXHJcXG5cXHJcXG51bmlmb3JtIGZsb2F0IHVfZGlyZWN0aW9uO1xcclxcbnVuaWZvcm0gaW50IHVfbm9ybWFsaXNlO1xcclxcbnVuaWZvcm0gaW50IHVfYXhpcztcXHJcXG5cXHJcXG4jZGVmaW5lIFBJIDMuMTQxNTkyNjUzNTg5NzkzMjM4NDYyNjQzMzgzMjc5NVxcclxcblxcclxcbmxheW91dChsb2NhdGlvbiA9IDApIG91dCB2ZWM0IG91dF94O1xcclxcbmxheW91dChsb2NhdGlvbiA9IDEpIG91dCB2ZWM0IG91dF95O1xcclxcblxcclxcbnZlYzIgQ011bCh2ZWMyIGEsIHZlYzIgYikge1xcclxcbiAgICByZXR1cm4gdmVjMihhLnggKiBiLnggLSBhLnkgKiBiLnksICBhLnggKiBiLnkgKyBhLnkgKiBiLngpO1xcclxcbn1cXHJcXG5cXHJcXG52ZWMyIENFeHAodmVjMiBjKSB7XFxyXFxuICAgIGZsb2F0IGNvZWYgPSBleHAoYy54KTtcXHJcXG4gICAgcmV0dXJuIHZlYzIoY29lZiAqIGNvcyhjLnkpLCBjb2VmICogc2luKGMueSkpO1xcclxcbn1cXHJcXG5cXHJcXG52b2lkIG1haW4oKSB7XFxyXFxuICAgIHZlYzIgcmVzUiA9IHZlYzIoMC4sIDAuKTtcXHJcXG4gICAgdmVjMiByZXNHID0gdmVjMigwLiwgMC4pO1xcclxcbiAgICB2ZWMyIHJlc0IgPSB2ZWMyKDAuLCAwLik7XFxyXFxuXFxyXFxuICAgIGZsb2F0IGsgPSBnbF9GcmFnQ29vcmQueCAtIDAuNTtcXHJcXG4gICAgZmxvYXQgbCA9IGdsX0ZyYWdDb29yZC55IC0gMC41O1xcclxcblxcclxcbiAgICAvLyBtYWduID0gdmVjNChrLDAsMCwxKTtcXHJcXG4gICAgLy8gcGhhc2UgPSB2ZWM0KGwsMCwwLDEpO1xcclxcblxcclxcbiAgICBmbG9hdCBOID0gc2NyZWVuU2l6ZS54O1xcclxcbiAgICBmbG9hdCBNID0gc2NyZWVuU2l6ZS55O1xcclxcblxcclxcbiAgICAvLyBjb2x1bW5zXFxyXFxuICAgIGlmICh1X2F4aXMgPT0gMSkge1xcclxcbiAgICAgICAgZm9yKGZsb2F0IGkgPSAwLjsgaSA8IE47IGkrKykge1xcclxcbiAgICAgICAgICAgIHZlYzIgcG93ZXIgPSB2ZWMyKDAuLCB1X2RpcmVjdGlvbiAqIDIuICogUEkgKiBrICogaSAvIE4pO1xcclxcbiAgICAgICAgICAgIHZlYzIgbXVsID0gQ0V4cChwb3dlcik7XFxyXFxuICAgICAgICAgICAgdmVjNCB0ZXJtX3ggPSB0ZXh0dXJlKHVfeCwgdmVjMihpKzAuNSwgbCswLjUpIC8gc2NyZWVuU2l6ZSk7XFxyXFxuICAgICAgICAgICAgdmVjNCB0ZXJtX3kgPSAgdGV4dHVyZSh1X3ksIHZlYzIoaSswLjUsIGwrMC41KSAvIHNjcmVlblNpemUpO1xcclxcblxcclxcblxcclxcbiAgICAgICAgICAgIHJlc1IgKz0gQ011bCh2ZWMyKHRlcm1feC54LCB0ZXJtX3kueCksIG11bCk7XFxyXFxuICAgICAgICAgICAgcmVzRyArPSBDTXVsKHZlYzIodGVybV94LnksIHRlcm1feS55KSwgbXVsKTtcXHJcXG4gICAgICAgICAgICByZXNCICs9IENNdWwodmVjMih0ZXJtX3gueiwgdGVybV95LnopLCBtdWwpO1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgaWYgKHVfbm9ybWFsaXNlICE9IDApIHtcXHJcXG4gICAgICAgICAgICByZXNSID0gcmVzUiAvIE47XFxyXFxuICAgICAgICAgICAgcmVzRyA9IHJlc0cgLyBOO1xcclxcbiAgICAgICAgICAgIHJlc0IgPSByZXNCIC8gTjtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfSBlbHNlIHtcXHJcXG4gICAgICAgIGZvcihmbG9hdCBqID0gMC47IGogPCBNOyBqKyspIHtcXHJcXG4gICAgICAgICAgICB2ZWMyIHBvd2VyID0gdmVjMigwLiwgdV9kaXJlY3Rpb24gKiAyLiAqIFBJICogbCAqIGogLyBNKTtcXHJcXG4gICAgICAgICAgICB2ZWMyIG11bCA9IENFeHAocG93ZXIpO1xcclxcbiAgICAgICAgICAgIHZlYzQgdGVybV94ID0gdGV4dHVyZSh1X3gsIHZlYzIoayswLjUsIGorMC41KSAvIHNjcmVlblNpemUpO1xcclxcbiAgICAgICAgICAgIHZlYzQgdGVybV95ID0gIHRleHR1cmUodV95LCB2ZWMyKGsrMC41LCBqKzAuNSkgLyBzY3JlZW5TaXplKTtcXHJcXG5cXHJcXG4gICAgICAgICAgICByZXNSICs9IENNdWwodmVjMih0ZXJtX3gueCwgdGVybV95LngpLCBtdWwpO1xcclxcbiAgICAgICAgICAgIHJlc0cgKz0gQ011bCh2ZWMyKHRlcm1feC55LCB0ZXJtX3kueSksIG11bCk7XFxyXFxuICAgICAgICAgICAgcmVzQiArPSBDTXVsKHZlYzIodGVybV94LnosIHRlcm1feS56KSwgbXVsKTtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIGlmICh1X25vcm1hbGlzZSAhPSAwKSB7XFxyXFxuICAgICAgICAgICAgcmVzUiA9IHJlc1IgLyBNO1xcclxcbiAgICAgICAgICAgIHJlc0cgPSByZXNHIC8gTTtcXHJcXG4gICAgICAgICAgICByZXNCID0gcmVzQiAvIE07XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgb3V0X3ggPSB2ZWM0KHJlc1IueCwgcmVzRy54LCByZXNCLngsIDEuKTtcXHJcXG4gICAgb3V0X3kgPSB2ZWM0KHJlc1IueSwgcmVzRy55LCByZXNCLnksIDEuKTtcXHJcXG5cXHJcXG4gICAgcmV0dXJuO1xcclxcbn1cIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/glsl/dftAxis.frag\n");

/***/ }),

/***/ "./src/glsl/draw.frag":
/*!****************************!*\
  !*** ./src/glsl/draw.frag ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"#version 300 es\\r\\n\\r\\nprecision mediump float;\\r\\nuniform sampler2D u_texture;\\r\\nuniform vec2 screenSize;\\r\\n\\r\\nuniform vec2 u_org;\\r\\nuniform vec2 u_end;\\r\\nuniform float u_rad;\\r\\nuniform vec4 u_col;\\r\\n\\r\\nuniform int u_mode;\\r\\n\\r\\nout vec4 outColor;\\r\\n\\r\\nfloat d_1(vec2 o, vec2 e) {\\r\\n    vec2 delta = abs(e - o);\\r\\n    // if(delta.x > 0.5 * screenSize.x)\\r\\n    //     delta.x = screenSize.x - delta.x;\\r\\n\\r\\n    // if(delta.y > 0.5 * screenSize.y)\\r\\n    //     delta.y = screenSize.y - delta.y;\\r\\n\\r\\n    return delta.x + delta.y;\\r\\n}\\r\\n\\r\\n\\r\\nfloat d_2(vec2 o, vec2 e) {\\r\\n    vec2 delta = abs(e - o);\\r\\n    // if(delta.x > 0.5 * screenSize.x)\\r\\n    //     delta.x = screenSize.x - delta.x;\\r\\n\\r\\n    // if(delta.y > 0.5 * screenSize.y)\\r\\n    //     delta.y = screenSize.y - delta.y;\\r\\n\\r\\n    delta = delta * delta;\\r\\n    return sqrt(delta.x + delta.y);\\r\\n}\\r\\n\\r\\nfloat d_inf(vec2 o, vec2 e) {\\r\\n    vec2 delta = abs(e - o);\\r\\n    // if(delta.x > 0.5 * screenSize.x)\\r\\n    //     delta.x = screenSize.x - delta.x;\\r\\n\\r\\n    // if(delta.y > 0.5 * screenSize.y)\\r\\n    //     delta.y = screenSize.y - delta.y;\\r\\n\\r\\n    return max(delta.x, delta.y);\\r\\n}\\r\\n\\r\\nfloat dist(vec2 a, vec2 b) {\\r\\n    if(u_mode == 0)\\r\\n        return d_inf(a,b);\\r\\n\\r\\n    if(u_mode == 1)\\r\\n        return d_1(a,b);\\r\\n\\r\\n    return d_2(a,b);\\r\\n}\\r\\n\\r\\nfloat ldist_1(vec2 v, vec2 w, vec2 p) {\\r\\n    // we wanna solve for t \\r\\n    // v + t*(w-v) = (x,_)\\r\\n    // or\\r\\n    // v + t*(w-v) = (_,y)\\r\\n    // Coz shortest path in manhattan is a straight vertical or horizontal line\\r\\n\\r\\n    vec2 txy = (p - v) / (w - v);\\r\\n\\r\\n    txy = clamp(txy, vec2(0.0, 0.0), vec2(1.0, 1.0));\\r\\n    vec2 projection_x = v + txy.x * (w - v);  // Projection falls on the segment\\r\\n    vec2 projection_y = v + txy.y * (w - v);  // Projection falls on the segment\\r\\n    return min(dist(p, projection_x), dist(p, projection_y));\\r\\n}\\r\\n\\r\\nfloat ldist_inf(vec2 v, vec2 w, vec2 p) {\\r\\n    // we wanna solve for t \\r\\n    // v + t*(w-v) = p + _ * (1, -1)\\r\\n    // or\\r\\n    // v + t*(w-v) = p + _ * (1, -1)\\r\\n    // Coz shortest path in inf_norm is a straight diagonal line\\r\\n\\r\\n    float t_pp = (p.x - v.x + v.y - p.y) / (w.x - v.x - w.y + v.y);\\r\\n    float t_pm = (p.x - v.x - v.y + p.y) / (w.x - v.x + w.y - v.y);\\r\\n\\r\\n    t_pp = clamp(t_pp, 0.0, 1.0);\\r\\n    t_pm = clamp(t_pm, 0.0, 1.0);\\r\\n    vec2 projection_pp = v + t_pp * (w - v);  // Projection falls on the segment\\r\\n    vec2 projection_pm = v + t_pm * (w - v);  // Projection falls on the segment\\r\\n    return min(dist(p, projection_pp), dist(p, projection_pm));\\r\\n}\\r\\n\\r\\nfloat ldist_2(vec2 v, vec2 w, vec2 p) {\\r\\n    // Consider the line extending the segment, parameterized as v + t (w - v).\\r\\n    // We find projection of point p onto the line. \\r\\n    // It falls where t = [(p-v) . (w-v)] / |w-v|^2\\r\\n    // We clamp t from [0,1] to handle points outside the segment vw.\\r\\n    float t = clamp(dot(p - v, w - v) / dot(v - w, v - w), 0.0, 1.0);\\r\\n    vec2 projection = v + t * (w - v);  // Projection falls on the segment\\r\\n    return dist(p, projection);\\r\\n}\\r\\n\\r\\nfloat line_dist(vec2 v, vec2 w, vec2 p) {\\r\\n    // Return minimum distance between line segment vw and point p\\r\\n    float l2 = dot(v - w, v - w);  // i.e. |w-v|^2 -  avoid a sqrt\\r\\n    if (l2 < 1.0) return dist(p, v);   // v == w case\\r\\n    \\r\\n    if(u_mode == 0)\\r\\n        return ldist_inf(v,w,p);\\r\\n\\r\\n    if(u_mode == 1)\\r\\n        return ldist_1(v,w,p);\\r\\n\\r\\n    return ldist_2(v,w,p);\\r\\n}\\r\\n\\r\\nvoid main(){\\r\\n\\r\\n    outColor = texture(u_texture, gl_FragCoord.xy / screenSize);\\r\\n\\r\\n    if(line_dist(u_org, u_end, gl_FragCoord.xy) <= u_rad + 0.55)\\r\\n    {\\r\\n        outColor=u_col;\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    float dx = 0.0;\\r\\n    float dy = 0.0;\\r\\n    vec2 tempOrg = u_org;\\r\\n    vec2 tempEnd = u_end;\\r\\n\\r\\n    return;\\r\\n    // wrap for thick brushes\\r\\n    \\r\\n    if(gl_FragCoord.x <= u_rad)\\r\\n        dx = screenSize.x;\\r\\n    else if(gl_FragCoord.x >= screenSize.x - u_rad)\\r\\n        dx = -screenSize.x;\\r\\n\\r\\n    if(dx!=0.0 && line_dist(u_org, u_end, gl_FragCoord.xy + vec2(dx,0)) <= u_rad + 0.55)\\r\\n    {\\r\\n        outColor=u_col;\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if(gl_FragCoord.y <= u_rad)\\r\\n        dy = screenSize.y;\\r\\n    else if(gl_FragCoord.y >= screenSize.y - u_rad)\\r\\n        dy = -screenSize.y;\\r\\n\\r\\n    if(dy!=0.0 && line_dist(u_org, u_end, gl_FragCoord.xy + vec2(0,dy)) <= u_rad + 0.55)\\r\\n    {\\r\\n        outColor=u_col;\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if(dy!=0.0 && dx!=0.0 && line_dist(u_org, u_end, gl_FragCoord.xy + vec2(dx,dy)) <= u_rad + 0.55)\\r\\n    {\\r\\n        outColor=u_col;\\r\\n        return;\\r\\n    }\\r\\n}\\r\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZ2xzbC9kcmF3LmZyYWcuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGdEQUFnRCxnQ0FBZ0MsNEJBQTRCLDJCQUEyQix1QkFBdUIsd0JBQXdCLHVCQUF1QiwyQkFBMkIsMEJBQTBCLG1DQUFtQyxnQ0FBZ0MsMkZBQTJGLCtGQUErRixxQ0FBcUMsS0FBSyx1Q0FBdUMsZ0NBQWdDLDJGQUEyRiwrRkFBK0Ysa0NBQWtDLHVDQUF1QyxLQUFLLHFDQUFxQyxnQ0FBZ0MsMkZBQTJGLCtGQUErRix5Q0FBeUMsS0FBSyxvQ0FBb0MscURBQXFELHVEQUF1RCw0QkFBNEIsS0FBSywrQ0FBK0MscU9BQXFPLDZEQUE2RCxrREFBa0Qsb0ZBQW9GLG1HQUFtRyxLQUFLLGlEQUFpRCw0UUFBNFEsdUVBQXVFLHlDQUF5QyxxQ0FBcUMsa0RBQWtELG9GQUFvRixxR0FBcUcsS0FBSywrQ0FBK0Msb1ZBQW9WLDRDQUE0QyxxRUFBcUUsS0FBSyxpREFBaUQsNkdBQTZHLDBFQUEwRSxpRkFBaUYsNkRBQTZELGtDQUFrQyxLQUFLLG9CQUFvQix3RUFBd0UsaUZBQWlGLDJCQUEyQixtQkFBbUIsU0FBUywyQkFBMkIsdUJBQXVCLDZCQUE2Qiw2QkFBNkIsbUJBQW1CLDBHQUEwRyxzRkFBc0YseUdBQXlHLDJCQUEyQixtQkFBbUIsU0FBUyxxRUFBcUUsc0ZBQXNGLHlHQUF5RywyQkFBMkIsbUJBQW1CLFNBQVMscUhBQXFILDJCQUEyQixtQkFBbUIsU0FBUyxLQUFLLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZ2xzbC9kcmF3LmZyYWc/MmJmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIiN2ZXJzaW9uIDMwMCBlc1xcclxcblxcclxcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcclxcbnVuaWZvcm0gc2FtcGxlcjJEIHVfdGV4dHVyZTtcXHJcXG51bmlmb3JtIHZlYzIgc2NyZWVuU2l6ZTtcXHJcXG5cXHJcXG51bmlmb3JtIHZlYzIgdV9vcmc7XFxyXFxudW5pZm9ybSB2ZWMyIHVfZW5kO1xcclxcbnVuaWZvcm0gZmxvYXQgdV9yYWQ7XFxyXFxudW5pZm9ybSB2ZWM0IHVfY29sO1xcclxcblxcclxcbnVuaWZvcm0gaW50IHVfbW9kZTtcXHJcXG5cXHJcXG5vdXQgdmVjNCBvdXRDb2xvcjtcXHJcXG5cXHJcXG5mbG9hdCBkXzEodmVjMiBvLCB2ZWMyIGUpIHtcXHJcXG4gICAgdmVjMiBkZWx0YSA9IGFicyhlIC0gbyk7XFxyXFxuICAgIC8vIGlmKGRlbHRhLnggPiAwLjUgKiBzY3JlZW5TaXplLngpXFxyXFxuICAgIC8vICAgICBkZWx0YS54ID0gc2NyZWVuU2l6ZS54IC0gZGVsdGEueDtcXHJcXG5cXHJcXG4gICAgLy8gaWYoZGVsdGEueSA+IDAuNSAqIHNjcmVlblNpemUueSlcXHJcXG4gICAgLy8gICAgIGRlbHRhLnkgPSBzY3JlZW5TaXplLnkgLSBkZWx0YS55O1xcclxcblxcclxcbiAgICByZXR1cm4gZGVsdGEueCArIGRlbHRhLnk7XFxyXFxufVxcclxcblxcclxcblxcclxcbmZsb2F0IGRfMih2ZWMyIG8sIHZlYzIgZSkge1xcclxcbiAgICB2ZWMyIGRlbHRhID0gYWJzKGUgLSBvKTtcXHJcXG4gICAgLy8gaWYoZGVsdGEueCA+IDAuNSAqIHNjcmVlblNpemUueClcXHJcXG4gICAgLy8gICAgIGRlbHRhLnggPSBzY3JlZW5TaXplLnggLSBkZWx0YS54O1xcclxcblxcclxcbiAgICAvLyBpZihkZWx0YS55ID4gMC41ICogc2NyZWVuU2l6ZS55KVxcclxcbiAgICAvLyAgICAgZGVsdGEueSA9IHNjcmVlblNpemUueSAtIGRlbHRhLnk7XFxyXFxuXFxyXFxuICAgIGRlbHRhID0gZGVsdGEgKiBkZWx0YTtcXHJcXG4gICAgcmV0dXJuIHNxcnQoZGVsdGEueCArIGRlbHRhLnkpO1xcclxcbn1cXHJcXG5cXHJcXG5mbG9hdCBkX2luZih2ZWMyIG8sIHZlYzIgZSkge1xcclxcbiAgICB2ZWMyIGRlbHRhID0gYWJzKGUgLSBvKTtcXHJcXG4gICAgLy8gaWYoZGVsdGEueCA+IDAuNSAqIHNjcmVlblNpemUueClcXHJcXG4gICAgLy8gICAgIGRlbHRhLnggPSBzY3JlZW5TaXplLnggLSBkZWx0YS54O1xcclxcblxcclxcbiAgICAvLyBpZihkZWx0YS55ID4gMC41ICogc2NyZWVuU2l6ZS55KVxcclxcbiAgICAvLyAgICAgZGVsdGEueSA9IHNjcmVlblNpemUueSAtIGRlbHRhLnk7XFxyXFxuXFxyXFxuICAgIHJldHVybiBtYXgoZGVsdGEueCwgZGVsdGEueSk7XFxyXFxufVxcclxcblxcclxcbmZsb2F0IGRpc3QodmVjMiBhLCB2ZWMyIGIpIHtcXHJcXG4gICAgaWYodV9tb2RlID09IDApXFxyXFxuICAgICAgICByZXR1cm4gZF9pbmYoYSxiKTtcXHJcXG5cXHJcXG4gICAgaWYodV9tb2RlID09IDEpXFxyXFxuICAgICAgICByZXR1cm4gZF8xKGEsYik7XFxyXFxuXFxyXFxuICAgIHJldHVybiBkXzIoYSxiKTtcXHJcXG59XFxyXFxuXFxyXFxuZmxvYXQgbGRpc3RfMSh2ZWMyIHYsIHZlYzIgdywgdmVjMiBwKSB7XFxyXFxuICAgIC8vIHdlIHdhbm5hIHNvbHZlIGZvciB0IFxcclxcbiAgICAvLyB2ICsgdCoody12KSA9ICh4LF8pXFxyXFxuICAgIC8vIG9yXFxyXFxuICAgIC8vIHYgKyB0Kih3LXYpID0gKF8seSlcXHJcXG4gICAgLy8gQ296IHNob3J0ZXN0IHBhdGggaW4gbWFuaGF0dGFuIGlzIGEgc3RyYWlnaHQgdmVydGljYWwgb3IgaG9yaXpvbnRhbCBsaW5lXFxyXFxuXFxyXFxuICAgIHZlYzIgdHh5ID0gKHAgLSB2KSAvICh3IC0gdik7XFxyXFxuXFxyXFxuICAgIHR4eSA9IGNsYW1wKHR4eSwgdmVjMigwLjAsIDAuMCksIHZlYzIoMS4wLCAxLjApKTtcXHJcXG4gICAgdmVjMiBwcm9qZWN0aW9uX3ggPSB2ICsgdHh5LnggKiAodyAtIHYpOyAgLy8gUHJvamVjdGlvbiBmYWxscyBvbiB0aGUgc2VnbWVudFxcclxcbiAgICB2ZWMyIHByb2plY3Rpb25feSA9IHYgKyB0eHkueSAqICh3IC0gdik7ICAvLyBQcm9qZWN0aW9uIGZhbGxzIG9uIHRoZSBzZWdtZW50XFxyXFxuICAgIHJldHVybiBtaW4oZGlzdChwLCBwcm9qZWN0aW9uX3gpLCBkaXN0KHAsIHByb2plY3Rpb25feSkpO1xcclxcbn1cXHJcXG5cXHJcXG5mbG9hdCBsZGlzdF9pbmYodmVjMiB2LCB2ZWMyIHcsIHZlYzIgcCkge1xcclxcbiAgICAvLyB3ZSB3YW5uYSBzb2x2ZSBmb3IgdCBcXHJcXG4gICAgLy8gdiArIHQqKHctdikgPSBwICsgXyAqICgxLCAtMSlcXHJcXG4gICAgLy8gb3JcXHJcXG4gICAgLy8gdiArIHQqKHctdikgPSBwICsgXyAqICgxLCAtMSlcXHJcXG4gICAgLy8gQ296IHNob3J0ZXN0IHBhdGggaW4gaW5mX25vcm0gaXMgYSBzdHJhaWdodCBkaWFnb25hbCBsaW5lXFxyXFxuXFxyXFxuICAgIGZsb2F0IHRfcHAgPSAocC54IC0gdi54ICsgdi55IC0gcC55KSAvICh3LnggLSB2LnggLSB3LnkgKyB2LnkpO1xcclxcbiAgICBmbG9hdCB0X3BtID0gKHAueCAtIHYueCAtIHYueSArIHAueSkgLyAody54IC0gdi54ICsgdy55IC0gdi55KTtcXHJcXG5cXHJcXG4gICAgdF9wcCA9IGNsYW1wKHRfcHAsIDAuMCwgMS4wKTtcXHJcXG4gICAgdF9wbSA9IGNsYW1wKHRfcG0sIDAuMCwgMS4wKTtcXHJcXG4gICAgdmVjMiBwcm9qZWN0aW9uX3BwID0gdiArIHRfcHAgKiAodyAtIHYpOyAgLy8gUHJvamVjdGlvbiBmYWxscyBvbiB0aGUgc2VnbWVudFxcclxcbiAgICB2ZWMyIHByb2plY3Rpb25fcG0gPSB2ICsgdF9wbSAqICh3IC0gdik7ICAvLyBQcm9qZWN0aW9uIGZhbGxzIG9uIHRoZSBzZWdtZW50XFxyXFxuICAgIHJldHVybiBtaW4oZGlzdChwLCBwcm9qZWN0aW9uX3BwKSwgZGlzdChwLCBwcm9qZWN0aW9uX3BtKSk7XFxyXFxufVxcclxcblxcclxcbmZsb2F0IGxkaXN0XzIodmVjMiB2LCB2ZWMyIHcsIHZlYzIgcCkge1xcclxcbiAgICAvLyBDb25zaWRlciB0aGUgbGluZSBleHRlbmRpbmcgdGhlIHNlZ21lbnQsIHBhcmFtZXRlcml6ZWQgYXMgdiArIHQgKHcgLSB2KS5cXHJcXG4gICAgLy8gV2UgZmluZCBwcm9qZWN0aW9uIG9mIHBvaW50IHAgb250byB0aGUgbGluZS4gXFxyXFxuICAgIC8vIEl0IGZhbGxzIHdoZXJlIHQgPSBbKHAtdikgLiAody12KV0gLyB8dy12fF4yXFxyXFxuICAgIC8vIFdlIGNsYW1wIHQgZnJvbSBbMCwxXSB0byBoYW5kbGUgcG9pbnRzIG91dHNpZGUgdGhlIHNlZ21lbnQgdncuXFxyXFxuICAgIGZsb2F0IHQgPSBjbGFtcChkb3QocCAtIHYsIHcgLSB2KSAvIGRvdCh2IC0gdywgdiAtIHcpLCAwLjAsIDEuMCk7XFxyXFxuICAgIHZlYzIgcHJvamVjdGlvbiA9IHYgKyB0ICogKHcgLSB2KTsgIC8vIFByb2plY3Rpb24gZmFsbHMgb24gdGhlIHNlZ21lbnRcXHJcXG4gICAgcmV0dXJuIGRpc3QocCwgcHJvamVjdGlvbik7XFxyXFxufVxcclxcblxcclxcbmZsb2F0IGxpbmVfZGlzdCh2ZWMyIHYsIHZlYzIgdywgdmVjMiBwKSB7XFxyXFxuICAgIC8vIFJldHVybiBtaW5pbXVtIGRpc3RhbmNlIGJldHdlZW4gbGluZSBzZWdtZW50IHZ3IGFuZCBwb2ludCBwXFxyXFxuICAgIGZsb2F0IGwyID0gZG90KHYgLSB3LCB2IC0gdyk7ICAvLyBpLmUuIHx3LXZ8XjIgLSAgYXZvaWQgYSBzcXJ0XFxyXFxuICAgIGlmIChsMiA8IDEuMCkgcmV0dXJuIGRpc3QocCwgdik7ICAgLy8gdiA9PSB3IGNhc2VcXHJcXG4gICAgXFxyXFxuICAgIGlmKHVfbW9kZSA9PSAwKVxcclxcbiAgICAgICAgcmV0dXJuIGxkaXN0X2luZih2LHcscCk7XFxyXFxuXFxyXFxuICAgIGlmKHVfbW9kZSA9PSAxKVxcclxcbiAgICAgICAgcmV0dXJuIGxkaXN0XzEodix3LHApO1xcclxcblxcclxcbiAgICByZXR1cm4gbGRpc3RfMih2LHcscCk7XFxyXFxufVxcclxcblxcclxcbnZvaWQgbWFpbigpe1xcclxcblxcclxcbiAgICBvdXRDb2xvciA9IHRleHR1cmUodV90ZXh0dXJlLCBnbF9GcmFnQ29vcmQueHkgLyBzY3JlZW5TaXplKTtcXHJcXG5cXHJcXG4gICAgaWYobGluZV9kaXN0KHVfb3JnLCB1X2VuZCwgZ2xfRnJhZ0Nvb3JkLnh5KSA8PSB1X3JhZCArIDAuNTUpXFxyXFxuICAgIHtcXHJcXG4gICAgICAgIG91dENvbG9yPXVfY29sO1xcclxcbiAgICAgICAgcmV0dXJuO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIGZsb2F0IGR4ID0gMC4wO1xcclxcbiAgICBmbG9hdCBkeSA9IDAuMDtcXHJcXG4gICAgdmVjMiB0ZW1wT3JnID0gdV9vcmc7XFxyXFxuICAgIHZlYzIgdGVtcEVuZCA9IHVfZW5kO1xcclxcblxcclxcbiAgICByZXR1cm47XFxyXFxuICAgIC8vIHdyYXAgZm9yIHRoaWNrIGJydXNoZXNcXHJcXG4gICAgXFxyXFxuICAgIGlmKGdsX0ZyYWdDb29yZC54IDw9IHVfcmFkKVxcclxcbiAgICAgICAgZHggPSBzY3JlZW5TaXplLng7XFxyXFxuICAgIGVsc2UgaWYoZ2xfRnJhZ0Nvb3JkLnggPj0gc2NyZWVuU2l6ZS54IC0gdV9yYWQpXFxyXFxuICAgICAgICBkeCA9IC1zY3JlZW5TaXplLng7XFxyXFxuXFxyXFxuICAgIGlmKGR4IT0wLjAgJiYgbGluZV9kaXN0KHVfb3JnLCB1X2VuZCwgZ2xfRnJhZ0Nvb3JkLnh5ICsgdmVjMihkeCwwKSkgPD0gdV9yYWQgKyAwLjU1KVxcclxcbiAgICB7XFxyXFxuICAgICAgICBvdXRDb2xvcj11X2NvbDtcXHJcXG4gICAgICAgIHJldHVybjtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBpZihnbF9GcmFnQ29vcmQueSA8PSB1X3JhZClcXHJcXG4gICAgICAgIGR5ID0gc2NyZWVuU2l6ZS55O1xcclxcbiAgICBlbHNlIGlmKGdsX0ZyYWdDb29yZC55ID49IHNjcmVlblNpemUueSAtIHVfcmFkKVxcclxcbiAgICAgICAgZHkgPSAtc2NyZWVuU2l6ZS55O1xcclxcblxcclxcbiAgICBpZihkeSE9MC4wICYmIGxpbmVfZGlzdCh1X29yZywgdV9lbmQsIGdsX0ZyYWdDb29yZC54eSArIHZlYzIoMCxkeSkpIDw9IHVfcmFkICsgMC41NSlcXHJcXG4gICAge1xcclxcbiAgICAgICAgb3V0Q29sb3I9dV9jb2w7XFxyXFxuICAgICAgICByZXR1cm47XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgaWYoZHkhPTAuMCAmJiBkeCE9MC4wICYmIGxpbmVfZGlzdCh1X29yZywgdV9lbmQsIGdsX0ZyYWdDb29yZC54eSArIHZlYzIoZHgsZHkpKSA8PSB1X3JhZCArIDAuNTUpXFxyXFxuICAgIHtcXHJcXG4gICAgICAgIG91dENvbG9yPXVfY29sO1xcclxcbiAgICAgICAgcmV0dXJuO1xcclxcbiAgICB9XFxyXFxufVxcclxcblwiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/glsl/draw.frag\n");

/***/ }),

/***/ "./src/glsl/logmap.frag":
/*!******************************!*\
  !*** ./src/glsl/logmap.frag ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"#version 300 es\\r\\n\\r\\nprecision mediump float;\\r\\nuniform sampler2D u_texture;\\r\\nuniform vec2 screenSize;\\r\\nuniform float u_maxval;\\r\\n\\r\\nout vec4 outColor;\\r\\n\\r\\nfloat logMap(float x) {\\r\\n    return log(1. + x)/log(1. + u_maxval);\\r\\n}\\r\\n\\r\\nvoid main() {\\r\\n    vec3 col = texture(u_texture, gl_FragCoord.xy / screenSize).xyz;\\r\\n    outColor = vec4(logMap(col.x), logMap(col.y), logMap(col.z), 1);\\r\\n}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZ2xzbC9sb2dtYXAuZnJhZy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsZ0RBQWdELGdDQUFnQyw0QkFBNEIsMkJBQTJCLDBCQUEwQiwrQkFBK0IsOENBQThDLEtBQUsscUJBQXFCLHdFQUF3RSx3RUFBd0UsS0FBSyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2dsc2wvbG9nbWFwLmZyYWc/YmQ5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIiN2ZXJzaW9uIDMwMCBlc1xcclxcblxcclxcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcclxcbnVuaWZvcm0gc2FtcGxlcjJEIHVfdGV4dHVyZTtcXHJcXG51bmlmb3JtIHZlYzIgc2NyZWVuU2l6ZTtcXHJcXG51bmlmb3JtIGZsb2F0IHVfbWF4dmFsO1xcclxcblxcclxcbm91dCB2ZWM0IG91dENvbG9yO1xcclxcblxcclxcbmZsb2F0IGxvZ01hcChmbG9hdCB4KSB7XFxyXFxuICAgIHJldHVybiBsb2coMS4gKyB4KS9sb2coMS4gKyB1X21heHZhbCk7XFxyXFxufVxcclxcblxcclxcbnZvaWQgbWFpbigpIHtcXHJcXG4gICAgdmVjMyBjb2wgPSB0ZXh0dXJlKHVfdGV4dHVyZSwgZ2xfRnJhZ0Nvb3JkLnh5IC8gc2NyZWVuU2l6ZSkueHl6O1xcclxcbiAgICBvdXRDb2xvciA9IHZlYzQobG9nTWFwKGNvbC54KSwgbG9nTWFwKGNvbC55KSwgbG9nTWFwKGNvbC56KSwgMSk7XFxyXFxufVwiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/glsl/logmap.frag\n");

/***/ }),

/***/ "./src/glsl/matrix.frag":
/*!******************************!*\
  !*** ./src/glsl/matrix.frag ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"#version 300 es\\r\\n\\r\\nprecision mediump float;\\r\\nuniform sampler2D u_texture;\\r\\nuniform vec2 screenSize;\\r\\n\\r\\nuniform mat2 u_matrix;\\r\\n\\r\\nout vec4 outColor;\\r\\n\\r\\nvoid main() {\\r\\n    vec2 coords_centered = gl_FragCoord.xy - screenSize / 2.;\\r\\n\\r\\n    vec2 coords_transformed = u_matrix * coords_centered;\\r\\n\\r\\n    vec2 coords_final = coords_transformed + screenSize / 2.;\\r\\n\\r\\n    outColor = texture(u_texture, coords_final / screenSize);\\r\\n}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZ2xzbC9tYXRyaXguZnJhZy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsZ0RBQWdELGdDQUFnQyw0QkFBNEIsOEJBQThCLDBCQUEwQixxQkFBcUIsaUVBQWlFLGlFQUFpRSxxRUFBcUUscUVBQXFFLEtBQUssQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9nbHNsL21hdHJpeC5mcmFnPzIwOWUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIjdmVyc2lvbiAzMDAgZXNcXHJcXG5cXHJcXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXHJcXG51bmlmb3JtIHNhbXBsZXIyRCB1X3RleHR1cmU7XFxyXFxudW5pZm9ybSB2ZWMyIHNjcmVlblNpemU7XFxyXFxuXFxyXFxudW5pZm9ybSBtYXQyIHVfbWF0cml4O1xcclxcblxcclxcbm91dCB2ZWM0IG91dENvbG9yO1xcclxcblxcclxcbnZvaWQgbWFpbigpIHtcXHJcXG4gICAgdmVjMiBjb29yZHNfY2VudGVyZWQgPSBnbF9GcmFnQ29vcmQueHkgLSBzY3JlZW5TaXplIC8gMi47XFxyXFxuXFxyXFxuICAgIHZlYzIgY29vcmRzX3RyYW5zZm9ybWVkID0gdV9tYXRyaXggKiBjb29yZHNfY2VudGVyZWQ7XFxyXFxuXFxyXFxuICAgIHZlYzIgY29vcmRzX2ZpbmFsID0gY29vcmRzX3RyYW5zZm9ybWVkICsgc2NyZWVuU2l6ZSAvIDIuO1xcclxcblxcclxcbiAgICBvdXRDb2xvciA9IHRleHR1cmUodV90ZXh0dXJlLCBjb29yZHNfZmluYWwgLyBzY3JlZW5TaXplKTtcXHJcXG59XCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/glsl/matrix.frag\n");

/***/ }),

/***/ "./src/glsl/negate.frag":
/*!******************************!*\
  !*** ./src/glsl/negate.frag ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"#version 300 es\\r\\n\\r\\nprecision mediump float;\\r\\nuniform sampler2D u_texture;\\r\\nuniform vec2 screenSize;\\r\\n\\r\\nuniform int u_mode;\\r\\n\\r\\nout vec4 outColor;\\r\\n\\r\\nvoid main() {\\r\\n    vec3 col = texture(u_texture, gl_FragCoord.xy / screenSize).xyz;\\r\\n    vec3 negCol = vec3(1.) - col;\\r\\n\\r\\n    outColor = vec4(negCol, 1.);\\r\\n}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZ2xzbC9uZWdhdGUuZnJhZy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsZ0RBQWdELGdDQUFnQyw0QkFBNEIsMkJBQTJCLDBCQUEwQixxQkFBcUIsd0VBQXdFLHFDQUFxQyx3Q0FBd0MsS0FBSyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2dsc2wvbmVnYXRlLmZyYWc/MzAzYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIiN2ZXJzaW9uIDMwMCBlc1xcclxcblxcclxcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcclxcbnVuaWZvcm0gc2FtcGxlcjJEIHVfdGV4dHVyZTtcXHJcXG51bmlmb3JtIHZlYzIgc2NyZWVuU2l6ZTtcXHJcXG5cXHJcXG51bmlmb3JtIGludCB1X21vZGU7XFxyXFxuXFxyXFxub3V0IHZlYzQgb3V0Q29sb3I7XFxyXFxuXFxyXFxudm9pZCBtYWluKCkge1xcclxcbiAgICB2ZWMzIGNvbCA9IHRleHR1cmUodV90ZXh0dXJlLCBnbF9GcmFnQ29vcmQueHkgLyBzY3JlZW5TaXplKS54eXo7XFxyXFxuICAgIHZlYzMgbmVnQ29sID0gdmVjMygxLikgLSBjb2w7XFxyXFxuXFxyXFxuICAgIG91dENvbG9yID0gdmVjNChuZWdDb2wsIDEuKTtcXHJcXG59XCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/glsl/negate.frag\n");

/***/ }),

/***/ "./src/glsl/polarmap.frag":
/*!********************************!*\
  !*** ./src/glsl/polarmap.frag ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"#version 300 es\\r\\n\\r\\nprecision mediump float;\\r\\nuniform sampler2D u_x;\\r\\nuniform sampler2D u_y;\\r\\nuniform vec2 screenSize;\\r\\n\\r\\n// uniform float u_maxval;\\r\\n\\r\\n#define PI 3.1415926535897932384626433832795\\r\\n\\r\\nlayout(location = 0) out vec4 outMagn;\\r\\nlayout(location = 1) out vec4 outPhase;\\r\\n\\r\\nvoid main() {\\r\\n    vec3 x = texture(u_x, gl_FragCoord.xy / screenSize).xyz;\\r\\n    vec3 y = texture(u_y, gl_FragCoord.xy / screenSize).xyz;\\r\\n\\r\\n    vec3 phase = (atan(y, x) + vec3(PI)) / PI / 2.;\\r\\n    vec3 magn = vec3(length(vec2(x.x, y.x)),  length(vec2(x.y, y.y)), length(vec2(x.z, y.z)));\\r\\n    // vec3 logMagn = log(vec3(1.) + magn)/log(1. + u_maxval);\\r\\n\\r\\n    outPhase = vec4(phase, 1.);\\r\\n    outMagn = vec4(magn, 1.);\\r\\n    return;\\r\\n}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZ2xzbC9wb2xhcm1hcC5mcmFnLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxnREFBZ0QsMEJBQTBCLDBCQUEwQiw0QkFBNEIsa0NBQWtDLGtHQUFrRywyQ0FBMkMscUJBQXFCLGdFQUFnRSxnRUFBZ0UsMkRBQTJELGtHQUFrRyxrRUFBa0UsdUNBQXVDLGlDQUFpQyxlQUFlLEtBQUssQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9nbHNsL3BvbGFybWFwLmZyYWc/OTQ0YyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIiN2ZXJzaW9uIDMwMCBlc1xcclxcblxcclxcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcclxcbnVuaWZvcm0gc2FtcGxlcjJEIHVfeDtcXHJcXG51bmlmb3JtIHNhbXBsZXIyRCB1X3k7XFxyXFxudW5pZm9ybSB2ZWMyIHNjcmVlblNpemU7XFxyXFxuXFxyXFxuLy8gdW5pZm9ybSBmbG9hdCB1X21heHZhbDtcXHJcXG5cXHJcXG4jZGVmaW5lIFBJIDMuMTQxNTkyNjUzNTg5NzkzMjM4NDYyNjQzMzgzMjc5NVxcclxcblxcclxcbmxheW91dChsb2NhdGlvbiA9IDApIG91dCB2ZWM0IG91dE1hZ247XFxyXFxubGF5b3V0KGxvY2F0aW9uID0gMSkgb3V0IHZlYzQgb3V0UGhhc2U7XFxyXFxuXFxyXFxudm9pZCBtYWluKCkge1xcclxcbiAgICB2ZWMzIHggPSB0ZXh0dXJlKHVfeCwgZ2xfRnJhZ0Nvb3JkLnh5IC8gc2NyZWVuU2l6ZSkueHl6O1xcclxcbiAgICB2ZWMzIHkgPSB0ZXh0dXJlKHVfeSwgZ2xfRnJhZ0Nvb3JkLnh5IC8gc2NyZWVuU2l6ZSkueHl6O1xcclxcblxcclxcbiAgICB2ZWMzIHBoYXNlID0gKGF0YW4oeSwgeCkgKyB2ZWMzKFBJKSkgLyBQSSAvIDIuO1xcclxcbiAgICB2ZWMzIG1hZ24gPSB2ZWMzKGxlbmd0aCh2ZWMyKHgueCwgeS54KSksICBsZW5ndGgodmVjMih4LnksIHkueSkpLCBsZW5ndGgodmVjMih4LnosIHkueikpKTtcXHJcXG4gICAgLy8gdmVjMyBsb2dNYWduID0gbG9nKHZlYzMoMS4pICsgbWFnbikvbG9nKDEuICsgdV9tYXh2YWwpO1xcclxcblxcclxcbiAgICBvdXRQaGFzZSA9IHZlYzQocGhhc2UsIDEuKTtcXHJcXG4gICAgb3V0TWFnbiA9IHZlYzQobWFnbiwgMS4pO1xcclxcbiAgICByZXR1cm47XFxyXFxufVwiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/glsl/polarmap.frag\n");

/***/ }),

/***/ "./src/glsl/unpolarmap.frag":
/*!**********************************!*\
  !*** ./src/glsl/unpolarmap.frag ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"#version 300 es\\r\\n\\r\\nprecision mediump float;\\r\\nuniform sampler2D u_magn;\\r\\nuniform sampler2D u_phase;\\r\\nuniform vec2 screenSize;\\r\\n\\r\\nuniform float u_maxval;\\r\\n\\r\\n#define PI 3.1415926535897932384626433832795\\r\\n\\r\\nlayout(location = 0) out vec4 outX;\\r\\nlayout(location = 1) out vec4 outY;\\r\\n\\r\\nvoid main() {\\r\\n    vec3 logmagn = texture(u_magn, gl_FragCoord.xy / screenSize).xyz;\\r\\n    vec3 phase_corr = texture(u_phase, gl_FragCoord.xy / screenSize).xyz;\\r\\n\\r\\n    vec3 phase = phase_corr * 2. * PI - vec3(PI);\\r\\n    vec3 magn = exp(logmagn * log(1. + u_maxval)) - vec3(1.);\\r\\n\\r\\n    vec3 x = magn * cos(phase);\\r\\n    vec3 y = magn * sin(phase);\\r\\n\\r\\n    outX = vec4(x, 1.);\\r\\n    outY = vec4(y, 1.);\\r\\n    \\r\\n}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZ2xzbC91bnBvbGFybWFwLmZyYWcuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGdEQUFnRCw2QkFBNkIsOEJBQThCLDRCQUE0QiwrQkFBK0IsK0ZBQStGLHVDQUF1QyxxQkFBcUIseUVBQXlFLDZFQUE2RSx5REFBeUQsaUVBQWlFLHVDQUF1QyxtQ0FBbUMsK0JBQStCLDJCQUEyQixhQUFhLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZ2xzbC91bnBvbGFybWFwLmZyYWc/MjYxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIiN2ZXJzaW9uIDMwMCBlc1xcclxcblxcclxcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcclxcbnVuaWZvcm0gc2FtcGxlcjJEIHVfbWFnbjtcXHJcXG51bmlmb3JtIHNhbXBsZXIyRCB1X3BoYXNlO1xcclxcbnVuaWZvcm0gdmVjMiBzY3JlZW5TaXplO1xcclxcblxcclxcbnVuaWZvcm0gZmxvYXQgdV9tYXh2YWw7XFxyXFxuXFxyXFxuI2RlZmluZSBQSSAzLjE0MTU5MjY1MzU4OTc5MzIzODQ2MjY0MzM4MzI3OTVcXHJcXG5cXHJcXG5sYXlvdXQobG9jYXRpb24gPSAwKSBvdXQgdmVjNCBvdXRYO1xcclxcbmxheW91dChsb2NhdGlvbiA9IDEpIG91dCB2ZWM0IG91dFk7XFxyXFxuXFxyXFxudm9pZCBtYWluKCkge1xcclxcbiAgICB2ZWMzIGxvZ21hZ24gPSB0ZXh0dXJlKHVfbWFnbiwgZ2xfRnJhZ0Nvb3JkLnh5IC8gc2NyZWVuU2l6ZSkueHl6O1xcclxcbiAgICB2ZWMzIHBoYXNlX2NvcnIgPSB0ZXh0dXJlKHVfcGhhc2UsIGdsX0ZyYWdDb29yZC54eSAvIHNjcmVlblNpemUpLnh5ejtcXHJcXG5cXHJcXG4gICAgdmVjMyBwaGFzZSA9IHBoYXNlX2NvcnIgKiAyLiAqIFBJIC0gdmVjMyhQSSk7XFxyXFxuICAgIHZlYzMgbWFnbiA9IGV4cChsb2dtYWduICogbG9nKDEuICsgdV9tYXh2YWwpKSAtIHZlYzMoMS4pO1xcclxcblxcclxcbiAgICB2ZWMzIHggPSBtYWduICogY29zKHBoYXNlKTtcXHJcXG4gICAgdmVjMyB5ID0gbWFnbiAqIHNpbihwaGFzZSk7XFxyXFxuXFxyXFxuICAgIG91dFggPSB2ZWM0KHgsIDEuKTtcXHJcXG4gICAgb3V0WSA9IHZlYzQoeSwgMS4pO1xcclxcbiAgICBcXHJcXG59XCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/glsl/unpolarmap.frag\n");

/***/ }),

/***/ "./src/icons/flip-x.svg":
/*!******************************!*\
  !*** ./src/icons/flip-x.svg ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"<svg width=\\\"24px\\\" height=\\\"24px\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" >\\r\\n<g>\\r\\n\\t<path transform=\\\"scale(0.4)\\\" d=\\\"M27.209,0.023c-0.46-0.102-0.928,0.138-1.122,0.568l-26,58c-0.139,0.31-0.111,0.668,0.073,0.953\\r\\n\\t\\tc0.184,0.284,0.5,0.456,0.839,0.456h26c0.552,0,1-0.447,1-1v-58C28,0.529,27.671,0.122,27.209,0.023z\\\"/>\\r\\n\\t<path  transform=\\\"scale(0.4)\\\" d=\\\"M59.913,58.592l-26-58c-0.192-0.431-0.66-0.67-1.122-0.568C32.33,0.122,32,0.529,32,1.001v58c0,0.553,0.448,1,1,1h26\\r\\n\\t\\tc0.339,0,0.655-0.172,0.839-0.456C60.024,59.26,60.052,58.901,59.913,58.592z\\\"/>\\r\\n</g>\\r\\n</svg>\\r\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaWNvbnMvZmxpcC14LnN2Zy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsaW1CQUFpbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaWNvbnMvZmxpcC14LnN2Zz8xMjU5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB3aWR0aD1cXFwiMjRweFxcXCIgaGVpZ2h0PVxcXCIyNHB4XFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgPlxcclxcbjxnPlxcclxcblxcdDxwYXRoIHRyYW5zZm9ybT1cXFwic2NhbGUoMC40KVxcXCIgZD1cXFwiTTI3LjIwOSwwLjAyM2MtMC40Ni0wLjEwMi0wLjkyOCwwLjEzOC0xLjEyMiwwLjU2OGwtMjYsNThjLTAuMTM5LDAuMzEtMC4xMTEsMC42NjgsMC4wNzMsMC45NTNcXHJcXG5cXHRcXHRjMC4xODQsMC4yODQsMC41LDAuNDU2LDAuODM5LDAuNDU2aDI2YzAuNTUyLDAsMS0wLjQ0NywxLTF2LTU4QzI4LDAuNTI5LDI3LjY3MSwwLjEyMiwyNy4yMDksMC4wMjN6XFxcIi8+XFxyXFxuXFx0PHBhdGggIHRyYW5zZm9ybT1cXFwic2NhbGUoMC40KVxcXCIgZD1cXFwiTTU5LjkxMyw1OC41OTJsLTI2LTU4Yy0wLjE5Mi0wLjQzMS0wLjY2LTAuNjctMS4xMjItMC41NjhDMzIuMzMsMC4xMjIsMzIsMC41MjksMzIsMS4wMDF2NThjMCwwLjU1MywwLjQ0OCwxLDEsMWgyNlxcclxcblxcdFxcdGMwLjMzOSwwLDAuNjU1LTAuMTcyLDAuODM5LTAuNDU2QzYwLjAyNCw1OS4yNiw2MC4wNTIsNTguOTAxLDU5LjkxMyw1OC41OTJ6XFxcIi8+XFxyXFxuPC9nPlxcclxcbjwvc3ZnPlxcclxcblwiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/icons/flip-x.svg\n");

/***/ }),

/***/ "./src/icons/flip-y.svg":
/*!******************************!*\
  !*** ./src/icons/flip-y.svg ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"<svg width=\\\"24px\\\" height=\\\"24px\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\r\\n<g>\\r\\n\\t<path transform=\\\"scale(0.4)\\\" d=\\\"M59,32H1c-0.472,0-0.879,0.33-0.978,0.791s0.139,0.929,0.569,1.121l58,26C58.722,59.971,58.861,60,59,60\\r\\n\\t\\tc0.19,0,0.379-0.054,0.543-0.16C59.828,59.655,60,59.339,60,59V33C60,32.447,59.552,32,59,32z\\\"/>\\r\\n\\t<path transform=\\\"scale(0.4)\\\" d=\\\"M59.544,0.16c-0.285-0.185-0.642-0.21-0.953-0.072l-58,26c-0.43,0.192-0.667,0.66-0.569,1.121S0.529,28,1,28h58\\r\\n\\t\\tc0.552,0,1-0.447,1-1V1C60,0.661,59.828,0.345,59.544,0.16z\\\"/>\\r\\n</g>\\r\\n</svg>\\r\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaWNvbnMvZmxpcC15LnN2Zy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsMGtCQUEwa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaWNvbnMvZmxpcC15LnN2Zz8xYTJjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB3aWR0aD1cXFwiMjRweFxcXCIgaGVpZ2h0PVxcXCIyNHB4XFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+XFxyXFxuPGc+XFxyXFxuXFx0PHBhdGggdHJhbnNmb3JtPVxcXCJzY2FsZSgwLjQpXFxcIiBkPVxcXCJNNTksMzJIMWMtMC40NzIsMC0wLjg3OSwwLjMzLTAuOTc4LDAuNzkxczAuMTM5LDAuOTI5LDAuNTY5LDEuMTIxbDU4LDI2QzU4LjcyMiw1OS45NzEsNTguODYxLDYwLDU5LDYwXFxyXFxuXFx0XFx0YzAuMTksMCwwLjM3OS0wLjA1NCwwLjU0My0wLjE2QzU5LjgyOCw1OS42NTUsNjAsNTkuMzM5LDYwLDU5VjMzQzYwLDMyLjQ0Nyw1OS41NTIsMzIsNTksMzJ6XFxcIi8+XFxyXFxuXFx0PHBhdGggdHJhbnNmb3JtPVxcXCJzY2FsZSgwLjQpXFxcIiBkPVxcXCJNNTkuNTQ0LDAuMTZjLTAuMjg1LTAuMTg1LTAuNjQyLTAuMjEtMC45NTMtMC4wNzJsLTU4LDI2Yy0wLjQzLDAuMTkyLTAuNjY3LDAuNjYtMC41NjksMS4xMjFTMC41MjksMjgsMSwyOGg1OFxcclxcblxcdFxcdGMwLjU1MiwwLDEtMC40NDcsMS0xVjFDNjAsMC42NjEsNTkuODI4LDAuMzQ1LDU5LjU0NCwwLjE2elxcXCIvPlxcclxcbjwvZz5cXHJcXG48L3N2Zz5cXHJcXG5cIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/icons/flip-y.svg\n");

/***/ }),

/***/ "./src/icons/negate.svg":
/*!******************************!*\
  !*** ./src/icons/negate.svg ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"<svg width=\\\"24px\\\" height=\\\"24px\\\" viewBox=\\\"0 0 512 512\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\r\\n            <circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-miterlimit=\\\"10\\\" stroke-width=\\\"32\\\" cx=\\\"256\\\" cy=\\\"256\\\" r=\\\"208\\\" />\\r\\n            <path d=\\\"M256,176V336a80,80,0,0,1,0-160Z\\\" />\\r\\n            <path d=\\\"M256,48V176a80,80,0,0,1,0,160V464c114.88,0,208-93.12,208-208S370.88,48,256,48Z\\\" />\\r\\n</svg>\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaWNvbnMvbmVnYXRlLnN2Zy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsNlpBQTZaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2ljb25zL25lZ2F0ZS5zdmc/ZjA0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjxzdmcgd2lkdGg9XFxcIjI0cHhcXFwiIGhlaWdodD1cXFwiMjRweFxcXCIgdmlld0JveD1cXFwiMCAwIDUxMiA1MTJcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+XFxyXFxuICAgICAgICAgICAgPGNpcmNsZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS1taXRlcmxpbWl0PVxcXCIxMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIzMlxcXCIgY3g9XFxcIjI1NlxcXCIgY3k9XFxcIjI1NlxcXCIgcj1cXFwiMjA4XFxcIiAvPlxcclxcbiAgICAgICAgICAgIDxwYXRoIGQ9XFxcIk0yNTYsMTc2VjMzNmE4MCw4MCwwLDAsMSwwLTE2MFpcXFwiIC8+XFxyXFxuICAgICAgICAgICAgPHBhdGggZD1cXFwiTTI1Niw0OFYxNzZhODAsODAsMCwwLDEsMCwxNjBWNDY0YzExNC44OCwwLDIwOC05My4xMiwyMDgtMjA4UzM3MC44OCw0OCwyNTYsNDhaXFxcIiAvPlxcclxcbjwvc3ZnPlwiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/icons/negate.svg\n");

/***/ }),

/***/ "./src/icons/rotate-left.svg":
/*!***********************************!*\
  !*** ./src/icons/rotate-left.svg ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"<svg width=\\\"24px\\\" height=\\\"24px\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n  <path fill-rule=\\\"evenodd\\\" d=\\\"M20.4852814,14 L12,22.4852814 L3.51471863,14 L12,5.51471863 L20.4852814,14 Z M6.34314575,14 L12,19.6568542 L17.6568542,14 L12,8.34314575 L6.34314575,14 Z M4.15672797,4.28593933 C6.18580699,2.22227176 8.98673097,1 12,1 C15.9721115,1 19.5752376,3.12390371 21.5277839,6.49927404 L19.7965722,7.50072596 C18.1979627,4.73720691 15.2508538,3 12,3 C9.38603956,3 6.96846584,4.12319378 5.29042786,6 L8,6 L8,8 L2.40310647,8 L2.00227469,2.0674107 L3.99772531,1.9325893 L4.15672797,4.28593933 Z\\\"/>\\n</svg>\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaWNvbnMvcm90YXRlLWxlZnQuc3ZnLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxvbkJBQW9uQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9pY29ucy9yb3RhdGUtbGVmdC5zdmc/ZDhkOSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjxzdmcgd2lkdGg9XFxcIjI0cHhcXFwiIGhlaWdodD1cXFwiMjRweFxcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPlxcbiAgPHBhdGggZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIiBkPVxcXCJNMjAuNDg1MjgxNCwxNCBMMTIsMjIuNDg1MjgxNCBMMy41MTQ3MTg2MywxNCBMMTIsNS41MTQ3MTg2MyBMMjAuNDg1MjgxNCwxNCBaIE02LjM0MzE0NTc1LDE0IEwxMiwxOS42NTY4NTQyIEwxNy42NTY4NTQyLDE0IEwxMiw4LjM0MzE0NTc1IEw2LjM0MzE0NTc1LDE0IFogTTQuMTU2NzI3OTcsNC4yODU5MzkzMyBDNi4xODU4MDY5OSwyLjIyMjI3MTc2IDguOTg2NzMwOTcsMSAxMiwxIEMxNS45NzIxMTE1LDEgMTkuNTc1MjM3NiwzLjEyMzkwMzcxIDIxLjUyNzc4MzksNi40OTkyNzQwNCBMMTkuNzk2NTcyMiw3LjUwMDcyNTk2IEMxOC4xOTc5NjI3LDQuNzM3MjA2OTEgMTUuMjUwODUzOCwzIDEyLDMgQzkuMzg2MDM5NTYsMyA2Ljk2ODQ2NTg0LDQuMTIzMTkzNzggNS4yOTA0Mjc4Niw2IEw4LDYgTDgsOCBMMi40MDMxMDY0Nyw4IEwyLjAwMjI3NDY5LDIuMDY3NDEwNyBMMy45OTc3MjUzMSwxLjkzMjU4OTMgTDQuMTU2NzI3OTcsNC4yODU5MzkzMyBaXFxcIi8+XFxuPC9zdmc+XFxuXCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/icons/rotate-left.svg\n");

/***/ }),

/***/ "./src/icons/rotate-right.svg":
/*!************************************!*\
  !*** ./src/icons/rotate-right.svg ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"<svg width=\\\"24px\\\" height=\\\"24px\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n  <path fill-rule=\\\"evenodd\\\" d=\\\"M3.04477723,14 L11.5300586,5.51471863 L20.01534,14 L11.5300586,22.4852814 L3.04477723,14 Z M17.1869129,14 L11.5300586,8.34314575 L5.87320435,14 L11.5300586,19.6568542 L17.1869129,14 Z M19.3733306,4.28593933 L19.5323333,1.9325893 L21.5277839,2.0674107 L21.1269521,8 L15.5300586,8 L15.5300586,6 L18.2396307,6 C16.5615928,4.12319378 14.144019,3 11.5300586,3 C8.27920479,3 5.33209587,4.73720691 3.73348642,7.50072596 L2.00227469,6.49927404 C3.954821,3.12390371 7.5579471,1 11.5300586,1 C14.5433276,1 17.3442516,2.22227176 19.3733306,4.28593933 Z\\\"/>\\n</svg>\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaWNvbnMvcm90YXRlLXJpZ2h0LnN2Zy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsZ3JCQUFnckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaWNvbnMvcm90YXRlLXJpZ2h0LnN2Zz83ZTlhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB3aWR0aD1cXFwiMjRweFxcXCIgaGVpZ2h0PVxcXCIyNHB4XFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+XFxuICA8cGF0aCBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiIGQ9XFxcIk0zLjA0NDc3NzIzLDE0IEwxMS41MzAwNTg2LDUuNTE0NzE4NjMgTDIwLjAxNTM0LDE0IEwxMS41MzAwNTg2LDIyLjQ4NTI4MTQgTDMuMDQ0Nzc3MjMsMTQgWiBNMTcuMTg2OTEyOSwxNCBMMTEuNTMwMDU4Niw4LjM0MzE0NTc1IEw1Ljg3MzIwNDM1LDE0IEwxMS41MzAwNTg2LDE5LjY1Njg1NDIgTDE3LjE4NjkxMjksMTQgWiBNMTkuMzczMzMwNiw0LjI4NTkzOTMzIEwxOS41MzIzMzMzLDEuOTMyNTg5MyBMMjEuNTI3NzgzOSwyLjA2NzQxMDcgTDIxLjEyNjk1MjEsOCBMMTUuNTMwMDU4Niw4IEwxNS41MzAwNTg2LDYgTDE4LjIzOTYzMDcsNiBDMTYuNTYxNTkyOCw0LjEyMzE5Mzc4IDE0LjE0NDAxOSwzIDExLjUzMDA1ODYsMyBDOC4yNzkyMDQ3OSwzIDUuMzMyMDk1ODcsNC43MzcyMDY5MSAzLjczMzQ4NjQyLDcuNTAwNzI1OTYgTDIuMDAyMjc0NjksNi40OTkyNzQwNCBDMy45NTQ4MjEsMy4xMjM5MDM3MSA3LjU1Nzk0NzEsMSAxMS41MzAwNTg2LDEgQzE0LjU0MzMyNzYsMSAxNy4zNDQyNTE2LDIuMjIyMjcxNzYgMTkuMzczMzMwNiw0LjI4NTkzOTMzIFpcXFwiLz5cXG48L3N2Zz5cXG5cIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/icons/rotate-right.svg\n");

/***/ }),

/***/ "./style.css":
/*!*******************!*\
  !*** ./style.css ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"html, body {\\r\\n    width: 100%;\\r\\n    height: 100%;\\r\\n    margin: 0;\\r\\n}\\r\\n\\r\\n#header {\\r\\n    font-size: 48px;\\r\\n    font-family: Arial;\\r\\n    padding-top: 24px;\\r\\n    padding-bottom: 24px;\\r\\n}\\r\\n\\r\\n#footer {\\r\\n    padding-top: 24px;\\r\\n    padding-bottom: 24px;\\r\\n}\\r\\n\\r\\n#header, #footer, #body {\\r\\n    border: 1px grey solid;\\r\\n}\\r\\n\\r\\n* {\\r\\n    box-sizing: border-box;\\r\\n}\\r\\n\\r\\n.container {\\r\\n    height: 100%;\\r\\n    /* width: 100%; */\\r\\n    overflow-x: hidden;\\r\\n}\\r\\n\\r\\n.row {\\r\\n    display: flex;\\r\\n    flex-direction: row;\\r\\n}\\r\\n\\r\\n.column {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n}\\r\\n\\r\\n.justify-center {\\r\\n    justify-content: center;\\r\\n}\\r\\n\\r\\n.flex-grow-1 {\\r\\n    flex-grow: 1;\\r\\n}\\r\\n\\r\\n.absolute {\\r\\n    position: absolute;\\r\\n}\\r\\n\\r\\n.hidden {\\r\\n    display: none;\\r\\n}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zdHlsZS5jc3MuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGFBQWEsb0JBQW9CLHFCQUFxQixrQkFBa0IsS0FBSyxpQkFBaUIsd0JBQXdCLDJCQUEyQiwwQkFBMEIsNkJBQTZCLEtBQUssaUJBQWlCLDBCQUEwQiw2QkFBNkIsS0FBSyxpQ0FBaUMsK0JBQStCLEtBQUssV0FBVywrQkFBK0IsS0FBSyxvQkFBb0IscUJBQXFCLHdCQUF3Qiw2QkFBNkIsS0FBSyxjQUFjLHNCQUFzQiw0QkFBNEIsS0FBSyxpQkFBaUIsc0JBQXNCLCtCQUErQixLQUFLLHlCQUF5QixnQ0FBZ0MsS0FBSyxzQkFBc0IscUJBQXFCLEtBQUssbUJBQW1CLDJCQUEyQixLQUFLLGlCQUFpQixzQkFBc0IsS0FBSyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3R5bGUuY3NzPzFkZTciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJodG1sLCBib2R5IHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGhlaWdodDogMTAwJTtcXHJcXG4gICAgbWFyZ2luOiAwO1xcclxcbn1cXHJcXG5cXHJcXG4jaGVhZGVyIHtcXHJcXG4gICAgZm9udC1zaXplOiA0OHB4O1xcclxcbiAgICBmb250LWZhbWlseTogQXJpYWw7XFxyXFxuICAgIHBhZGRpbmctdG9wOiAyNHB4O1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogMjRweDtcXHJcXG59XFxyXFxuXFxyXFxuI2Zvb3RlciB7XFxyXFxuICAgIHBhZGRpbmctdG9wOiAyNHB4O1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogMjRweDtcXHJcXG59XFxyXFxuXFxyXFxuI2hlYWRlciwgI2Zvb3RlciwgI2JvZHkge1xcclxcbiAgICBib3JkZXI6IDFweCBncmV5IHNvbGlkO1xcclxcbn1cXHJcXG5cXHJcXG4qIHtcXHJcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG59XFxyXFxuXFxyXFxuLmNvbnRhaW5lciB7XFxyXFxuICAgIGhlaWdodDogMTAwJTtcXHJcXG4gICAgLyogd2lkdGg6IDEwMCU7ICovXFxyXFxuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcXHJcXG59XFxyXFxuXFxyXFxuLnJvdyB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxyXFxufVxcclxcblxcclxcbi5jb2x1bW4ge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbn1cXHJcXG5cXHJcXG4uanVzdGlmeS1jZW50ZXIge1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLmZsZXgtZ3Jvdy0xIHtcXHJcXG4gICAgZmxleC1ncm93OiAxO1xcclxcbn1cXHJcXG5cXHJcXG4uYWJzb2x1dGUge1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxufVxcclxcblxcclxcbi5oaWRkZW4ge1xcclxcbiAgICBkaXNwbGF5OiBub25lO1xcclxcbn1cIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./style.css\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.js");
/******/ 	
/******/ })()
;